
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b3c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008d10  08008d10  00009d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d4  080091d4  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091d4  080091d4  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091dc  080091dc  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091dc  080091dc  0000a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091e0  080091e0  0000a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080091e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cf8  200001dc  080093c0  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ed4  080093c0  0000bed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134e4  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d6  00000000  00000000  0001e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  000219c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c61  00000000  00000000  00022a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002485d  00000000  00000000  00023669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a9f  00000000  00000000  00047ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d55b3  00000000  00000000  0005b965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130f18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005330  00000000  00000000  00130f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0013628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008cf4 	.word	0x08008cf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008cf4 	.word	0x08008cf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <PLC_ProcessTask>:
static uint8_t checksum(const uint8_t * data, size_t len);

QueueHandle_t xQueuePLC = NULL;

void PLC_ProcessTask(void *param)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    (void)param;
    while (1)
    {
		mPrint("PLC Task is running...\n");
 8000fbc:	4880      	ldr	r0, [pc, #512]	@ (80011c0 <PLC_ProcessTask+0x20c>)
 8000fbe:	f000 fa15 	bl	80013ec <mPrint>
        PLC_Read_Pin_Input();
 8000fc2:	f000 f9b5 	bl	8001330 <PLC_Read_Pin_Input>
        /*--------------NetWork 1 -----------*/

        volatile uint8_t I0_0sl0 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	75fb      	strb	r3, [r7, #23]
        volatile static uint8_t checkEU0 = 1;
        if (!(I0_0))
 8000fca:	4b7e      	ldr	r3, [pc, #504]	@ (80011c4 <PLC_ProcessTask+0x210>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <PLC_ProcessTask+0x26>
        {
            checkEU0 = 0;
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80011c8 <PLC_ProcessTask+0x214>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
        }
        if ((!checkEU0) && (I0_0))
 8000fda:	4b7b      	ldr	r3, [pc, #492]	@ (80011c8 <PLC_ProcessTask+0x214>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <PLC_ProcessTask+0x44>
 8000fe4:	4b77      	ldr	r3, [pc, #476]	@ (80011c4 <PLC_ProcessTask+0x210>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <PLC_ProcessTask+0x44>
        {
            checkEU0 = 1;
 8000fee:	4b76      	ldr	r3, [pc, #472]	@ (80011c8 <PLC_ProcessTask+0x214>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
            I0_0sl0 = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
        }
        M0_0 = (((I0_0sl0 + M0_0)) * !I0_1);
 8000ff8:	4b74      	ldr	r3, [pc, #464]	@ (80011cc <PLC_ProcessTask+0x218>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b6f      	ldr	r3, [pc, #444]	@ (80011c4 <PLC_ProcessTask+0x210>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	fb12 f303 	smulbb	r3, r2, r3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001020:	701a      	strb	r2, [r3, #0]
        if (M0_0 > 0)
 8001022:	4b6a      	ldr	r3, [pc, #424]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <PLC_ProcessTask+0x80>
        {
            M0_0 = 1;
 800102c:	4b67      	ldr	r3, [pc, #412]	@ (80011cc <PLC_ProcessTask+0x218>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e002      	b.n	800103a <PLC_ProcessTask+0x86>
        }
        else
        {
            M0_0 = 0;
 8001034:	4b65      	ldr	r3, [pc, #404]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
        }
        /*--------------NetWork 2 -----------*/

        if ((M0_0))
 800103a:	4b64      	ldr	r3, [pc, #400]	@ (80011cc <PLC_ProcessTask+0x218>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <PLC_ProcessTask+0x9a>
            u16VW1 = AIW0;
 8001044:	4b62      	ldr	r3, [pc, #392]	@ (80011d0 <PLC_ProcessTask+0x21c>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b62      	ldr	r3, [pc, #392]	@ (80011d4 <PLC_ProcessTask+0x220>)
 800104c:	805a      	strh	r2, [r3, #2]
        M1_1 = (M0_0);
 800104e:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b5d      	ldr	r3, [pc, #372]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001056:	725a      	strb	r2, [r3, #9]
        if (M1_1 > 0)
 8001058:	4b5c      	ldr	r3, [pc, #368]	@ (80011cc <PLC_ProcessTask+0x218>)
 800105a:	7a5b      	ldrb	r3, [r3, #9]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <PLC_ProcessTask+0xb6>
        {
            M1_1 = 1;
 8001062:	4b5a      	ldr	r3, [pc, #360]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001064:	2201      	movs	r2, #1
 8001066:	725a      	strb	r2, [r3, #9]
 8001068:	e002      	b.n	8001070 <PLC_ProcessTask+0xbc>
        }
        else
        {
            M1_1 = 0;
 800106a:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <PLC_ProcessTask+0x218>)
 800106c:	2200      	movs	r2, #0
 800106e:	725a      	strb	r2, [r3, #9]
        }
        /*--------------NetWork 3 -----------*/

        if ((M0_0))
 8001070:	4b56      	ldr	r3, [pc, #344]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <PLC_ProcessTask+0xd2>
            u32VD[0] = (uint32_t)u16VW1;
 800107a:	4b56      	ldr	r3, [pc, #344]	@ (80011d4 <PLC_ProcessTask+0x220>)
 800107c:	885b      	ldrh	r3, [r3, #2]
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4b55      	ldr	r3, [pc, #340]	@ (80011d8 <PLC_ProcessTask+0x224>)
 8001084:	601a      	str	r2, [r3, #0]
        /*--------------NetWork 4 -----------*/

        if ((M0_0))
 8001086:	4b51      	ldr	r3, [pc, #324]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <PLC_ProcessTask+0xee>
            f32VD[0] = (float)u32VD[0];
 8001090:	4b51      	ldr	r3, [pc, #324]	@ (80011d8 <PLC_ProcessTask+0x224>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109c:	4b4f      	ldr	r3, [pc, #316]	@ (80011dc <PLC_ProcessTask+0x228>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
        /*--------------NetWork 5 -----------*/

        if ((M0_0))
 80010a2:	4b4a      	ldr	r3, [pc, #296]	@ (80011cc <PLC_ProcessTask+0x218>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <PLC_ProcessTask+0x11e>
            f32VD[0] = f32VD[0] / 4096.0;
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <PLC_ProcessTask+0x228>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa69 	bl	8000588 <__aeabi_f2d>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b49      	ldr	r3, [pc, #292]	@ (80011e0 <PLC_ProcessTask+0x22c>)
 80010bc:	f7ff fbe6 	bl	800088c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd8e 	bl	8000be8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a43      	ldr	r2, [pc, #268]	@ (80011dc <PLC_ProcessTask+0x228>)
 80010d0:	6013      	str	r3, [r2, #0]
        /*--------------NetWork 6 -----------*/

        if ((M0_0))
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <PLC_ProcessTask+0x218>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d012      	beq.n	8001102 <PLC_ProcessTask+0x14e>
            f32VD[0] = f32VD[0] * 100.0;
 80010dc:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <PLC_ProcessTask+0x228>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa51 	bl	8000588 <__aeabi_f2d>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <PLC_ProcessTask+0x230>)
 80010ec:	f7ff faa4 	bl	8000638 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd76 	bl	8000be8 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a37      	ldr	r2, [pc, #220]	@ (80011dc <PLC_ProcessTask+0x228>)
 8001100:	6013      	str	r3, [r2, #0]
        /*--------------NetWork 7 -----------*/

        volatile uint8_t u8Compare0 = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	75bb      	strb	r3, [r7, #22]
        u8Compare0 = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	75bb      	strb	r3, [r7, #22]
        if (f32VD[0] >= 50.0)
 800110a:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <PLC_ProcessTask+0x228>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80011e8 <PLC_ProcessTask+0x234>
 8001114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	db01      	blt.n	8001122 <PLC_ProcessTask+0x16e>
        {
            u8Compare0 = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	75bb      	strb	r3, [r7, #22]
        }
        Q0_0 = (M0_0 * u8Compare0);
 8001122:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <PLC_ProcessTask+0x218>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	fb12 f303 	smulbb	r3, r2, r3
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b2e      	ldr	r3, [pc, #184]	@ (80011ec <PLC_ProcessTask+0x238>)
 8001134:	701a      	strb	r2, [r3, #0]
        if (Q0_0 > 0)
 8001136:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <PLC_ProcessTask+0x238>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <PLC_ProcessTask+0x194>
        {
            Q0_0 = 1;
 8001140:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <PLC_ProcessTask+0x238>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e002      	b.n	800114e <PLC_ProcessTask+0x19a>
        }
        else
        {
            Q0_0 = 0;
 8001148:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <PLC_ProcessTask+0x238>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
        }
        PLC_Write_Pin_Output();
 800114e:	f000 f913 	bl	8001378 <PLC_Write_Pin_Output>

        /* Set data to queue */
        PLC_DataFrame_t sendFrame;
        if (xQueuePLC != NULL)
 8001152:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <PLC_ProcessTask+0x23c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d01c      	beq.n	8001194 <PLC_ProcessTask+0x1e0>
        {
            sendFrame.led_status = Q0_0; // Set LED status
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <PLC_ProcessTask+0x238>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	733b      	strb	r3, [r7, #12]
            sendFrame.reserved[0] = 0; // Reserved bytes
 8001162:	2300      	movs	r3, #0
 8001164:	737b      	strb	r3, [r7, #13]
            sendFrame.reserved[1] = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	73bb      	strb	r3, [r7, #14]
            sendFrame.reserved[2] = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
            sendFrame.sensor_value.fsensor_v = f32VD[0];
 800116e:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <PLC_ProcessTask+0x228>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]

            if (xQueueSend(xQueuePLC, &sendFrame, portMAX_DELAY) != pdPASS)
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <PLC_ProcessTask+0x23c>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	f107 010c 	add.w	r1, r7, #12
 800117c:	2300      	movs	r3, #0
 800117e:	f04f 32ff 	mov.w	r2, #4294967295
 8001182:	f002 fcbb 	bl	8003afc <xQueueGenericSend>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d006      	beq.n	800119a <PLC_ProcessTask+0x1e6>
            {
                mPrint("Failed to send data to queue\n");
 800118c:	4819      	ldr	r0, [pc, #100]	@ (80011f4 <PLC_ProcessTask+0x240>)
 800118e:	f000 f92d 	bl	80013ec <mPrint>
 8001192:	e002      	b.n	800119a <PLC_ProcessTask+0x1e6>
            }
        }
        else
        {
            mPrint("Queue is NULL\n");
 8001194:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <PLC_ProcessTask+0x244>)
 8001196:	f000 f929 	bl	80013ec <mPrint>
        }

        mPrint("LED Status: %d, Sensor Value: %.2f\n", Q0_0, f32VD[0]);
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <PLC_ProcessTask+0x238>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461c      	mov	r4, r3
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <PLC_ProcessTask+0x228>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9ee 	bl	8000588 <__aeabi_f2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4621      	mov	r1, r4
 80011b2:	4812      	ldr	r0, [pc, #72]	@ (80011fc <PLC_ProcessTask+0x248>)
 80011b4:	f000 f91a 	bl	80013ec <mPrint>

        osDelay(100); // Delay to simulate PLC cycle time
 80011b8:	2064      	movs	r0, #100	@ 0x64
 80011ba:	f002 fa55 	bl	8003668 <osDelay>
    {
 80011be:	e6fd      	b.n	8000fbc <PLC_ProcessTask+0x8>
 80011c0:	08008d10 	.word	0x08008d10
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000238 	.word	0x20000238
 80011d0:	20000210 	.word	0x20000210
 80011d4:	20000250 	.word	0x20000250
 80011d8:	20000260 	.word	0x20000260
 80011dc:	20000280 	.word	0x20000280
 80011e0:	40b00000 	.word	0x40b00000
 80011e4:	40590000 	.word	0x40590000
 80011e8:	42480000 	.word	0x42480000
 80011ec:	20000220 	.word	0x20000220
 80011f0:	200002a0 	.word	0x200002a0
 80011f4:	08008d28 	.word	0x08008d28
 80011f8:	08008d48 	.word	0x08008d48
 80011fc:	08008d58 	.word	0x08008d58

08001200 <PLC_SendDataTask>:
    }
}

void PLC_SendDataTask(void * argument) {
 8001200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001204:	b088      	sub	sp, #32
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
    
    for (;;)
    {
        mPrint("Notify task running...\n");
 800120a:	4844      	ldr	r0, [pc, #272]	@ (800131c <PLC_SendDataTask+0x11c>)
 800120c:	f000 f8ee 	bl	80013ec <mPrint>

        if (xQueuePLC != NULL)
 8001210:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <PLC_SendDataTask+0x120>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d07a      	beq.n	800130e <PLC_SendDataTask+0x10e>
        {
 8001218:	466b      	mov	r3, sp
 800121a:	461e      	mov	r6, r3
            PLC_DataFrame_t receivedData;
            if (xQueueReceive(xQueuePLC, &receivedData, portMAX_DELAY) == pdTRUE)
 800121c:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <PLC_SendDataTask+0x120>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f107 010c 	add.w	r1, r7, #12
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	4618      	mov	r0, r3
 800122a:	f002 fe07 	bl	8003e3c <xQueueReceive>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d112      	bne.n	800125a <PLC_SendDataTask+0x5a>
            {
                mSendCommand((uint8_t *)&receivedData, sizeof(PLC_DataFrame_t));
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2108      	movs	r1, #8
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f906 	bl	800144c <mSendCommand>
                mPrint("Received data: LED Status: %d, Sensor Value: %.2f\n", receivedData.led_status, receivedData.sensor_value.fsensor_v);
 8001240:	7b3b      	ldrb	r3, [r7, #12]
 8001242:	469a      	mov	sl, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f99e 	bl	8000588 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4651      	mov	r1, sl
 8001252:	4834      	ldr	r0, [pc, #208]	@ (8001324 <PLC_SendDataTask+0x124>)
 8001254:	f000 f8ca 	bl	80013ec <mPrint>
 8001258:	e002      	b.n	8001260 <PLC_SendDataTask+0x60>
            }
            else
            {
                mPrint("Failed to receive data from queue\n");
 800125a:	4833      	ldr	r0, [pc, #204]	@ (8001328 <PLC_SendDataTask+0x128>)
 800125c:	f000 f8c6 	bl	80013ec <mPrint>
            }

            const uint8_t LEN = sizeof(PLC_DataFrame_t);
 8001260:	2308      	movs	r3, #8
 8001262:	77fb      	strb	r3, [r7, #31]
            uint8_t cs = (LEN + checksum((uint8_t *)&receivedData, LEN)) & 0xFF;
 8001264:	7ffa      	ldrb	r2, [r7, #31]
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f89b 	bl	80013a8 <checksum>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	7ffb      	ldrb	r3, [r7, #31]
 8001278:	4413      	add	r3, r2
 800127a:	77bb      	strb	r3, [r7, #30]
            
            uint8_t frame[LEN + 3];
 800127c:	7ffb      	ldrb	r3, [r7, #31]
 800127e:	3302      	adds	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	3303      	adds	r3, #3
 8001286:	2200      	movs	r2, #0
 8001288:	461c      	mov	r4, r3
 800128a:	4615      	mov	r5, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	00eb      	lsls	r3, r5, #3
 8001296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800129a:	00e2      	lsls	r2, r4, #3
 800129c:	7ffb      	ldrb	r3, [r7, #31]
 800129e:	3303      	adds	r3, #3
 80012a0:	2200      	movs	r2, #0
 80012a2:	4698      	mov	r8, r3
 80012a4:	4691      	mov	r9, r2
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ba:	7ffb      	ldrb	r3, [r7, #31]
 80012bc:	3303      	adds	r3, #3
 80012be:	3307      	adds	r3, #7
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	ebad 0d03 	sub.w	sp, sp, r3
 80012c8:	466b      	mov	r3, sp
 80012ca:	3300      	adds	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
            memset(frame, 0, sizeof(frame));
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	3303      	adds	r3, #3
 80012d2:	461a      	mov	r2, r3
 80012d4:	2100      	movs	r1, #0
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f005 fc3e 	bl	8006b58 <memset>

            frame[0] = 0xAA; // Start byte
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	22aa      	movs	r2, #170	@ 0xaa
 80012e0:	701a      	strb	r2, [r3, #0]
            frame[1] = LEN; // Length of the data
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	7ffa      	ldrb	r2, [r7, #31]
 80012e6:	705a      	strb	r2, [r3, #1]
            memcpy(&frame[2], (uint8_t *)&receivedData, LEN);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3302      	adds	r3, #2
 80012ec:	7ffa      	ldrb	r2, [r7, #31]
 80012ee:	f107 010c 	add.w	r1, r7, #12
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 fcaf 	bl	8006c56 <memcpy>
            frame[LEN+2] = cs;
 80012f8:	7ffb      	ldrb	r3, [r7, #31]
 80012fa:	3302      	adds	r3, #2
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	7fb9      	ldrb	r1, [r7, #30]
 8001300:	54d1      	strb	r1, [r2, r3]
            mSendCommand(frame, sizeof(PLC_DataFrame_t)+3);
 8001302:	210b      	movs	r1, #11
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f000 f8a1 	bl	800144c <mSendCommand>
 800130a:	46b5      	mov	sp, r6
 800130c:	e002      	b.n	8001314 <PLC_SendDataTask+0x114>
        }
        else
        {
            mPrint("Queue is NULL in Notify Task\n");
 800130e:	4807      	ldr	r0, [pc, #28]	@ (800132c <PLC_SendDataTask+0x12c>)
 8001310:	f000 f86c 	bl	80013ec <mPrint>
        }

        osDelay(250);
 8001314:	20fa      	movs	r0, #250	@ 0xfa
 8001316:	f002 f9a7 	bl	8003668 <osDelay>
        mPrint("Notify task running...\n");
 800131a:	e776      	b.n	800120a <PLC_SendDataTask+0xa>
 800131c:	08008d7c 	.word	0x08008d7c
 8001320:	200002a0 	.word	0x200002a0
 8001324:	08008d94 	.word	0x08008d94
 8001328:	08008dc8 	.word	0x08008dc8
 800132c:	08008dec 	.word	0x08008dec

08001330 <PLC_Read_Pin_Input>:
    }
    /* USER CODE END 5 */
}

void PLC_Read_Pin_Input(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    I0_0 = !HAL_GPIO_ReadPin(I0_0_PORT, I0_0_PIN);
 8001334:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <PLC_Read_Pin_Input+0x40>)
 800133a:	f000 fefb 	bl	8002134 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <PLC_Read_Pin_Input+0x44>)
 800134e:	701a      	strb	r2, [r3, #0]
    I0_1 = !HAL_GPIO_ReadPin(I0_1_PORT, I0_1_PIN);
 8001350:	2101      	movs	r1, #1
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <PLC_Read_Pin_Input+0x40>)
 8001354:	f000 feee 	bl	8002134 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <PLC_Read_Pin_Input+0x44>)
 8001368:	705a      	strb	r2, [r3, #1]
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020800 	.word	0x40020800
 8001374:	200001f8 	.word	0x200001f8

08001378 <PLC_Write_Pin_Output>:


void PLC_Write_Pin_Output(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
    if (Q0_0 >= 1)
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <PLC_Write_Pin_Output+0x28>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <PLC_Write_Pin_Output+0x1a>
    {
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, ENABLE); /* Set Q0_0 pin for LED */
 8001386:	2201      	movs	r2, #1
 8001388:	2120      	movs	r1, #32
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <PLC_Write_Pin_Output+0x2c>)
 800138c:	f000 feea 	bl	8002164 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE); /* Reset Q0_0 pin for LED */
    }
}
 8001390:	e004      	b.n	800139c <PLC_Write_Pin_Output+0x24>
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE); /* Reset Q0_0 pin for LED */
 8001392:	2200      	movs	r2, #0
 8001394:	2120      	movs	r1, #32
 8001396:	4803      	ldr	r0, [pc, #12]	@ (80013a4 <PLC_Write_Pin_Output+0x2c>)
 8001398:	f000 fee4 	bl	8002164 <HAL_GPIO_WritePin>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000220 	.word	0x20000220
 80013a4:	40020000 	.word	0x40020000

080013a8 <checksum>:

static uint8_t checksum(const uint8_t * data, size_t len)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    uint16_t sum = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < len; i++) 
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	e00a      	b.n	80013d2 <checksum+0x2a>
        sum += data[i];
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4413      	add	r3, r2
 80013ca:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < len; i++) 
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3f0      	bcc.n	80013bc <checksum+0x14>
    return sum & 0xFF;
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	b2db      	uxtb	r3, r3
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <mPrint>:
#include "mPrint.h"

char mPrintBuffer[PRINT_BUFFER_SIZE];

void mPrint (const char * format, ...)
{
 80013ec:	b40f      	push	{r0, r1, r2, r3}
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
    memset(mPrintBuffer, 0, sizeof(mPrintBuffer));
 80013f4:	22fa      	movs	r2, #250	@ 0xfa
 80013f6:	2100      	movs	r1, #0
 80013f8:	4812      	ldr	r0, [pc, #72]	@ (8001444 <mPrint+0x58>)
 80013fa:	f005 fbad 	bl	8006b58 <memset>
    va_list args;
    va_start(args, format);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(mPrintBuffer, sizeof(mPrintBuffer), format, args);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	21fa      	movs	r1, #250	@ 0xfa
 800140a:	480e      	ldr	r0, [pc, #56]	@ (8001444 <mPrint+0x58>)
 800140c:	f005 fb96 	bl	8006b3c <vsniprintf>
 8001410:	6078      	str	r0, [r7, #4]
    va_end(args);
    if (len < 0) len = 0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da01      	bge.n	800141c <mPrint+0x30>
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
    if (len >= sizeof(mPrintBuffer)) len = sizeof(mPrintBuffer) - 1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001420:	d901      	bls.n	8001426 <mPrint+0x3a>
 8001422:	23f9      	movs	r3, #249	@ 0xf9
 8001424:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)mPrintBuffer, (uint16_t)len, 100);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	b29a      	uxth	r2, r3
 800142a:	2364      	movs	r3, #100	@ 0x64
 800142c:	4905      	ldr	r1, [pc, #20]	@ (8001444 <mPrint+0x58>)
 800142e:	4806      	ldr	r0, [pc, #24]	@ (8001448 <mPrint+0x5c>)
 8001430:	f001 fd3a 	bl	8002ea8 <HAL_UART_Transmit>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800143e:	b004      	add	sp, #16
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200002a4 	.word	0x200002a4
 8001448:	200003e8 	.word	0x200003e8

0800144c <mSendCommand>:

void mSendCommand(const uint8_t *data, size_t len) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) return;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00a      	beq.n	8001472 <mSendCommand+0x26>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <mSendCommand+0x26>
    HAL_UART_Transmit(&huart1, data, len, 100); // Gửi toàn bộ dữ liệu nhị phân
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b29a      	uxth	r2, r3
 8001466:	2364      	movs	r3, #100	@ 0x64
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4804      	ldr	r0, [pc, #16]	@ (800147c <mSendCommand+0x30>)
 800146c:	f001 fd1c 	bl	8002ea8 <HAL_UART_Transmit>
 8001470:	e000      	b.n	8001474 <mSendCommand+0x28>
    if (data == NULL || len == 0) return;
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003a0 	.word	0x200003a0

08001480 <main>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void PLC_Init(void);

int main(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
    HAL_Init();
 8001486:	f000 fb69 	bl	8001b5c <HAL_Init>
    SystemClock_Config();
 800148a:	f000 f837 	bl	80014fc <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800148e:	f000 f8fd 	bl	800168c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8001492:	f000 f8d1 	bl	8001638 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8001496:	f000 f8a5 	bl	80015e4 <MX_USART1_UART_Init>

    osKernelInitialize();
 800149a:	f002 f8c1 	bl	8003620 <osKernelInitialize>

    PLC_Init();
 800149e:	f000 f971 	bl	8001784 <PLC_Init>

    BaseType_t notifyTaskHandle = xTaskCreate(
 80014a2:	2300      	movs	r3, #0
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2303      	movs	r3, #3
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b0:	490e      	ldr	r1, [pc, #56]	@ (80014ec <main+0x6c>)
 80014b2:	480f      	ldr	r0, [pc, #60]	@ (80014f0 <main+0x70>)
 80014b4:	f002 ff72 	bl	800439c <xTaskCreate>
 80014b8:	6078      	str	r0, [r7, #4]
        1024 * 1,
        NULL,
        3,
        NULL
    );
    BaseType_t plcOprateTaskHandle = xTaskCreate(
 80014ba:	2300      	movs	r3, #0
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	2302      	movs	r3, #2
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c8:	490a      	ldr	r1, [pc, #40]	@ (80014f4 <main+0x74>)
 80014ca:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <main+0x78>)
 80014cc:	f002 ff66 	bl	800439c <xTaskCreate>
 80014d0:	6038      	str	r0, [r7, #0]
        NULL,
        2,
        NULL
    );

    if (notifyTaskHandle != pdPASS || plcOprateTaskHandle != pdPASS)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <main+0x5e>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d001      	beq.n	80014e2 <main+0x62>
    {
        Error_Handler();
 80014de:	f000 f965 	bl	80017ac <Error_Handler>
    }

    /* Start scheduler */
    vTaskStartScheduler();
 80014e2:	f003 f8d7 	bl	8004694 <vTaskStartScheduler>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    while (1) {}
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <main+0x66>
 80014ea:	bf00      	nop
 80014ec:	08008e0c 	.word	0x08008e0c
 80014f0:	08001201 	.word	0x08001201
 80014f4:	08008e1c 	.word	0x08008e1c
 80014f8:	08000fb5 	.word	0x08000fb5

080014fc <SystemClock_Config>:
}

void SystemClock_Config(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	@ 0x50
 8001500:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2234      	movs	r2, #52	@ 0x34
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f005 fb24 	bl	8006b58 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <SystemClock_Config+0xe0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a2c      	ldr	r2, [pc, #176]	@ (80015dc <SystemClock_Config+0xe0>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <SystemClock_Config+0xe0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <SystemClock_Config+0xe4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a26      	ldr	r2, [pc, #152]	@ (80015e0 <SystemClock_Config+0xe4>)
 8001546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <SystemClock_Config+0xe4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001558:	2301      	movs	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001560:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001562:	2302      	movs	r3, #2
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 800156c:	2308      	movs	r3, #8
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 360;
 8001570:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001574:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001576:	2302      	movs	r3, #2
 8001578:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 800157a:	2302      	movs	r3, #2
 800157c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800157e:	2302      	movs	r3, #2
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(& RCC_OscInitStruct) != HAL_OK) {
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4618      	mov	r0, r3
 8001588:	f001 f9a0 	bl	80028cc <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9a>
        Error_Handler();
 8001592:	f000 f90b 	bl	80017ac <Error_Handler>
    }

    if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001596:	f000 fdff 	bl	8002198 <HAL_PWREx_EnableOverDrive>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0xa8>
        Error_Handler();
 80015a0:	f000 f904 	bl	80017ac <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015a4:	230f      	movs	r3, #15
 80015a6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a8:	2302      	movs	r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015b4:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ba:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(& RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	2105      	movs	r1, #5
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fe38 	bl	8002238 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xd6>
        Error_Handler();
 80015ce:	f000 f8ed 	bl	80017ac <Error_Handler>
    }
}
 80015d2:	bf00      	nop
 80015d4:	3750      	adds	r7, #80	@ 0x50
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <MX_USART1_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(& huart1) != HAL_OK) {
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_USART1_UART_Init+0x4c>)
 800161c:	f001 fbf4 	bl	8002e08 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8001626:	f000 f8c1 	bl	80017ac <Error_Handler>
    }
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003a0 	.word	0x200003a0
 8001634:	40011000 	.word	0x40011000

08001638 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(& huart2) != HAL_OK) {
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f001 fbca 	bl	8002e08 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
        Error_Handler();
 800167a:	f000 f897 	bl	80017ac <Error_Handler>
    }
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200003e8 	.word	0x200003e8
 8001688:	40004400 	.word	0x40004400

0800168c <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a33      	ldr	r2, [pc, #204]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a25      	ldr	r2, [pc, #148]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <MX_GPIO_Init+0xec>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <MX_GPIO_Init+0xec>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <MX_GPIO_Init+0xec>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	21e0      	movs	r1, #224	@ 0xe0
 8001716:	4819      	ldr	r0, [pc, #100]	@ (800177c <MX_GPIO_Init+0xf0>)
 8001718:	f000 fd24 	bl	8002164 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B2_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800171c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001722:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, & GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4813      	ldr	r0, [pc, #76]	@ (8001780 <MX_GPIO_Init+0xf4>)
 8001734:	f000 fb6a 	bl	8001e0c <HAL_GPIO_Init>

    /*Configure GPIO pin : B2_Pin Stop */
    GPIO_InitStruct.Pin = B2_Pin;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800173c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001742:	2301      	movs	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B2_GPIO_Port, & GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480c      	ldr	r0, [pc, #48]	@ (8001780 <MX_GPIO_Init+0xf4>)
 800174e:	f000 fb5d 	bl	8001e0c <HAL_GPIO_Init>

    /*Configure GPIO pins : LD2_Pin PA6 PA7 */
    GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 8001752:	23e0      	movs	r3, #224	@ 0xe0
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, & GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_GPIO_Init+0xf0>)
 800176a:	f000 fb4f 	bl	8001e0c <HAL_GPIO_Init>
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020800 	.word	0x40020800

08001784 <PLC_Init>:

static void PLC_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    xQueuePLC = xQueueCreate(10, sizeof(PLC_DataFrame_t));
 8001788:	2200      	movs	r2, #0
 800178a:	2108      	movs	r1, #8
 800178c:	200a      	movs	r0, #10
 800178e:	f002 f956 	bl	8003a3e <xQueueGenericCreate>
 8001792:	4603      	mov	r3, r0
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <PLC_Init+0x24>)
 8001796:	6013      	str	r3, [r2, #0]

    if (xQueuePLC == NULL) {
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <PLC_Init+0x24>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <PLC_Init+0x20>
        Error_Handler();
 80017a0:	f000 f804 	bl	80017ac <Error_Handler>
    }
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200002a0 	.word	0x200002a0

080017ac <Error_Handler>:

void Error_Handler(void) {
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <Error_Handler+0x8>

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_MspInit+0x54>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	4a11      	ldr	r2, [pc, #68]	@ (800180c <HAL_MspInit+0x54>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_MspInit+0x54>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_MspInit+0x54>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_MspInit+0x54>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_MspInit+0x54>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	210f      	movs	r1, #15
 80017fa:	f06f 0001 	mvn.w	r0, #1
 80017fe:	f000 fadc 	bl	8001dba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	@ 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a32      	ldr	r2, [pc, #200]	@ (80018f8 <HAL_UART_MspInit+0xe8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12d      	bne.n	800188e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <HAL_UART_MspInit+0xec>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <HAL_UART_MspInit+0xec>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_UART_MspInit+0xec>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <HAL_UART_MspInit+0xec>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a29      	ldr	r2, [pc, #164]	@ (80018fc <HAL_UART_MspInit+0xec>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <HAL_UART_MspInit+0xec>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800186a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800187c:	2307      	movs	r3, #7
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	481e      	ldr	r0, [pc, #120]	@ (8001900 <HAL_UART_MspInit+0xf0>)
 8001888:	f000 fac0 	bl	8001e0c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800188c:	e030      	b.n	80018f0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <HAL_UART_MspInit+0xf4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d12b      	bne.n	80018f0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_UART_MspInit+0xec>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_UART_MspInit+0xec>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_UART_MspInit+0xec>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <HAL_UART_MspInit+0xec>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	4a0f      	ldr	r2, [pc, #60]	@ (80018fc <HAL_UART_MspInit+0xec>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c4:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <HAL_UART_MspInit+0xec>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d0:	230c      	movs	r3, #12
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e0:	2307      	movs	r3, #7
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <HAL_UART_MspInit+0xf0>)
 80018ec:	f000 fa8e 	bl	8001e0c <HAL_GPIO_Init>
}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	@ 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40004400 	.word	0x40004400

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <UsageFault_Handler+0x4>

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001942:	f000 f95d 	bl	8001c00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001946:	f003 faf3 	bl	8004f30 <xTaskGetSchedulerState>
 800194a:	4603      	mov	r3, r0
 800194c:	2b01      	cmp	r3, #1
 800194e:	d001      	beq.n	8001954 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001950:	f004 f8ea 	bl	8005b28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	f005 f943 	bl	8006bfc <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199a:	bf00      	nop
 800199c:	e7fd      	b.n	800199a <_exit+0x12>

0800199e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e00a      	b.n	80019c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b0:	f3af 8000 	nop.w
 80019b4:	4601      	mov	r1, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	60ba      	str	r2, [r7, #8]
 80019bc:	b2ca      	uxtb	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf0      	blt.n	80019b0 <_read+0x12>
  }

  return len;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e009      	b.n	80019fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf1      	blt.n	80019ea <_write+0x12>
  }
  return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_close>:

int _close(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a38:	605a      	str	r2, [r3, #4]
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_isatty>:

int _isatty(int file)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f005 f8a8 	bl	8006bfc <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20020000 	.word	0x20020000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	20000430 	.word	0x20000430
 8001ae0:	20004ed8 	.word	0x20004ed8

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b0c:	f7ff ffea 	bl	8001ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f005 f867 	bl	8006c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fca1 	bl	8001480 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b4c:	080091e4 	.word	0x080091e4
  ldr r2, =_sbss
 8001b50:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b54:	20004ed4 	.word	0x20004ed4

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f90d 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fe12 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f917 	bl	8001df2 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f8ed 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000008 	.word	0x20000008

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000434 	.word	0x20000434

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000434 	.word	0x20000434

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	@ (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff47 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff5c 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffb0 	bl	8001d60 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e165      	b.n	80020f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e28:	2201      	movs	r2, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8154 	bne.w	80020ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d005      	beq.n	8001e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d130      	bne.n	8001ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 0201 	and.w	r2, r3, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d017      	beq.n	8001efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d123      	bne.n	8001f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	08da      	lsrs	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3208      	adds	r2, #8
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80ae 	beq.w	80020ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b5d      	ldr	r3, [pc, #372]	@ (800210c <HAL_GPIO_Init+0x300>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800210c <HAL_GPIO_Init+0x300>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800210c <HAL_GPIO_Init+0x300>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fae:	4a58      	ldr	r2, [pc, #352]	@ (8002110 <HAL_GPIO_Init+0x304>)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002114 <HAL_GPIO_Init+0x308>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d025      	beq.n	8002026 <HAL_GPIO_Init+0x21a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8002118 <HAL_GPIO_Init+0x30c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01f      	beq.n	8002022 <HAL_GPIO_Init+0x216>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800211c <HAL_GPIO_Init+0x310>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x212>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	@ (8002120 <HAL_GPIO_Init+0x314>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8002124 <HAL_GPIO_Init+0x318>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x20a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8002128 <HAL_GPIO_Init+0x31c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x206>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a49      	ldr	r2, [pc, #292]	@ (800212c <HAL_GPIO_Init+0x320>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x202>
 800200a:	2306      	movs	r3, #6
 800200c:	e00c      	b.n	8002028 <HAL_GPIO_Init+0x21c>
 800200e:	2307      	movs	r3, #7
 8002010:	e00a      	b.n	8002028 <HAL_GPIO_Init+0x21c>
 8002012:	2305      	movs	r3, #5
 8002014:	e008      	b.n	8002028 <HAL_GPIO_Init+0x21c>
 8002016:	2304      	movs	r3, #4
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x21c>
 800201a:	2303      	movs	r3, #3
 800201c:	e004      	b.n	8002028 <HAL_GPIO_Init+0x21c>
 800201e:	2302      	movs	r3, #2
 8002020:	e002      	b.n	8002028 <HAL_GPIO_Init+0x21c>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x21c>
 8002026:	2300      	movs	r3, #0
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4093      	lsls	r3, r2
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002038:	4935      	ldr	r1, [pc, #212]	@ (8002110 <HAL_GPIO_Init+0x304>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002046:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <HAL_GPIO_Init+0x324>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206a:	4a31      	ldr	r2, [pc, #196]	@ (8002130 <HAL_GPIO_Init+0x324>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002070:	4b2f      	ldr	r3, [pc, #188]	@ (8002130 <HAL_GPIO_Init+0x324>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002094:	4a26      	ldr	r2, [pc, #152]	@ (8002130 <HAL_GPIO_Init+0x324>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209a:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <HAL_GPIO_Init+0x324>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <HAL_GPIO_Init+0x324>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <HAL_GPIO_Init+0x324>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e8:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <HAL_GPIO_Init+0x324>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f67f ae96 	bls.w	8001e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3724      	adds	r7, #36	@ 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40013800 	.word	0x40013800
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40021000 	.word	0x40021000
 8002128:	40021400 	.word	0x40021400
 800212c:	40021800 	.word	0x40021800
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e001      	b.n	8002156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_PWREx_EnableOverDrive+0x90>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002228 <HAL_PWREx_EnableOverDrive+0x90>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_PWREx_EnableOverDrive+0x90>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021be:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_PWREx_EnableOverDrive+0x94>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff fd30 	bl	8001c28 <HAL_GetTick>
 80021c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ca:	e009      	b.n	80021e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021cc:	f7ff fd2c 	bl	8001c28 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021da:	d901      	bls.n	80021e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e01f      	b.n	8002220 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <HAL_PWREx_EnableOverDrive+0x98>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ec:	d1ee      	bne.n	80021cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f4:	f7ff fd18 	bl	8001c28 <HAL_GetTick>
 80021f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021fa:	e009      	b.n	8002210 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021fc:	f7ff fd14 	bl	8001c28 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800220a:	d901      	bls.n	8002210 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e007      	b.n	8002220 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <HAL_PWREx_EnableOverDrive+0x98>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800221c:	d1ee      	bne.n	80021fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	420e0040 	.word	0x420e0040
 8002230:	40007000 	.word	0x40007000
 8002234:	420e0044 	.word	0x420e0044

08002238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0cc      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d90c      	bls.n	8002274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b63      	ldr	r3, [pc, #396]	@ (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0b8      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800228c:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a58      	ldr	r2, [pc, #352]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002296:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a4:	4b53      	ldr	r3, [pc, #332]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a52      	ldr	r2, [pc, #328]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b0:	4b50      	ldr	r3, [pc, #320]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	494d      	ldr	r1, [pc, #308]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d044      	beq.n	8002358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b47      	ldr	r3, [pc, #284]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d119      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	4b3f      	ldr	r3, [pc, #252]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b3b      	ldr	r3, [pc, #236]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e067      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b37      	ldr	r3, [pc, #220]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4934      	ldr	r1, [pc, #208]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002328:	f7ff fc7e 	bl	8001c28 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7ff fc7a 	bl	8001c28 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e04f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b2b      	ldr	r3, [pc, #172]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002358:	4b25      	ldr	r3, [pc, #148]	@ (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d20c      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e032      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4916      	ldr	r1, [pc, #88]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	490e      	ldr	r1, [pc, #56]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023be:	f000 f855 	bl	800246c <HAL_RCC_GetSysClockFreq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	490a      	ldr	r1, [pc, #40]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023da:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fbde 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08008e44 	.word	0x08008e44
 80023fc:	20000004 	.word	0x20000004
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_RCC_GetHCLKFreq+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002420:	f7ff fff0 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0a9b      	lsrs	r3, r3, #10
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4903      	ldr	r1, [pc, #12]	@ (8002440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	08008e54 	.word	0x08008e54

08002444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002448:	f7ff ffdc 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0b5b      	lsrs	r3, r3, #13
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4903      	ldr	r1, [pc, #12]	@ (8002468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	08008e54 	.word	0x08008e54

0800246c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b0ae      	sub	sp, #184	@ 0xb8
 8002472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002492:	4bcb      	ldr	r3, [pc, #812]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b0c      	cmp	r3, #12
 800249c:	f200 8206 	bhi.w	80028ac <HAL_RCC_GetSysClockFreq+0x440>
 80024a0:	a201      	add	r2, pc, #4	@ (adr r2, 80024a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	080028ad 	.word	0x080028ad
 80024b0:	080028ad 	.word	0x080028ad
 80024b4:	080028ad 	.word	0x080028ad
 80024b8:	080024e5 	.word	0x080024e5
 80024bc:	080028ad 	.word	0x080028ad
 80024c0:	080028ad 	.word	0x080028ad
 80024c4:	080028ad 	.word	0x080028ad
 80024c8:	080024ed 	.word	0x080024ed
 80024cc:	080028ad 	.word	0x080028ad
 80024d0:	080028ad 	.word	0x080028ad
 80024d4:	080028ad 	.word	0x080028ad
 80024d8:	080026dd 	.word	0x080026dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4bb9      	ldr	r3, [pc, #740]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80024de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024e2:	e1e7      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4bb8      	ldr	r3, [pc, #736]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80024e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024ea:	e1e3      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ec:	4bb4      	ldr	r3, [pc, #720]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f8:	4bb1      	ldr	r3, [pc, #708]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d071      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002504:	4bae      	ldr	r3, [pc, #696]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002510:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800252a:	4622      	mov	r2, r4
 800252c:	462b      	mov	r3, r5
 800252e:	f04f 0000 	mov.w	r0, #0
 8002532:	f04f 0100 	mov.w	r1, #0
 8002536:	0159      	lsls	r1, r3, #5
 8002538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253c:	0150      	lsls	r0, r2, #5
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4621      	mov	r1, r4
 8002544:	1a51      	subs	r1, r2, r1
 8002546:	6439      	str	r1, [r7, #64]	@ 0x40
 8002548:	4629      	mov	r1, r5
 800254a:	eb63 0301 	sbc.w	r3, r3, r1
 800254e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800255c:	4649      	mov	r1, r9
 800255e:	018b      	lsls	r3, r1, #6
 8002560:	4641      	mov	r1, r8
 8002562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002566:	4641      	mov	r1, r8
 8002568:	018a      	lsls	r2, r1, #6
 800256a:	4641      	mov	r1, r8
 800256c:	1a51      	subs	r1, r2, r1
 800256e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002570:	4649      	mov	r1, r9
 8002572:	eb63 0301 	sbc.w	r3, r3, r1
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002584:	4649      	mov	r1, r9
 8002586:	00cb      	lsls	r3, r1, #3
 8002588:	4641      	mov	r1, r8
 800258a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258e:	4641      	mov	r1, r8
 8002590:	00ca      	lsls	r2, r1, #3
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	4603      	mov	r3, r0
 8002598:	4622      	mov	r2, r4
 800259a:	189b      	adds	r3, r3, r2
 800259c:	633b      	str	r3, [r7, #48]	@ 0x30
 800259e:	462b      	mov	r3, r5
 80025a0:	460a      	mov	r2, r1
 80025a2:	eb42 0303 	adc.w	r3, r2, r3
 80025a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025b4:	4629      	mov	r1, r5
 80025b6:	024b      	lsls	r3, r1, #9
 80025b8:	4621      	mov	r1, r4
 80025ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025be:	4621      	mov	r1, r4
 80025c0:	024a      	lsls	r2, r1, #9
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80025d8:	f7fe fb56 	bl	8000c88 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025e6:	e067      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e8:	4b75      	ldr	r3, [pc, #468]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	2200      	movs	r2, #0
 80025f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80025f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002602:	2300      	movs	r3, #0
 8002604:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002606:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800260a:	4622      	mov	r2, r4
 800260c:	462b      	mov	r3, r5
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	0159      	lsls	r1, r3, #5
 8002618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800261c:	0150      	lsls	r0, r2, #5
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4621      	mov	r1, r4
 8002624:	1a51      	subs	r1, r2, r1
 8002626:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002628:	4629      	mov	r1, r5
 800262a:	eb63 0301 	sbc.w	r3, r3, r1
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800263c:	4649      	mov	r1, r9
 800263e:	018b      	lsls	r3, r1, #6
 8002640:	4641      	mov	r1, r8
 8002642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002646:	4641      	mov	r1, r8
 8002648:	018a      	lsls	r2, r1, #6
 800264a:	4641      	mov	r1, r8
 800264c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002650:	4649      	mov	r1, r9
 8002652:	eb63 0b01 	sbc.w	fp, r3, r1
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002662:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800266a:	4692      	mov	sl, r2
 800266c:	469b      	mov	fp, r3
 800266e:	4623      	mov	r3, r4
 8002670:	eb1a 0303 	adds.w	r3, sl, r3
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	462b      	mov	r3, r5
 8002678:	eb4b 0303 	adc.w	r3, fp, r3
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800268a:	4629      	mov	r1, r5
 800268c:	028b      	lsls	r3, r1, #10
 800268e:	4621      	mov	r1, r4
 8002690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002694:	4621      	mov	r1, r4
 8002696:	028a      	lsls	r2, r1, #10
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026a0:	2200      	movs	r2, #0
 80026a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80026a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80026a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80026aa:	f7fe faed 	bl	8000c88 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4613      	mov	r3, r2
 80026b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026b8:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80026ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026da:	e0eb      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026dc:	4b38      	ldr	r3, [pc, #224]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e8:	4b35      	ldr	r3, [pc, #212]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d06b      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f4:	4b32      	ldr	r3, [pc, #200]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	2200      	movs	r2, #0
 80026fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002706:	663b      	str	r3, [r7, #96]	@ 0x60
 8002708:	2300      	movs	r3, #0
 800270a:	667b      	str	r3, [r7, #100]	@ 0x64
 800270c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002710:	4622      	mov	r2, r4
 8002712:	462b      	mov	r3, r5
 8002714:	f04f 0000 	mov.w	r0, #0
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	0159      	lsls	r1, r3, #5
 800271e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002722:	0150      	lsls	r0, r2, #5
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4621      	mov	r1, r4
 800272a:	1a51      	subs	r1, r2, r1
 800272c:	61b9      	str	r1, [r7, #24]
 800272e:	4629      	mov	r1, r5
 8002730:	eb63 0301 	sbc.w	r3, r3, r1
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002742:	4659      	mov	r1, fp
 8002744:	018b      	lsls	r3, r1, #6
 8002746:	4651      	mov	r1, sl
 8002748:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800274c:	4651      	mov	r1, sl
 800274e:	018a      	lsls	r2, r1, #6
 8002750:	4651      	mov	r1, sl
 8002752:	ebb2 0801 	subs.w	r8, r2, r1
 8002756:	4659      	mov	r1, fp
 8002758:	eb63 0901 	sbc.w	r9, r3, r1
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800276c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002770:	4690      	mov	r8, r2
 8002772:	4699      	mov	r9, r3
 8002774:	4623      	mov	r3, r4
 8002776:	eb18 0303 	adds.w	r3, r8, r3
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	462b      	mov	r3, r5
 800277e:	eb49 0303 	adc.w	r3, r9, r3
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002790:	4629      	mov	r1, r5
 8002792:	024b      	lsls	r3, r1, #9
 8002794:	4621      	mov	r1, r4
 8002796:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800279a:	4621      	mov	r1, r4
 800279c:	024a      	lsls	r2, r1, #9
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027a6:	2200      	movs	r2, #0
 80027a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027b0:	f7fe fa6a 	bl	8000c88 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4613      	mov	r3, r2
 80027ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027be:	e065      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x420>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027cc:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	2200      	movs	r2, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	4611      	mov	r1, r2
 80027d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80027de:	2300      	movs	r3, #0
 80027e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80027e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80027e6:	4642      	mov	r2, r8
 80027e8:	464b      	mov	r3, r9
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	0159      	lsls	r1, r3, #5
 80027f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f8:	0150      	lsls	r0, r2, #5
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4641      	mov	r1, r8
 8002800:	1a51      	subs	r1, r2, r1
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	4649      	mov	r1, r9
 8002806:	eb63 0301 	sbc.w	r3, r3, r1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002818:	4659      	mov	r1, fp
 800281a:	018b      	lsls	r3, r1, #6
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002822:	4651      	mov	r1, sl
 8002824:	018a      	lsls	r2, r1, #6
 8002826:	4651      	mov	r1, sl
 8002828:	1a54      	subs	r4, r2, r1
 800282a:	4659      	mov	r1, fp
 800282c:	eb63 0501 	sbc.w	r5, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	00eb      	lsls	r3, r5, #3
 800283a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283e:	00e2      	lsls	r2, r4, #3
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	4643      	mov	r3, r8
 8002846:	18e3      	adds	r3, r4, r3
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	464b      	mov	r3, r9
 800284c:	eb45 0303 	adc.w	r3, r5, r3
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800285e:	4629      	mov	r1, r5
 8002860:	028b      	lsls	r3, r1, #10
 8002862:	4621      	mov	r1, r4
 8002864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002868:	4621      	mov	r1, r4
 800286a:	028a      	lsls	r2, r1, #10
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002874:	2200      	movs	r2, #0
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002878:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800287a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800287e:	f7fe fa03 	bl	8000c88 <__aeabi_uldivmod>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4613      	mov	r3, r2
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800288c:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	0f1b      	lsrs	r3, r3, #28
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800289a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800289e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028aa:	e003      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	37b8      	adds	r7, #184	@ 0xb8
 80028bc:	46bd      	mov	sp, r7
 80028be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	00f42400 	.word	0x00f42400

080028cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e28d      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8083 	beq.w	80029f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028ec:	4b94      	ldr	r3, [pc, #592]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d019      	beq.n	800292c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028f8:	4b91      	ldr	r3, [pc, #580]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002900:	2b08      	cmp	r3, #8
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002904:	4b8e      	ldr	r3, [pc, #568]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002910:	d00c      	beq.n	800292c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b8b      	ldr	r3, [pc, #556]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d112      	bne.n	8002944 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b88      	ldr	r3, [pc, #544]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800292a:	d10b      	bne.n	8002944 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	4b84      	ldr	r3, [pc, #528]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d05b      	beq.n	80029f0 <HAL_RCC_OscConfig+0x124>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d157      	bne.n	80029f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e25a      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x90>
 800294e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7b      	ldr	r2, [pc, #492]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e01d      	b.n	8002998 <HAL_RCC_OscConfig+0xcc>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0xb4>
 8002966:	4b76      	ldr	r3, [pc, #472]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a75      	ldr	r2, [pc, #468]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b73      	ldr	r3, [pc, #460]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a72      	ldr	r2, [pc, #456]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0xcc>
 8002980:	4b6f      	ldr	r3, [pc, #444]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a6e      	ldr	r2, [pc, #440]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6b      	ldr	r2, [pc, #428]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff f942 	bl	8001c28 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff f93e 	bl	8001c28 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e21f      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b61      	ldr	r3, [pc, #388]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0xdc>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff f92e 	bl	8001c28 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff f92a 	bl	8001c28 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	@ 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e20b      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	4b57      	ldr	r3, [pc, #348]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x104>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06f      	beq.n	8002ade <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029fe:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d017      	beq.n	8002a3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a16:	4b4a      	ldr	r3, [pc, #296]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d11c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2e:	4b44      	ldr	r3, [pc, #272]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d116      	bne.n	8002a68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	4b41      	ldr	r3, [pc, #260]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x186>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e1d3      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4937      	ldr	r1, [pc, #220]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	e03a      	b.n	8002ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x278>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7ff f8d7 	bl	8001c28 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7ff f8d3 	bl	8001c28 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1b4      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b28      	ldr	r3, [pc, #160]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4925      	ldr	r1, [pc, #148]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_RCC_OscConfig+0x278>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7ff f8b6 	bl	8001c28 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7ff f8b2 	bl	8001c28 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e193      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d036      	beq.n	8002b58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <HAL_RCC_OscConfig+0x27c>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7ff f896 	bl	8001c28 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b00:	f7ff f892 	bl	8001c28 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e173      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x234>
 8002b1e:	e01b      	b.n	8002b58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_OscConfig+0x27c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7ff f87f 	bl	8001c28 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	e00e      	b.n	8002b4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7ff f87b 	bl	8001c28 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d907      	bls.n	8002b4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e15c      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	42470000 	.word	0x42470000
 8002b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ea      	bne.n	8002b2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8097 	beq.w	8002c94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6a:	4b83      	ldr	r3, [pc, #524]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b86:	4b7c      	ldr	r3, [pc, #496]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b79      	ldr	r3, [pc, #484]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b76      	ldr	r3, [pc, #472]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a75      	ldr	r2, [pc, #468]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7ff f83b 	bl	8001c28 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7ff f837 	bl	8001c28 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e118      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <HAL_RCC_OscConfig+0x4b0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x31e>
 8002bdc:	4b66      	ldr	r3, [pc, #408]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be0:	4a65      	ldr	r2, [pc, #404]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be8:	e01c      	b.n	8002c24 <HAL_RCC_OscConfig+0x358>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x340>
 8002bf2:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	4a60      	ldr	r2, [pc, #384]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	4a5d      	ldr	r2, [pc, #372]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0x358>
 8002c0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	4a59      	ldr	r2, [pc, #356]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c18:	4b57      	ldr	r3, [pc, #348]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1c:	4a56      	ldr	r2, [pc, #344]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c1e:	f023 0304 	bic.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d015      	beq.n	8002c58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fffc 	bl	8001c28 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe fff8 	bl	8001c28 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0d7      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ee      	beq.n	8002c34 <HAL_RCC_OscConfig+0x368>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe ffe6 	bl	8001c28 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe ffe2 	bl	8001c28 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0c1      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c76:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ee      	bne.n	8002c60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80ad 	beq.w	8002df8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c9e:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d060      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d145      	bne.n	8002d3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b33      	ldr	r3, [pc, #204]	@ (8002d80 <HAL_RCC_OscConfig+0x4b4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe ffb6 	bl	8001c28 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe ffb2 	bl	8001c28 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e093      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	071b      	lsls	r3, r3, #28
 8002d0a:	491b      	ldr	r1, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x4b4>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fe ff87 	bl	8001c28 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe ff83 	bl	8001c28 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e064      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x452>
 8002d3c:	e05c      	b.n	8002df8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <HAL_RCC_OscConfig+0x4b4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe ff70 	bl	8001c28 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe ff6c 	bl	8001c28 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04d      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x480>
 8002d6a:	e045      	b.n	8002df8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e040      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <HAL_RCC_OscConfig+0x538>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d030      	beq.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d129      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d122      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d119      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d10f      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800

08002e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e042      	b.n	8002ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fcee 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	@ 0x24
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f973 	bl	8003138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	@ 0x28
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d175      	bne.n	8002fb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_UART_Transmit+0x2c>
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e06e      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2221      	movs	r2, #33	@ 0x21
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fe9f 	bl	8001c28 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f00:	d108      	bne.n	8002f14 <HAL_UART_Transmit+0x6c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	e003      	b.n	8002f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f1c:	e02e      	b.n	8002f7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2180      	movs	r1, #128	@ 0x80
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f848 	bl	8002fbe <UART_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e03a      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	e007      	b.n	8002f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1cb      	bne.n	8002f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2140      	movs	r1, #64	@ 0x40
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f814 	bl	8002fbe <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e006      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fce:	e03b      	b.n	8003048 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d037      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7fe fe26 	bl	8001c28 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	6a3a      	ldr	r2, [r7, #32]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e03a      	b.n	8003068 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b80      	cmp	r3, #128	@ 0x80
 8003004:	d020      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b40      	cmp	r3, #64	@ 0x40
 800300a:	d01d      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b08      	cmp	r3, #8
 8003018:	d116      	bne.n	8003048 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f81d 	bl	8003070 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2208      	movs	r2, #8
 800303a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e00f      	b.n	8003068 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4013      	ands	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	429a      	cmp	r2, r3
 8003064:	d0b4      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b095      	sub	sp, #84	@ 0x54
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800308e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003098:	643a      	str	r2, [r7, #64]	@ 0x40
 800309a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800309e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3314      	adds	r3, #20
 80030b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d119      	bne.n	800311c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f023 0310 	bic.w	r3, r3, #16
 80030fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003108:	61ba      	str	r2, [r7, #24]
 800310a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6979      	ldr	r1, [r7, #20]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	613b      	str	r3, [r7, #16]
   return(result);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e5      	bne.n	80030e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800312a:	bf00      	nop
 800312c:	3754      	adds	r7, #84	@ 0x54
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b0c0      	sub	sp, #256	@ 0x100
 800313e:	af00      	add	r7, sp, #0
 8003140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	ea40 0301 	orr.w	r3, r0, r1
 8003160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	431a      	orrs	r2, r3
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003190:	f021 010c 	bic.w	r1, r1, #12
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800319e:	430b      	orrs	r3, r1
 80031a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	6999      	ldr	r1, [r3, #24]
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	ea40 0301 	orr.w	r3, r0, r1
 80031be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003404 <UART_SetConfig+0x2cc>)
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d005      	beq.n	80031d8 <UART_SetConfig+0xa0>
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003408 <UART_SetConfig+0x2d0>)
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d104      	bne.n	80031e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031d8:	f7ff f934 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 80031dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031e0:	e003      	b.n	80031ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031e2:	f7ff f91b 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 80031e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f4:	f040 810c 	bne.w	8003410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031fc:	2200      	movs	r2, #0
 80031fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	1891      	adds	r1, r2, r2
 8003210:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003212:	415b      	adcs	r3, r3
 8003214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800321a:	4621      	mov	r1, r4
 800321c:	eb12 0801 	adds.w	r8, r2, r1
 8003220:	4629      	mov	r1, r5
 8003222:	eb43 0901 	adc.w	r9, r3, r1
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323a:	4690      	mov	r8, r2
 800323c:	4699      	mov	r9, r3
 800323e:	4623      	mov	r3, r4
 8003240:	eb18 0303 	adds.w	r3, r8, r3
 8003244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003248:	462b      	mov	r3, r5
 800324a:	eb49 0303 	adc.w	r3, r9, r3
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800325e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003266:	460b      	mov	r3, r1
 8003268:	18db      	adds	r3, r3, r3
 800326a:	653b      	str	r3, [r7, #80]	@ 0x50
 800326c:	4613      	mov	r3, r2
 800326e:	eb42 0303 	adc.w	r3, r2, r3
 8003272:	657b      	str	r3, [r7, #84]	@ 0x54
 8003274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800327c:	f7fd fd04 	bl	8000c88 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b61      	ldr	r3, [pc, #388]	@ (800340c <UART_SetConfig+0x2d4>)
 8003286:	fba3 2302 	umull	r2, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	011c      	lsls	r4, r3, #4
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800329c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032a0:	4642      	mov	r2, r8
 80032a2:	464b      	mov	r3, r9
 80032a4:	1891      	adds	r1, r2, r2
 80032a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032a8:	415b      	adcs	r3, r3
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032b0:	4641      	mov	r1, r8
 80032b2:	eb12 0a01 	adds.w	sl, r2, r1
 80032b6:	4649      	mov	r1, r9
 80032b8:	eb43 0b01 	adc.w	fp, r3, r1
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d0:	4692      	mov	sl, r2
 80032d2:	469b      	mov	fp, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	eb1a 0303 	adds.w	r3, sl, r3
 80032da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032de:	464b      	mov	r3, r9
 80032e0:	eb4b 0303 	adc.w	r3, fp, r3
 80032e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032fc:	460b      	mov	r3, r1
 80032fe:	18db      	adds	r3, r3, r3
 8003300:	643b      	str	r3, [r7, #64]	@ 0x40
 8003302:	4613      	mov	r3, r2
 8003304:	eb42 0303 	adc.w	r3, r2, r3
 8003308:	647b      	str	r3, [r7, #68]	@ 0x44
 800330a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800330e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003312:	f7fd fcb9 	bl	8000c88 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4611      	mov	r1, r2
 800331c:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <UART_SetConfig+0x2d4>)
 800331e:	fba3 2301 	umull	r2, r3, r3, r1
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2264      	movs	r2, #100	@ 0x64
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	1acb      	subs	r3, r1, r3
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003332:	4b36      	ldr	r3, [pc, #216]	@ (800340c <UART_SetConfig+0x2d4>)
 8003334:	fba3 2302 	umull	r2, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003340:	441c      	add	r4, r3
 8003342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800334c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	1891      	adds	r1, r2, r2
 800335a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800335c:	415b      	adcs	r3, r3
 800335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003364:	4641      	mov	r1, r8
 8003366:	1851      	adds	r1, r2, r1
 8003368:	6339      	str	r1, [r7, #48]	@ 0x30
 800336a:	4649      	mov	r1, r9
 800336c:	414b      	adcs	r3, r1
 800336e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800337c:	4659      	mov	r1, fp
 800337e:	00cb      	lsls	r3, r1, #3
 8003380:	4651      	mov	r1, sl
 8003382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003386:	4651      	mov	r1, sl
 8003388:	00ca      	lsls	r2, r1, #3
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	4603      	mov	r3, r0
 8003390:	4642      	mov	r2, r8
 8003392:	189b      	adds	r3, r3, r2
 8003394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003398:	464b      	mov	r3, r9
 800339a:	460a      	mov	r2, r1
 800339c:	eb42 0303 	adc.w	r3, r2, r3
 80033a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033b8:	460b      	mov	r3, r1
 80033ba:	18db      	adds	r3, r3, r3
 80033bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033be:	4613      	mov	r3, r2
 80033c0:	eb42 0303 	adc.w	r3, r2, r3
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ce:	f7fd fc5b 	bl	8000c88 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <UART_SetConfig+0x2d4>)
 80033d8:	fba3 1302 	umull	r1, r3, r3, r2
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	2164      	movs	r1, #100	@ 0x64
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	3332      	adds	r3, #50	@ 0x32
 80033ea:	4a08      	ldr	r2, [pc, #32]	@ (800340c <UART_SetConfig+0x2d4>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	f003 0207 	and.w	r2, r3, #7
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4422      	add	r2, r4
 80033fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003400:	e106      	b.n	8003610 <UART_SetConfig+0x4d8>
 8003402:	bf00      	nop
 8003404:	40011000 	.word	0x40011000
 8003408:	40011400 	.word	0x40011400
 800340c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003414:	2200      	movs	r2, #0
 8003416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800341a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800341e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003422:	4642      	mov	r2, r8
 8003424:	464b      	mov	r3, r9
 8003426:	1891      	adds	r1, r2, r2
 8003428:	6239      	str	r1, [r7, #32]
 800342a:	415b      	adcs	r3, r3
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
 800342e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003432:	4641      	mov	r1, r8
 8003434:	1854      	adds	r4, r2, r1
 8003436:	4649      	mov	r1, r9
 8003438:	eb43 0501 	adc.w	r5, r3, r1
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	00eb      	lsls	r3, r5, #3
 8003446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344a:	00e2      	lsls	r2, r4, #3
 800344c:	4614      	mov	r4, r2
 800344e:	461d      	mov	r5, r3
 8003450:	4643      	mov	r3, r8
 8003452:	18e3      	adds	r3, r4, r3
 8003454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003458:	464b      	mov	r3, r9
 800345a:	eb45 0303 	adc.w	r3, r5, r3
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800346e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800347e:	4629      	mov	r1, r5
 8003480:	008b      	lsls	r3, r1, #2
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003488:	4621      	mov	r1, r4
 800348a:	008a      	lsls	r2, r1, #2
 800348c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003490:	f7fd fbfa 	bl	8000c88 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4b60      	ldr	r3, [pc, #384]	@ (800361c <UART_SetConfig+0x4e4>)
 800349a:	fba3 2302 	umull	r2, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	011c      	lsls	r4, r3, #4
 80034a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034b4:	4642      	mov	r2, r8
 80034b6:	464b      	mov	r3, r9
 80034b8:	1891      	adds	r1, r2, r2
 80034ba:	61b9      	str	r1, [r7, #24]
 80034bc:	415b      	adcs	r3, r3
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c4:	4641      	mov	r1, r8
 80034c6:	1851      	adds	r1, r2, r1
 80034c8:	6139      	str	r1, [r7, #16]
 80034ca:	4649      	mov	r1, r9
 80034cc:	414b      	adcs	r3, r1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034dc:	4659      	mov	r1, fp
 80034de:	00cb      	lsls	r3, r1, #3
 80034e0:	4651      	mov	r1, sl
 80034e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e6:	4651      	mov	r1, sl
 80034e8:	00ca      	lsls	r2, r1, #3
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	4642      	mov	r2, r8
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034f8:	464b      	mov	r3, r9
 80034fa:	460a      	mov	r2, r1
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800350e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800351c:	4649      	mov	r1, r9
 800351e:	008b      	lsls	r3, r1, #2
 8003520:	4641      	mov	r1, r8
 8003522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003526:	4641      	mov	r1, r8
 8003528:	008a      	lsls	r2, r1, #2
 800352a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800352e:	f7fd fbab 	bl	8000c88 <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4611      	mov	r1, r2
 8003538:	4b38      	ldr	r3, [pc, #224]	@ (800361c <UART_SetConfig+0x4e4>)
 800353a:	fba3 2301 	umull	r2, r3, r3, r1
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2264      	movs	r2, #100	@ 0x64
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	1acb      	subs	r3, r1, r3
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	3332      	adds	r3, #50	@ 0x32
 800354c:	4a33      	ldr	r2, [pc, #204]	@ (800361c <UART_SetConfig+0x4e4>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003558:	441c      	add	r4, r3
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	673b      	str	r3, [r7, #112]	@ 0x70
 8003562:	677a      	str	r2, [r7, #116]	@ 0x74
 8003564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003568:	4642      	mov	r2, r8
 800356a:	464b      	mov	r3, r9
 800356c:	1891      	adds	r1, r2, r2
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	415b      	adcs	r3, r3
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003578:	4641      	mov	r1, r8
 800357a:	1851      	adds	r1, r2, r1
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	4649      	mov	r1, r9
 8003580:	414b      	adcs	r3, r1
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003590:	4659      	mov	r1, fp
 8003592:	00cb      	lsls	r3, r1, #3
 8003594:	4651      	mov	r1, sl
 8003596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359a:	4651      	mov	r1, sl
 800359c:	00ca      	lsls	r2, r1, #3
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	4642      	mov	r2, r8
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035aa:	464b      	mov	r3, r9
 80035ac:	460a      	mov	r2, r1
 80035ae:	eb42 0303 	adc.w	r3, r2, r3
 80035b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80035be:	667a      	str	r2, [r7, #100]	@ 0x64
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035cc:	4649      	mov	r1, r9
 80035ce:	008b      	lsls	r3, r1, #2
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d6:	4641      	mov	r1, r8
 80035d8:	008a      	lsls	r2, r1, #2
 80035da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035de:	f7fd fb53 	bl	8000c88 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <UART_SetConfig+0x4e4>)
 80035e8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	2164      	movs	r1, #100	@ 0x64
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	3332      	adds	r3, #50	@ 0x32
 80035fa:	4a08      	ldr	r2, [pc, #32]	@ (800361c <UART_SetConfig+0x4e4>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	f003 020f 	and.w	r2, r3, #15
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4422      	add	r2, r4
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003616:	46bd      	mov	sp, r7
 8003618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361c:	51eb851f 	.word	0x51eb851f

08003620 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003626:	f3ef 8305 	mrs	r3, IPSR
 800362a:	603b      	str	r3, [r7, #0]
  return(result);
 800362c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003632:	f06f 0305 	mvn.w	r3, #5
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	e00c      	b.n	8003654 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <osKernelInitialize+0x44>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <osKernelInitialize+0x44>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	e002      	b.n	8003654 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003654:	687b      	ldr	r3, [r7, #4]
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000438 	.word	0x20000438

08003668 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003670:	f3ef 8305 	mrs	r3, IPSR
 8003674:	60bb      	str	r3, [r7, #8]
  return(result);
 8003676:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <osDelay+0x1c>
    stat = osErrorISR;
 800367c:	f06f 0305 	mvn.w	r3, #5
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e007      	b.n	8003694 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <osDelay+0x2c>
      vTaskDelay(ticks);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 ffca 	bl	8004628 <vTaskDelay>
    }
  }

  return (stat);
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <vApplicationGetIdleTaskMemory+0x2c>)
 80036b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4a06      	ldr	r2, [pc, #24]	@ (80036d0 <vApplicationGetIdleTaskMemory+0x30>)
 80036b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2280      	movs	r2, #128	@ 0x80
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	2000043c 	.word	0x2000043c
 80036d0:	20000498 	.word	0x20000498

080036d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a07      	ldr	r2, [pc, #28]	@ (8003700 <vApplicationGetTimerTaskMemory+0x2c>)
 80036e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4a06      	ldr	r2, [pc, #24]	@ (8003704 <vApplicationGetTimerTaskMemory+0x30>)
 80036ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036f2:	601a      	str	r2, [r3, #0]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000698 	.word	0x20000698
 8003704:	200006f4 	.word	0x200006f4

08003708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f103 0208 	add.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f103 0208 	add.w	r2, r3, #8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f103 0208 	add.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d103      	bne.n	80037ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e00c      	b.n	80037e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3308      	adds	r3, #8
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e002      	b.n	80037d8 <vListInsert+0x2e>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d2f6      	bcs.n	80037d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	601a      	str	r2, [r3, #0]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6892      	ldr	r2, [r2, #8]
 8003832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	d103      	bne.n	8003850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	1e5a      	subs	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800389c:	f002 f8b4 	bl	8005a08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	3b01      	subs	r3, #1
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	441a      	add	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	22ff      	movs	r2, #255	@ 0xff
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	22ff      	movs	r2, #255	@ 0xff
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d114      	bne.n	800391c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01a      	beq.n	8003930 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3310      	adds	r3, #16
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 f956 	bl	8004bb0 <xTaskRemoveFromEventList>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d012      	beq.n	8003930 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <xQueueGenericReset+0xd0>)
 800390c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	e009      	b.n	8003930 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3310      	adds	r3, #16
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fef1 	bl	8003708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3324      	adds	r3, #36	@ 0x24
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff feec 	bl	8003708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003930:	f002 f89c 	bl	8005a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003934:	2301      	movs	r3, #1
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	@ 0x38
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <xQueueGenericCreateStatic+0x56>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <xQueueGenericCreateStatic+0x5a>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <xQueueGenericCreateStatic+0x5c>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	623b      	str	r3, [r7, #32]
}
 80039b6:	bf00      	nop
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <xQueueGenericCreateStatic+0x84>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <xQueueGenericCreateStatic+0x88>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <xQueueGenericCreateStatic+0x8a>
 80039cc:	2300      	movs	r3, #0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	61fb      	str	r3, [r7, #28]
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	e7fd      	b.n	80039e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039ea:	2350      	movs	r3, #80	@ 0x50
 80039ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b50      	cmp	r3, #80	@ 0x50
 80039f2:	d00b      	beq.n	8003a0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61bb      	str	r3, [r7, #24]
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00d      	beq.n	8003a34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f840 	bl	8003ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3730      	adds	r7, #48	@ 0x30
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08a      	sub	sp, #40	@ 0x28
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	613b      	str	r3, [r7, #16]
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3350      	adds	r3, #80	@ 0x50
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 f8e7 	bl	8005c4c <pvPortMalloc>
 8003a7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d011      	beq.n	8003aaa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	3350      	adds	r3, #80	@ 0x50
 8003a8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a98:	79fa      	ldrb	r2, [r7, #7]
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f805 	bl	8003ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e002      	b.n	8003ad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	69b8      	ldr	r0, [r7, #24]
 8003ae6:	f7ff fec3 	bl	8003870 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	@ 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericSend+0x34>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSend+0x42>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSend+0x46>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSend+0x48>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <xQueueGenericSend+0x64>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <xQueueGenericSend+0x72>
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <xQueueGenericSend+0x76>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericSend+0x78>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <xQueueGenericSend+0x94>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b90:	f001 f9ce 	bl	8004f30 <xTaskGetSchedulerState>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <xQueueGenericSend+0xa4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <xQueueGenericSend+0xa8>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <xQueueGenericSend+0xaa>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	61fb      	str	r3, [r7, #28]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bc2:	f001 ff21 	bl	8005a08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <xQueueGenericSend+0xdc>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d129      	bne.n	8003c2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bde:	f000 fa0f 	bl	8004000 <prvCopyDataToQueue>
 8003be2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	3324      	adds	r3, #36	@ 0x24
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 ffdd 	bl	8004bb0 <xTaskRemoveFromEventList>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	e00a      	b.n	8003c24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c14:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c24:	f001 ff22 	bl	8005a6c <vPortExitCritical>
				return pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e063      	b.n	8003cf4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c32:	f001 ff1b 	bl	8005a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e05c      	b.n	8003cf4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f817 	bl	8004c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c4e:	f001 ff0d 	bl	8005a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c52:	f000 fd87 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c56:	f001 fed7 	bl	8005a08 <vPortEnterCritical>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d103      	bne.n	8003c70 <xQueueGenericSend+0x174>
 8003c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSend+0x18a>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c86:	f001 fef1 	bl	8005a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c8a:	1d3a      	adds	r2, r7, #4
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f806 	bl	8004ca4 <xTaskCheckForTimeOut>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d124      	bne.n	8003ce8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ca0:	f000 faa6 	bl	80041f0 <prvIsQueueFull>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	3310      	adds	r3, #16
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 ff2a 	bl	8004b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cba:	f000 fa31 	bl	8004120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cbe:	f000 fd5f 	bl	8004780 <xTaskResumeAll>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f af7c 	bne.w	8003bc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003cca:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	e772      	b.n	8003bc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cde:	f000 fa1f 	bl	8004120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ce2:	f000 fd4d 	bl	8004780 <xTaskResumeAll>
 8003ce6:	e76c      	b.n	8003bc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cea:	f000 fa19 	bl	8004120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cee:	f000 fd47 	bl	8004780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3738      	adds	r7, #56	@ 0x38
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b090      	sub	sp, #64	@ 0x40
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <xQueueGenericSendFromISR+0x3e>
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <xQueueGenericSendFromISR+0x42>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <xQueueGenericSendFromISR+0x44>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	e7fd      	b.n	8003d5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d103      	bne.n	8003d6e <xQueueGenericSendFromISR+0x6e>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <xQueueGenericSendFromISR+0x72>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <xQueueGenericSendFromISR+0x74>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	623b      	str	r3, [r7, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d90:	f001 ff1a 	bl	8005bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d94:	f3ef 8211 	mrs	r2, BASEPRI
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	61fa      	str	r2, [r7, #28]
 8003daa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <xQueueGenericSendFromISR+0xc2>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d12f      	bne.n	8003e22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003dd8:	f000 f912 	bl	8004000 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ddc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d112      	bne.n	8003e0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	3324      	adds	r3, #36	@ 0x24
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fedc 	bl	8004bb0 <xTaskRemoveFromEventList>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00e      	beq.n	8003e1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e007      	b.n	8003e1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e10:	3301      	adds	r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	b25a      	sxtb	r2, r3
 8003e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003e20:	e001      	b.n	8003e26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3740      	adds	r7, #64	@ 0x40
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08c      	sub	sp, #48	@ 0x30
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <xQueueReceive+0x32>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	623b      	str	r3, [r7, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <xQueueReceive+0x40>
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <xQueueReceive+0x44>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <xQueueReceive+0x46>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <xQueueReceive+0x62>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61fb      	str	r3, [r7, #28]
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e9e:	f001 f847 	bl	8004f30 <xTaskGetSchedulerState>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <xQueueReceive+0x72>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueReceive+0x76>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueReceive+0x78>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <xQueueReceive+0x94>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61bb      	str	r3, [r7, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ed0:	f001 fd9a 	bl	8005a08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01f      	beq.n	8003f20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee4:	f000 f8f6 	bl	80040d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00f      	beq.n	8003f18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	3310      	adds	r3, #16
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fe57 	bl	8004bb0 <xTaskRemoveFromEventList>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f08:	4b3c      	ldr	r3, [pc, #240]	@ (8003ffc <xQueueReceive+0x1c0>)
 8003f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f18:	f001 fda8 	bl	8005a6c <vPortExitCritical>
				return pdPASS;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e069      	b.n	8003ff4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f26:	f001 fda1 	bl	8005a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e062      	b.n	8003ff4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fe9d 	bl	8004c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f42:	f001 fd93 	bl	8005a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f46:	f000 fc0d 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f4a:	f001 fd5d 	bl	8005a08 <vPortEnterCritical>
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f54:	b25b      	sxtb	r3, r3
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d103      	bne.n	8003f64 <xQueueReceive+0x128>
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d103      	bne.n	8003f7a <xQueueReceive+0x13e>
 8003f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f7a:	f001 fd77 	bl	8005a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f7e:	1d3a      	adds	r2, r7, #4
 8003f80:	f107 0310 	add.w	r3, r7, #16
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fe8c 	bl	8004ca4 <xTaskCheckForTimeOut>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d123      	bne.n	8003fda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f94:	f000 f916 	bl	80041c4 <prvIsQueueEmpty>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d017      	beq.n	8003fce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	3324      	adds	r3, #36	@ 0x24
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fdb0 	bl	8004b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fae:	f000 f8b7 	bl	8004120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fb2:	f000 fbe5 	bl	8004780 <xTaskResumeAll>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d189      	bne.n	8003ed0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <xQueueReceive+0x1c0>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	e780      	b.n	8003ed0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fd0:	f000 f8a6 	bl	8004120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fd4:	f000 fbd4 	bl	8004780 <xTaskResumeAll>
 8003fd8:	e77a      	b.n	8003ed0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fdc:	f000 f8a0 	bl	8004120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fe0:	f000 fbce 	bl	8004780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fe6:	f000 f8ed 	bl	80041c4 <prvIsQueueEmpty>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f43f af6f 	beq.w	8003ed0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ff2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3730      	adds	r7, #48	@ 0x30
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10d      	bne.n	800403a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d14d      	bne.n	80040c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 ff9e 	bl	8004f6c <xTaskPriorityDisinherit>
 8004030:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e043      	b.n	80040c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d119      	bne.n	8004074 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6858      	ldr	r0, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	461a      	mov	r2, r3
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	f002 fe03 	bl	8006c56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	441a      	add	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d32b      	bcc.n	80040c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	e026      	b.n	80040c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68d8      	ldr	r0, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	461a      	mov	r2, r3
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	f002 fde9 	bl	8006c56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	425b      	negs	r3, r3
 800408e:	441a      	add	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d207      	bcs.n	80040b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	425b      	negs	r3, r3
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d105      	bne.n	80040c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	3b01      	subs	r3, #1
 80040c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040ca:	697b      	ldr	r3, [r7, #20]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d303      	bcc.n	8004108 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68d9      	ldr	r1, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	461a      	mov	r2, r3
 8004112:	6838      	ldr	r0, [r7, #0]
 8004114:	f002 fd9f 	bl	8006c56 <memcpy>
	}
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004128:	f001 fc6e 	bl	8005a08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004132:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004134:	e011      	b.n	800415a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d012      	beq.n	8004164 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3324      	adds	r3, #36	@ 0x24
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fd34 	bl	8004bb0 <xTaskRemoveFromEventList>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800414e:	f000 fe0d 	bl	8004d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	3b01      	subs	r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800415a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	dce9      	bgt.n	8004136 <prvUnlockQueue+0x16>
 8004162:	e000      	b.n	8004166 <prvUnlockQueue+0x46>
					break;
 8004164:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	22ff      	movs	r2, #255	@ 0xff
 800416a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800416e:	f001 fc7d 	bl	8005a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004172:	f001 fc49 	bl	8005a08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800417c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800417e:	e011      	b.n	80041a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3310      	adds	r3, #16
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd0f 	bl	8004bb0 <xTaskRemoveFromEventList>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004198:	f000 fde8 	bl	8004d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800419c:	7bbb      	ldrb	r3, [r7, #14]
 800419e:	3b01      	subs	r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dce9      	bgt.n	8004180 <prvUnlockQueue+0x60>
 80041ac:	e000      	b.n	80041b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041b8:	f001 fc58 	bl	8005a6c <vPortExitCritical>
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041cc:	f001 fc1c 	bl	8005a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e001      	b.n	80041e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041e2:	f001 fc43 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041f8:	f001 fc06 	bl	8005a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004204:	429a      	cmp	r2, r3
 8004206:	d102      	bne.n	800420e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e001      	b.n	8004212 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004212:	f001 fc2b 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e014      	b.n	800425a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004230:	4a0f      	ldr	r2, [pc, #60]	@ (8004270 <vQueueAddToRegistry+0x50>)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800423c:	490c      	ldr	r1, [pc, #48]	@ (8004270 <vQueueAddToRegistry+0x50>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004246:	4a0a      	ldr	r2, [pc, #40]	@ (8004270 <vQueueAddToRegistry+0x50>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004252:	e006      	b.n	8004262 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b07      	cmp	r3, #7
 800425e:	d9e7      	bls.n	8004230 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000af4 	.word	0x20000af4

08004274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004284:	f001 fbc0 	bl	8005a08 <vPortEnterCritical>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800428e:	b25b      	sxtb	r3, r3
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d103      	bne.n	800429e <vQueueWaitForMessageRestricted+0x2a>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042a4:	b25b      	sxtb	r3, r3
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d103      	bne.n	80042b4 <vQueueWaitForMessageRestricted+0x40>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b4:	f001 fbda 	bl	8005a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3324      	adds	r3, #36	@ 0x24
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fc45 	bl	8004b58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f7ff ff26 	bl	8004120 <prvUnlockQueue>
	}
 80042d4:	bf00      	nop
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08e      	sub	sp, #56	@ 0x38
 80042e0:	af04      	add	r7, sp, #16
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <xTaskCreateStatic+0x2c>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	623b      	str	r3, [r7, #32]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <xTaskCreateStatic+0x4a>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	61fb      	str	r3, [r7, #28]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004326:	235c      	movs	r3, #92	@ 0x5c
 8004328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b5c      	cmp	r3, #92	@ 0x5c
 800432e:	d00b      	beq.n	8004348 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	61bb      	str	r3, [r7, #24]
}
 8004342:	bf00      	nop
 8004344:	bf00      	nop
 8004346:	e7fd      	b.n	8004344 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004348:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01e      	beq.n	800438e <xTaskCreateStatic+0xb2>
 8004350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01b      	beq.n	800438e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004368:	2300      	movs	r3, #0
 800436a:	9303      	str	r3, [sp, #12]
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	9302      	str	r3, [sp, #8]
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f850 	bl	8004426 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004386:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004388:	f000 f8de 	bl	8004548 <prvAddNewTaskToReadyList>
 800438c:	e001      	b.n	8004392 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004392:	697b      	ldr	r3, [r7, #20]
	}
 8004394:	4618      	mov	r0, r3
 8004396:	3728      	adds	r7, #40	@ 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	@ 0x30
 80043a0:	af04      	add	r7, sp, #16
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 fc4b 	bl	8005c4c <pvPortMalloc>
 80043b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043be:	205c      	movs	r0, #92	@ 0x5c
 80043c0:	f001 fc44 	bl	8005c4c <pvPortMalloc>
 80043c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80043d2:	e005      	b.n	80043e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043d4:	6978      	ldr	r0, [r7, #20]
 80043d6:	f001 fd07 	bl	8005de8 <vPortFree>
 80043da:	e001      	b.n	80043e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d017      	beq.n	8004416 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	2300      	movs	r3, #0
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	9302      	str	r3, [sp, #8]
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f80e 	bl	8004426 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800440a:	69f8      	ldr	r0, [r7, #28]
 800440c:	f000 f89c 	bl	8004548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004410:	2301      	movs	r3, #1
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e002      	b.n	800441c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800441c:	69bb      	ldr	r3, [r7, #24]
	}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b088      	sub	sp, #32
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	461a      	mov	r2, r3
 800443e:	21a5      	movs	r1, #165	@ 0xa5
 8004440:	f002 fb8a 	bl	8006b58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800444e:	3b01      	subs	r3, #1
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f023 0307 	bic.w	r3, r3, #7
 800445c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	617b      	str	r3, [r7, #20]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01f      	beq.n	80044c6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e012      	b.n	80044b2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	7819      	ldrb	r1, [r3, #0]
 8004494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	3334      	adds	r3, #52	@ 0x34
 800449c:	460a      	mov	r2, r1
 800449e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d006      	beq.n	80044ba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d9e9      	bls.n	800448c <prvInitialiseNewTask+0x66>
 80044b8:	e000      	b.n	80044bc <prvInitialiseNewTask+0x96>
			{
				break;
 80044ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044c4:	e003      	b.n	80044ce <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	2b37      	cmp	r3, #55	@ 0x37
 80044d2:	d901      	bls.n	80044d8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044d4:	2337      	movs	r3, #55	@ 0x37
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044e2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	3304      	adds	r3, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f92a 	bl	8003748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	3318      	adds	r3, #24
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f925 	bl	8003748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	2200      	movs	r2, #0
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	69b8      	ldr	r0, [r7, #24]
 8004528:	f001 f93e 	bl	80057a8 <pxPortInitialiseStack>
 800452c:	4602      	mov	r2, r0
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800453e:	bf00      	nop
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004550:	f001 fa5a 	bl	8005a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004554:	4b2d      	ldr	r3, [pc, #180]	@ (800460c <prvAddNewTaskToReadyList+0xc4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <prvAddNewTaskToReadyList+0xc4>)
 800455c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800455e:	4b2c      	ldr	r3, [pc, #176]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004566:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800456c:	4b27      	ldr	r3, [pc, #156]	@ (800460c <prvAddNewTaskToReadyList+0xc4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d110      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004574:	f000 fc1e 	bl	8004db4 <prvInitialiseTaskLists>
 8004578:	e00d      	b.n	8004596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800457a:	4b26      	ldr	r3, [pc, #152]	@ (8004614 <prvAddNewTaskToReadyList+0xcc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004582:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d802      	bhi.n	8004596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004590:	4a1f      	ldr	r2, [pc, #124]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <prvAddNewTaskToReadyList+0xd0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3301      	adds	r3, #1
 800459c:	4a1e      	ldr	r2, [pc, #120]	@ (8004618 <prvAddNewTaskToReadyList+0xd0>)
 800459e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <prvAddNewTaskToReadyList+0xd0>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ac:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <prvAddNewTaskToReadyList+0xd4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d903      	bls.n	80045bc <prvAddNewTaskToReadyList+0x74>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	4a18      	ldr	r2, [pc, #96]	@ (800461c <prvAddNewTaskToReadyList+0xd4>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4a15      	ldr	r2, [pc, #84]	@ (8004620 <prvAddNewTaskToReadyList+0xd8>)
 80045ca:	441a      	add	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7ff f8c5 	bl	8003762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045d8:	f001 fa48 	bl	8005a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <prvAddNewTaskToReadyList+0xcc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00e      	beq.n	8004602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d207      	bcs.n	8004602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <prvAddNewTaskToReadyList+0xdc>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20001008 	.word	0x20001008
 8004610:	20000b34 	.word	0x20000b34
 8004614:	20001014 	.word	0x20001014
 8004618:	20001024 	.word	0x20001024
 800461c:	20001010 	.word	0x20001010
 8004620:	20000b38 	.word	0x20000b38
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800463a:	4b14      	ldr	r3, [pc, #80]	@ (800468c <vTaskDelay+0x64>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <vTaskDelay+0x32>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60bb      	str	r3, [r7, #8]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800465a:	f000 f883 	bl	8004764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800465e:	2100      	movs	r1, #0
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fcf3 	bl	800504c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004666:	f000 f88b 	bl	8004780 <xTaskResumeAll>
 800466a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004672:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <vTaskDelay+0x68>)
 8004674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20001030 	.word	0x20001030
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	@ 0x28
 8004698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046a2:	463a      	mov	r2, r7
 80046a4:	1d39      	adds	r1, r7, #4
 80046a6:	f107 0308 	add.w	r3, r7, #8
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fff8 	bl	80036a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	9202      	str	r2, [sp, #8]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	460a      	mov	r2, r1
 80046c2:	4922      	ldr	r1, [pc, #136]	@ (800474c <vTaskStartScheduler+0xb8>)
 80046c4:	4822      	ldr	r0, [pc, #136]	@ (8004750 <vTaskStartScheduler+0xbc>)
 80046c6:	f7ff fe09 	bl	80042dc <xTaskCreateStatic>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a21      	ldr	r2, [pc, #132]	@ (8004754 <vTaskStartScheduler+0xc0>)
 80046ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d0:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <vTaskStartScheduler+0xc0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e001      	b.n	80046e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d102      	bne.n	80046ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046e8:	f000 fd04 	bl	80050f4 <xTimerCreateTimerTask>
 80046ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d116      	bne.n	8004722 <vTaskStartScheduler+0x8e>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	613b      	str	r3, [r7, #16]
}
 8004706:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004708:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <vTaskStartScheduler+0xc4>)
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004710:	4b12      	ldr	r3, [pc, #72]	@ (800475c <vTaskStartScheduler+0xc8>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004716:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <vTaskStartScheduler+0xcc>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800471c:	f001 f8d0 	bl	80058c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004720:	e00f      	b.n	8004742 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d10b      	bne.n	8004742 <vTaskStartScheduler+0xae>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60fb      	str	r3, [r7, #12]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <vTaskStartScheduler+0xaa>
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	08008e2c 	.word	0x08008e2c
 8004750:	08004d85 	.word	0x08004d85
 8004754:	2000102c 	.word	0x2000102c
 8004758:	20001028 	.word	0x20001028
 800475c:	20001014 	.word	0x20001014
 8004760:	2000100c 	.word	0x2000100c

08004764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <vTaskSuspendAll+0x18>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a03      	ldr	r2, [pc, #12]	@ (800477c <vTaskSuspendAll+0x18>)
 8004770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20001030 	.word	0x20001030

08004780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800478e:	4b42      	ldr	r3, [pc, #264]	@ (8004898 <xTaskResumeAll+0x118>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <xTaskResumeAll+0x2e>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	603b      	str	r3, [r7, #0]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ae:	f001 f92b 	bl	8005a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047b2:	4b39      	ldr	r3, [pc, #228]	@ (8004898 <xTaskResumeAll+0x118>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4a37      	ldr	r2, [pc, #220]	@ (8004898 <xTaskResumeAll+0x118>)
 80047ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047bc:	4b36      	ldr	r3, [pc, #216]	@ (8004898 <xTaskResumeAll+0x118>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d162      	bne.n	800488a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047c4:	4b35      	ldr	r3, [pc, #212]	@ (800489c <xTaskResumeAll+0x11c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d05e      	beq.n	800488a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047cc:	e02f      	b.n	800482e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ce:	4b34      	ldr	r3, [pc, #208]	@ (80048a0 <xTaskResumeAll+0x120>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3318      	adds	r3, #24
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f81e 	bl	800381c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff f819 	bl	800381c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	4b2d      	ldr	r3, [pc, #180]	@ (80048a4 <xTaskResumeAll+0x124>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d903      	bls.n	80047fe <xTaskResumeAll+0x7e>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <xTaskResumeAll+0x124>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <xTaskResumeAll+0x128>)
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe ffa4 	bl	8003762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481e:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <xTaskResumeAll+0x12c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004828:	4b21      	ldr	r3, [pc, #132]	@ (80048b0 <xTaskResumeAll+0x130>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482e:	4b1c      	ldr	r3, [pc, #112]	@ (80048a0 <xTaskResumeAll+0x120>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1cb      	bne.n	80047ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800483c:	f000 fb58 	bl	8004ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004840:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <xTaskResumeAll+0x134>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800484c:	f000 f846 	bl	80048dc <xTaskIncrementTick>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004856:	4b16      	ldr	r3, [pc, #88]	@ (80048b0 <xTaskResumeAll+0x130>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f1      	bne.n	800484c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004868:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <xTaskResumeAll+0x134>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800486e:	4b10      	ldr	r3, [pc, #64]	@ (80048b0 <xTaskResumeAll+0x130>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800487a:	4b0f      	ldr	r3, [pc, #60]	@ (80048b8 <xTaskResumeAll+0x138>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800488a:	f001 f8ef 	bl	8005a6c <vPortExitCritical>

	return xAlreadyYielded;
 800488e:	68bb      	ldr	r3, [r7, #8]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20001030 	.word	0x20001030
 800489c:	20001008 	.word	0x20001008
 80048a0:	20000fc8 	.word	0x20000fc8
 80048a4:	20001010 	.word	0x20001010
 80048a8:	20000b38 	.word	0x20000b38
 80048ac:	20000b34 	.word	0x20000b34
 80048b0:	2000101c 	.word	0x2000101c
 80048b4:	20001018 	.word	0x20001018
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048c2:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <xTaskGetTickCount+0x1c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048c8:	687b      	ldr	r3, [r7, #4]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	2000100c 	.word	0x2000100c

080048dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <xTaskIncrementTick+0x148>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 8090 	bne.w	8004a10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004a28 <xTaskIncrementTick+0x14c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004a28 <xTaskIncrementTick+0x14c>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d121      	bne.n	8004948 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004904:	4b49      	ldr	r3, [pc, #292]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <xTaskIncrementTick+0x4a>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	603b      	str	r3, [r7, #0]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <xTaskIncrementTick+0x46>
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	4b40      	ldr	r3, [pc, #256]	@ (8004a30 <xTaskIncrementTick+0x154>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3e      	ldr	r2, [pc, #248]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4a3e      	ldr	r2, [pc, #248]	@ (8004a30 <xTaskIncrementTick+0x154>)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <xTaskIncrementTick+0x158>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	4a3c      	ldr	r2, [pc, #240]	@ (8004a34 <xTaskIncrementTick+0x158>)
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	f000 fad4 	bl	8004ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004948:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <xTaskIncrementTick+0x15c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d349      	bcc.n	80049e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004952:	4b36      	ldr	r3, [pc, #216]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495c:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <xTaskIncrementTick+0x15c>)
 800495e:	f04f 32ff 	mov.w	r2, #4294967295
 8004962:	601a      	str	r2, [r3, #0]
					break;
 8004964:	e03f      	b.n	80049e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004966:	4b31      	ldr	r3, [pc, #196]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d203      	bcs.n	8004986 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800497e:	4a2e      	ldr	r2, [pc, #184]	@ (8004a38 <xTaskIncrementTick+0x15c>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004984:	e02f      	b.n	80049e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe ff46 	bl	800381c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3318      	adds	r3, #24
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe ff3d 	bl	800381c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a6:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <xTaskIncrementTick+0x160>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d903      	bls.n	80049b6 <xTaskIncrementTick+0xda>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	4a22      	ldr	r2, [pc, #136]	@ (8004a3c <xTaskIncrementTick+0x160>)
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <xTaskIncrementTick+0x164>)
 80049c4:	441a      	add	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fe fec8 	bl	8003762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a44 <xTaskIncrementTick+0x168>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3b8      	bcc.n	8004952 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e4:	e7b5      	b.n	8004952 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049e6:	4b17      	ldr	r3, [pc, #92]	@ (8004a44 <xTaskIncrementTick+0x168>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ec:	4914      	ldr	r1, [pc, #80]	@ (8004a40 <xTaskIncrementTick+0x164>)
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d901      	bls.n	8004a02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a02:	4b11      	ldr	r3, [pc, #68]	@ (8004a48 <xTaskIncrementTick+0x16c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	e004      	b.n	8004a1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a10:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <xTaskIncrementTick+0x170>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	4a0d      	ldr	r2, [pc, #52]	@ (8004a4c <xTaskIncrementTick+0x170>)
 8004a18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a1a:	697b      	ldr	r3, [r7, #20]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20001030 	.word	0x20001030
 8004a28:	2000100c 	.word	0x2000100c
 8004a2c:	20000fc0 	.word	0x20000fc0
 8004a30:	20000fc4 	.word	0x20000fc4
 8004a34:	20001020 	.word	0x20001020
 8004a38:	20001028 	.word	0x20001028
 8004a3c:	20001010 	.word	0x20001010
 8004a40:	20000b38 	.word	0x20000b38
 8004a44:	20000b34 	.word	0x20000b34
 8004a48:	2000101c 	.word	0x2000101c
 8004a4c:	20001018 	.word	0x20001018

08004a50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a56:	4b28      	ldr	r3, [pc, #160]	@ (8004af8 <vTaskSwitchContext+0xa8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a5e:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <vTaskSwitchContext+0xac>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a64:	e042      	b.n	8004aec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <vTaskSwitchContext+0xac>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6c:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <vTaskSwitchContext+0xb0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e011      	b.n	8004a98 <vTaskSwitchContext+0x48>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <vTaskSwitchContext+0x42>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <vTaskSwitchContext+0x3e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	491a      	ldr	r1, [pc, #104]	@ (8004b04 <vTaskSwitchContext+0xb4>)
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0e3      	beq.n	8004a74 <vTaskSwitchContext+0x24>
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4a13      	ldr	r2, [pc, #76]	@ (8004b04 <vTaskSwitchContext+0xb4>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3308      	adds	r3, #8
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d104      	bne.n	8004adc <vTaskSwitchContext+0x8c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	@ (8004b08 <vTaskSwitchContext+0xb8>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4a06      	ldr	r2, [pc, #24]	@ (8004b00 <vTaskSwitchContext+0xb0>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20001030 	.word	0x20001030
 8004afc:	2000101c 	.word	0x2000101c
 8004b00:	20001010 	.word	0x20001010
 8004b04:	20000b38 	.word	0x20000b38
 8004b08:	20000b34 	.word	0x20000b34

08004b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10b      	bne.n	8004b34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fb      	str	r3, [r7, #12]
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b34:	4b07      	ldr	r3, [pc, #28]	@ (8004b54 <vTaskPlaceOnEventList+0x48>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3318      	adds	r3, #24
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fe fe34 	bl	80037aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b42:	2101      	movs	r1, #1
 8004b44:	6838      	ldr	r0, [r7, #0]
 8004b46:	f000 fa81 	bl	800504c <prvAddCurrentTaskToDelayedList>
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000b34 	.word	0x20000b34

08004b58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	617b      	str	r3, [r7, #20]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b82:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <vTaskPlaceOnEventListRestricted+0x54>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3318      	adds	r3, #24
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7fe fde9 	bl	8003762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	68b8      	ldr	r0, [r7, #8]
 8004ba0:	f000 fa54 	bl	800504c <prvAddCurrentTaskToDelayedList>
	}
 8004ba4:	bf00      	nop
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000b34 	.word	0x20000b34

08004bb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	e7fd      	b.n	8004bda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3318      	adds	r3, #24
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe fe1a 	bl	800381c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <xTaskRemoveFromEventList+0xb0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d11d      	bne.n	8004c2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fe11 	bl	800381c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfe:	4b19      	ldr	r3, [pc, #100]	@ (8004c64 <xTaskRemoveFromEventList+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d903      	bls.n	8004c0e <xTaskRemoveFromEventList+0x5e>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	4a16      	ldr	r2, [pc, #88]	@ (8004c64 <xTaskRemoveFromEventList+0xb4>)
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4a13      	ldr	r2, [pc, #76]	@ (8004c68 <xTaskRemoveFromEventList+0xb8>)
 8004c1c:	441a      	add	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7fe fd9c 	bl	8003762 <vListInsertEnd>
 8004c2a:	e005      	b.n	8004c38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3318      	adds	r3, #24
 8004c30:	4619      	mov	r1, r3
 8004c32:	480e      	ldr	r0, [pc, #56]	@ (8004c6c <xTaskRemoveFromEventList+0xbc>)
 8004c34:	f7fe fd95 	bl	8003762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c70 <xTaskRemoveFromEventList+0xc0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d905      	bls.n	8004c52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c46:	2301      	movs	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <xTaskRemoveFromEventList+0xc4>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e001      	b.n	8004c56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c56:	697b      	ldr	r3, [r7, #20]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20001030 	.word	0x20001030
 8004c64:	20001010 	.word	0x20001010
 8004c68:	20000b38 	.word	0x20000b38
 8004c6c:	20000fc8 	.word	0x20000fc8
 8004c70:	20000b34 	.word	0x20000b34
 8004c74:	2000101c 	.word	0x2000101c

08004c78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c80:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <vTaskInternalSetTimeOutState+0x24>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <vTaskInternalSetTimeOutState+0x28>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20001020 	.word	0x20001020
 8004ca0:	2000100c 	.word	0x2000100c

08004ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	613b      	str	r3, [r7, #16]
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60fb      	str	r3, [r7, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004cea:	f000 fe8d 	bl	8005a08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cee:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <xTaskCheckForTimeOut+0xc0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d102      	bne.n	8004d0e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e023      	b.n	8004d56 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b15      	ldr	r3, [pc, #84]	@ (8004d68 <xTaskCheckForTimeOut+0xc4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d007      	beq.n	8004d2a <xTaskCheckForTimeOut+0x86>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e015      	b.n	8004d56 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d20b      	bcs.n	8004d4c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad2      	subs	r2, r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff99 	bl	8004c78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e004      	b.n	8004d56 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d56:	f000 fe89 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	2000100c 	.word	0x2000100c
 8004d68:	20001020 	.word	0x20001020

08004d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d70:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <vTaskMissedYield+0x14>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	2000101c 	.word	0x2000101c

08004d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d8c:	f000 f852 	bl	8004e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <prvIdleTask+0x28>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d9f9      	bls.n	8004d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <prvIdleTask+0x2c>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004da8:	e7f0      	b.n	8004d8c <prvIdleTask+0x8>
 8004daa:	bf00      	nop
 8004dac:	20000b38 	.word	0x20000b38
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	e00c      	b.n	8004dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <prvInitialiseTaskLists+0x60>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fc9a 	bl	8003708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b37      	cmp	r3, #55	@ 0x37
 8004dde:	d9ef      	bls.n	8004dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004de0:	480d      	ldr	r0, [pc, #52]	@ (8004e18 <prvInitialiseTaskLists+0x64>)
 8004de2:	f7fe fc91 	bl	8003708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004de6:	480d      	ldr	r0, [pc, #52]	@ (8004e1c <prvInitialiseTaskLists+0x68>)
 8004de8:	f7fe fc8e 	bl	8003708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dec:	480c      	ldr	r0, [pc, #48]	@ (8004e20 <prvInitialiseTaskLists+0x6c>)
 8004dee:	f7fe fc8b 	bl	8003708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004df2:	480c      	ldr	r0, [pc, #48]	@ (8004e24 <prvInitialiseTaskLists+0x70>)
 8004df4:	f7fe fc88 	bl	8003708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004df8:	480b      	ldr	r0, [pc, #44]	@ (8004e28 <prvInitialiseTaskLists+0x74>)
 8004dfa:	f7fe fc85 	bl	8003708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <prvInitialiseTaskLists+0x78>)
 8004e00:	4a05      	ldr	r2, [pc, #20]	@ (8004e18 <prvInitialiseTaskLists+0x64>)
 8004e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <prvInitialiseTaskLists+0x7c>)
 8004e06:	4a05      	ldr	r2, [pc, #20]	@ (8004e1c <prvInitialiseTaskLists+0x68>)
 8004e08:	601a      	str	r2, [r3, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000b38 	.word	0x20000b38
 8004e18:	20000f98 	.word	0x20000f98
 8004e1c:	20000fac 	.word	0x20000fac
 8004e20:	20000fc8 	.word	0x20000fc8
 8004e24:	20000fdc 	.word	0x20000fdc
 8004e28:	20000ff4 	.word	0x20000ff4
 8004e2c:	20000fc0 	.word	0x20000fc0
 8004e30:	20000fc4 	.word	0x20000fc4

08004e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e3a:	e019      	b.n	8004e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e3c:	f000 fde4 	bl	8005a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e40:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <prvCheckTasksWaitingTermination+0x50>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fce5 	bl	800381c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <prvCheckTasksWaitingTermination+0x54>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	4a0b      	ldr	r2, [pc, #44]	@ (8004e88 <prvCheckTasksWaitingTermination+0x54>)
 8004e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e66:	f000 fe01 	bl	8005a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f810 	bl	8004e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e1      	bne.n	8004e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000fdc 	.word	0x20000fdc
 8004e88:	20001008 	.word	0x20001008
 8004e8c:	20000ff0 	.word	0x20000ff0

08004e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d108      	bne.n	8004eb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 ff9e 	bl	8005de8 <vPortFree>
				vPortFree( pxTCB );
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 ff9b 	bl	8005de8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eb2:	e019      	b.n	8004ee8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d103      	bne.n	8004ec6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 ff92 	bl	8005de8 <vPortFree>
	}
 8004ec4:	e010      	b.n	8004ee8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d00b      	beq.n	8004ee8 <prvDeleteTCB+0x58>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <prvDeleteTCB+0x54>
	}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <prvResetNextTaskUnblockTime+0x38>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <prvResetNextTaskUnblockTime+0x3c>)
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f08:	e008      	b.n	8004f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0a:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <prvResetNextTaskUnblockTime+0x38>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a04      	ldr	r2, [pc, #16]	@ (8004f2c <prvResetNextTaskUnblockTime+0x3c>)
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20000fc0 	.word	0x20000fc0
 8004f2c:	20001028 	.word	0x20001028

08004f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f36:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <xTaskGetSchedulerState+0x34>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e008      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f44:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <xTaskGetSchedulerState+0x38>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	e001      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f56:	687b      	ldr	r3, [r7, #4]
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20001014 	.word	0x20001014
 8004f68:	20001030 	.word	0x20001030

08004f6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d058      	beq.n	8005034 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f82:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <xTaskPriorityDisinherit+0xd4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d00b      	beq.n	8004fa4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d02c      	beq.n	8005034 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d128      	bne.n	8005034 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fc18 	bl	800381c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005004:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <xTaskPriorityDisinherit+0xd8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d903      	bls.n	8005014 <xTaskPriorityDisinherit+0xa8>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	4a0c      	ldr	r2, [pc, #48]	@ (8005044 <xTaskPriorityDisinherit+0xd8>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <xTaskPriorityDisinherit+0xdc>)
 8005022:	441a      	add	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe fb99 	bl	8003762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005034:	697b      	ldr	r3, [r7, #20]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000b34 	.word	0x20000b34
 8005044:	20001010 	.word	0x20001010
 8005048:	20000b38 	.word	0x20000b38

0800504c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005056:	4b21      	ldr	r3, [pc, #132]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800505c:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fbda 	bl	800381c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d10a      	bne.n	8005086 <prvAddCurrentTaskToDelayedList+0x3a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4819      	ldr	r0, [pc, #100]	@ (80050e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005080:	f7fe fb6f 	bl	8003762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005084:	e026      	b.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	429a      	cmp	r2, r3
 800509c:	d209      	bcs.n	80050b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fe fb7d 	bl	80037aa <vListInsert>
}
 80050b0:	e010      	b.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b2:	4b0e      	ldr	r3, [pc, #56]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7fe fb73 	bl	80037aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d202      	bcs.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	2000100c 	.word	0x2000100c
 80050e0:	20000b34 	.word	0x20000b34
 80050e4:	20000ff4 	.word	0x20000ff4
 80050e8:	20000fc4 	.word	0x20000fc4
 80050ec:	20000fc0 	.word	0x20000fc0
 80050f0:	20001028 	.word	0x20001028

080050f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	@ 0x28
 80050f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050fe:	f000 fb13 	bl	8005728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005102:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <xTimerCreateTimerTask+0x84>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d021      	beq.n	800514e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005112:	1d3a      	adds	r2, r7, #4
 8005114:	f107 0108 	add.w	r1, r7, #8
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe fad9 	bl	80036d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	9202      	str	r2, [sp, #8]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	2302      	movs	r3, #2
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	2300      	movs	r3, #0
 8005132:	460a      	mov	r2, r1
 8005134:	4911      	ldr	r1, [pc, #68]	@ (800517c <xTimerCreateTimerTask+0x88>)
 8005136:	4812      	ldr	r0, [pc, #72]	@ (8005180 <xTimerCreateTimerTask+0x8c>)
 8005138:	f7ff f8d0 	bl	80042dc <xTaskCreateStatic>
 800513c:	4603      	mov	r3, r0
 800513e:	4a11      	ldr	r2, [pc, #68]	@ (8005184 <xTimerCreateTimerTask+0x90>)
 8005140:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <xTimerCreateTimerTask+0x90>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800514a:	2301      	movs	r3, #1
 800514c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800516c:	697b      	ldr	r3, [r7, #20]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20001064 	.word	0x20001064
 800517c:	08008e34 	.word	0x08008e34
 8005180:	080052c1 	.word	0x080052c1
 8005184:	20001068 	.word	0x20001068

08005188 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	@ 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	623b      	str	r3, [r7, #32]
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02a      	beq.n	8005216 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	dc18      	bgt.n	8005204 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051d2:	f7ff fead 	bl	8004f30 <xTaskGetSchedulerState>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d109      	bne.n	80051f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051dc:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	f107 0110 	add.w	r1, r7, #16
 80051e4:	2300      	movs	r3, #0
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	f7fe fc88 	bl	8003afc <xQueueGenericSend>
 80051ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80051ee:	e012      	b.n	8005216 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f107 0110 	add.w	r1, r7, #16
 80051f8:	2300      	movs	r3, #0
 80051fa:	2200      	movs	r2, #0
 80051fc:	f7fe fc7e 	bl	8003afc <xQueueGenericSend>
 8005200:	6278      	str	r0, [r7, #36]	@ 0x24
 8005202:	e008      	b.n	8005216 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <xTimerGenericCommand+0x98>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	f107 0110 	add.w	r1, r7, #16
 800520c:	2300      	movs	r3, #0
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	f7fe fd76 	bl	8003d00 <xQueueGenericSendFromISR>
 8005214:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005218:	4618      	mov	r0, r3
 800521a:	3728      	adds	r7, #40	@ 0x28
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20001064 	.word	0x20001064

08005224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af02      	add	r7, sp, #8
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522e:	4b23      	ldr	r3, [pc, #140]	@ (80052bc <prvProcessExpiredTimer+0x98>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3304      	adds	r3, #4
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe faed 	bl	800381c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d023      	beq.n	8005298 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	18d1      	adds	r1, r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	6978      	ldr	r0, [r7, #20]
 800525e:	f000 f8d5 	bl	800540c <prvInsertTimerInActiveList>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	2100      	movs	r1, #0
 8005272:	6978      	ldr	r0, [r7, #20]
 8005274:	f7ff ff88 	bl	8005188 <xTimerGenericCommand>
 8005278:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d114      	bne.n	80052aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	4798      	blx	r3
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	2000105c 	.word	0x2000105c

080052c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f859 	bl	8005384 <prvGetNextExpireTime>
 80052d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4619      	mov	r1, r3
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f805 	bl	80052e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052de:	f000 f8d7 	bl	8005490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e2:	bf00      	nop
 80052e4:	e7f0      	b.n	80052c8 <prvTimerTask+0x8>
	...

080052e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052f2:	f7ff fa37 	bl	8004764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f866 	bl	80053cc <prvSampleTimeNow>
 8005300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d130      	bne.n	800536a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	429a      	cmp	r2, r3
 8005314:	d806      	bhi.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005316:	f7ff fa33 	bl	8004780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff81 	bl	8005224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005322:	e024      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800532a:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <prvProcessTimerOrBlockTask+0x90>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <prvProcessTimerOrBlockTask+0x50>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <prvProcessTimerOrBlockTask+0x52>
 8005338:	2300      	movs	r3, #0
 800533a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800533c:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <prvProcessTimerOrBlockTask+0x94>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	4619      	mov	r1, r3
 800534a:	f7fe ff93 	bl	8004274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800534e:	f7ff fa17 	bl	8004780 <xTaskResumeAll>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005358:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <prvProcessTimerOrBlockTask+0x98>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
}
 8005368:	e001      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800536a:	f7ff fa09 	bl	8004780 <xTaskResumeAll>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20001060 	.word	0x20001060
 800537c:	20001064 	.word	0x20001064
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800538c:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <prvGetNextExpireTime+0x44>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <prvGetNextExpireTime+0x16>
 8005396:	2201      	movs	r2, #1
 8005398:	e000      	b.n	800539c <prvGetNextExpireTime+0x18>
 800539a:	2200      	movs	r2, #0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <prvGetNextExpireTime+0x44>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e001      	b.n	80053b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	2000105c 	.word	0x2000105c

080053cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d4:	f7ff fa72 	bl	80048bc <xTaskGetTickCount>
 80053d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <prvSampleTimeNow+0x3c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d205      	bcs.n	80053f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e4:	f000 f93a 	bl	800565c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053f6:	4a04      	ldr	r2, [pc, #16]	@ (8005408 <prvSampleTimeNow+0x3c>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	2000106c 	.word	0x2000106c

0800540c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d812      	bhi.n	8005458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e01b      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005446:	4b10      	ldr	r3, [pc, #64]	@ (8005488 <prvInsertTimerInActiveList+0x7c>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fe f9aa 	bl	80037aa <vListInsert>
 8005456:	e012      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d206      	bcs.n	800546e <prvInsertTimerInActiveList+0x62>
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e007      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <prvInsertTimerInActiveList+0x80>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe f996 	bl	80037aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800547e:	697b      	ldr	r3, [r7, #20]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20001060 	.word	0x20001060
 800548c:	2000105c 	.word	0x2000105c

08005490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	@ 0x38
 8005494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005496:	e0ce      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	da19      	bge.n	80054d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	3304      	adds	r3, #4
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	61fb      	str	r3, [r7, #28]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c8:	6850      	ldr	r0, [r2, #4]
 80054ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054cc:	6892      	ldr	r2, [r2, #8]
 80054ce:	4611      	mov	r1, r2
 80054d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f2c0 80ae 	blt.w	8005636 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe f996 	bl	800381c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054f0:	463b      	mov	r3, r7
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff6a 	bl	80053cc <prvSampleTimeNow>
 80054f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	f200 8097 	bhi.w	8005630 <prvProcessReceivedCommands+0x1a0>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <prvProcessReceivedCommands+0x78>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005531 	.word	0x08005531
 800550c:	08005531 	.word	0x08005531
 8005510:	08005531 	.word	0x08005531
 8005514:	080055a7 	.word	0x080055a7
 8005518:	080055bb 	.word	0x080055bb
 800551c:	08005607 	.word	0x08005607
 8005520:	08005531 	.word	0x08005531
 8005524:	08005531 	.word	0x08005531
 8005528:	080055a7 	.word	0x080055a7
 800552c:	080055bb 	.word	0x080055bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	18d1      	adds	r1, r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005550:	f7ff ff5c 	bl	800540c <prvInsertTimerInActiveList>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d06c      	beq.n	8005634 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d061      	beq.n	8005634 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	441a      	add	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	2100      	movs	r1, #0
 8005580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005582:	f7ff fe01 	bl	8005188 <xTimerGenericCommand>
 8005586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d152      	bne.n	8005634 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61bb      	str	r3, [r7, #24]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055b8:	e03d      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	617b      	str	r3, [r7, #20]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	18d1      	adds	r1, r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005600:	f7ff ff04 	bl	800540c <prvInsertTimerInActiveList>
					break;
 8005604:	e017      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005616:	f000 fbe7 	bl	8005de8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800561a:	e00c      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800562e:	e002      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
					break;
 8005634:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005636:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <prvProcessReceivedCommands+0x1c8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1d39      	adds	r1, r7, #4
 800563c:	2200      	movs	r2, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fbfc 	bl	8003e3c <xQueueReceive>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	f47f af26 	bne.w	8005498 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	3730      	adds	r7, #48	@ 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20001064 	.word	0x20001064

0800565c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005662:	e049      	b.n	80056f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005664:	4b2e      	ldr	r3, [pc, #184]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe f8cd 	bl	800381c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02f      	beq.n	80056f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90e      	bls.n	80056c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fe f872 	bl	80037aa <vListInsert>
 80056c6:	e017      	b.n	80056f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	2100      	movs	r1, #0
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fd58 	bl	8005188 <xTimerGenericCommand>
 80056d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	603b      	str	r3, [r7, #0]
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056f8:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1b0      	bne.n	8005664 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <prvSwitchTimerLists+0xc8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a04      	ldr	r2, [pc, #16]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 800570e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005710:	4a04      	ldr	r2, [pc, #16]	@ (8005724 <prvSwitchTimerLists+0xc8>)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6013      	str	r3, [r2, #0]
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	2000105c 	.word	0x2000105c
 8005724:	20001060 	.word	0x20001060

08005728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800572e:	f000 f96b 	bl	8005a08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005732:	4b15      	ldr	r3, [pc, #84]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d120      	bne.n	800577c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800573a:	4814      	ldr	r0, [pc, #80]	@ (800578c <prvCheckForValidListAndQueue+0x64>)
 800573c:	f7fd ffe4 	bl	8003708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005740:	4813      	ldr	r0, [pc, #76]	@ (8005790 <prvCheckForValidListAndQueue+0x68>)
 8005742:	f7fd ffe1 	bl	8003708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005746:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <prvCheckForValidListAndQueue+0x6c>)
 8005748:	4a10      	ldr	r2, [pc, #64]	@ (800578c <prvCheckForValidListAndQueue+0x64>)
 800574a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800574c:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <prvCheckForValidListAndQueue+0x70>)
 800574e:	4a10      	ldr	r2, [pc, #64]	@ (8005790 <prvCheckForValidListAndQueue+0x68>)
 8005750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005752:	2300      	movs	r3, #0
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4b11      	ldr	r3, [pc, #68]	@ (800579c <prvCheckForValidListAndQueue+0x74>)
 8005758:	4a11      	ldr	r2, [pc, #68]	@ (80057a0 <prvCheckForValidListAndQueue+0x78>)
 800575a:	2110      	movs	r1, #16
 800575c:	200a      	movs	r0, #10
 800575e:	f7fe f8f1 	bl	8003944 <xQueueGenericCreateStatic>
 8005762:	4603      	mov	r3, r0
 8005764:	4a08      	ldr	r2, [pc, #32]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005766:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005768:	4b07      	ldr	r3, [pc, #28]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005770:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	490b      	ldr	r1, [pc, #44]	@ (80057a4 <prvCheckForValidListAndQueue+0x7c>)
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fd52 	bl	8004220 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800577c:	f000 f976 	bl	8005a6c <vPortExitCritical>
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20001064 	.word	0x20001064
 800578c:	20001034 	.word	0x20001034
 8005790:	20001048 	.word	0x20001048
 8005794:	2000105c 	.word	0x2000105c
 8005798:	20001060 	.word	0x20001060
 800579c:	20001110 	.word	0x20001110
 80057a0:	20001070 	.word	0x20001070
 80057a4:	08008e3c 	.word	0x08008e3c

080057a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3b04      	subs	r3, #4
 80057b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b04      	subs	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057d8:	4a0c      	ldr	r2, [pc, #48]	@ (800580c <pxPortInitialiseStack+0x64>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3b14      	subs	r3, #20
 80057e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b04      	subs	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f06f 0202 	mvn.w	r2, #2
 80057f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3b20      	subs	r3, #32
 80057fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057fe:	68fb      	ldr	r3, [r7, #12]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	08005811 	.word	0x08005811

08005810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800581a:	4b13      	ldr	r3, [pc, #76]	@ (8005868 <prvTaskExitError+0x58>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d00b      	beq.n	800583c <prvTaskExitError+0x2c>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	60fb      	str	r3, [r7, #12]
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <prvTaskExitError+0x28>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	60bb      	str	r3, [r7, #8]
}
 800584e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005850:	bf00      	nop
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0fc      	beq.n	8005852 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000010 	.word	0x20000010
 800586c:	00000000 	.word	0x00000000

08005870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005870:	4b07      	ldr	r3, [pc, #28]	@ (8005890 <pxCurrentTCBConst2>)
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f380 8809 	msr	PSP, r0
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8811 	msr	BASEPRI, r0
 800588a:	4770      	bx	lr
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst2>:
 8005890:	20000b34 	.word	0x20000b34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005898:	4808      	ldr	r0, [pc, #32]	@ (80058bc <prvPortStartFirstTask+0x24>)
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	f380 8808 	msr	MSP, r0
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8814 	msr	CONTROL, r0
 80058aa:	b662      	cpsie	i
 80058ac:	b661      	cpsie	f
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	df00      	svc	0
 80058b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ba:	bf00      	nop
 80058bc:	e000ed08 	.word	0xe000ed08

080058c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058c6:	4b47      	ldr	r3, [pc, #284]	@ (80059e4 <xPortStartScheduler+0x124>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a47      	ldr	r2, [pc, #284]	@ (80059e8 <xPortStartScheduler+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10b      	bne.n	80058e8 <xPortStartScheduler+0x28>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058e8:	4b3e      	ldr	r3, [pc, #248]	@ (80059e4 <xPortStartScheduler+0x124>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a3f      	ldr	r2, [pc, #252]	@ (80059ec <xPortStartScheduler+0x12c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10b      	bne.n	800590a <xPortStartScheduler+0x4a>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	613b      	str	r3, [r7, #16]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800590a:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <xPortStartScheduler+0x130>)
 800590c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	22ff      	movs	r2, #255	@ 0xff
 800591a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b31      	ldr	r3, [pc, #196]	@ (80059f4 <xPortStartScheduler+0x134>)
 8005930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005932:	4b31      	ldr	r3, [pc, #196]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005934:	2207      	movs	r2, #7
 8005936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005938:	e009      	b.n	800594e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800593a:	4b2f      	ldr	r3, [pc, #188]	@ (80059f8 <xPortStartScheduler+0x138>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	4a2d      	ldr	r2, [pc, #180]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	b2db      	uxtb	r3, r3
 800594c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005956:	2b80      	cmp	r3, #128	@ 0x80
 8005958:	d0ef      	beq.n	800593a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800595a:	4b27      	ldr	r3, [pc, #156]	@ (80059f8 <xPortStartScheduler+0x138>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1c3 0307 	rsb	r3, r3, #7
 8005962:	2b04      	cmp	r3, #4
 8005964:	d00b      	beq.n	800597e <xPortStartScheduler+0xbe>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	60bb      	str	r3, [r7, #8]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800597e:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	4a1c      	ldr	r2, [pc, #112]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005988:	4b1b      	ldr	r3, [pc, #108]	@ (80059f8 <xPortStartScheduler+0x138>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005990:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800599c:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <xPortStartScheduler+0x13c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059a8:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a13      	ldr	r2, [pc, #76]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059b4:	f000 f8da 	bl	8005b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <xPortStartScheduler+0x140>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059be:	f000 f8f9 	bl	8005bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <xPortStartScheduler+0x144>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a04 <xPortStartScheduler+0x144>)
 80059c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059ce:	f7ff ff63 	bl	8005898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059d2:	f7ff f83d 	bl	8004a50 <vTaskSwitchContext>
	prvTaskExitError();
 80059d6:	f7ff ff1b 	bl	8005810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed00 	.word	0xe000ed00
 80059e8:	410fc271 	.word	0x410fc271
 80059ec:	410fc270 	.word	0x410fc270
 80059f0:	e000e400 	.word	0xe000e400
 80059f4:	20001160 	.word	0x20001160
 80059f8:	20001164 	.word	0x20001164
 80059fc:	e000ed20 	.word	0xe000ed20
 8005a00:	20000010 	.word	0x20000010
 8005a04:	e000ef34 	.word	0xe000ef34

08005a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a22:	4b10      	ldr	r3, [pc, #64]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	4a0e      	ldr	r2, [pc, #56]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d110      	bne.n	8005a56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a34:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <vPortEnterCritical+0x60>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	603b      	str	r3, [r7, #0]
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	e7fd      	b.n	8005a52 <vPortEnterCritical+0x4a>
	}
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000010 	.word	0x20000010
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a72:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <vPortExitCritical+0x26>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	607b      	str	r3, [r7, #4]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a92:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <vPortExitCritical+0x50>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	4a08      	ldr	r2, [pc, #32]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a9c:	4b07      	ldr	r3, [pc, #28]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <vPortExitCritical+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	20000010 	.word	0x20000010

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4b15      	ldr	r3, [pc, #84]	@ (8005b20 <pxCurrentTCBConst>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f01e 0f10 	tst.w	lr, #16
 8005ad0:	bf08      	it	eq
 8005ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ae4:	f380 8811 	msr	BASEPRI, r0
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f7fe ffae 	bl	8004a50 <vTaskSwitchContext>
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f380 8811 	msr	BASEPRI, r0
 8005afc:	bc09      	pop	{r0, r3}
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b06:	f01e 0f10 	tst.w	lr, #16
 8005b0a:	bf08      	it	eq
 8005b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b10:	f380 8809 	msr	PSP, r0
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst>:
 8005b20:	20000b34 	.word	0x20000b34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b42:	f7fe fecb 	bl	80048dc <xTaskIncrementTick>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <xPortSysTickHandler+0x40>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f383 8811 	msr	BASEPRI, r3
}
 8005b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <vPortSetupTimerInterrupt+0x38>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <vPortSetupTimerInterrupt+0x3c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <vPortSetupTimerInterrupt+0x40>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <vPortSetupTimerInterrupt+0x44>)
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e010 	.word	0xe000e010
 8005ba4:	e000e018 	.word	0xe000e018
 8005ba8:	20000004 	.word	0x20000004
 8005bac:	10624dd3 	.word	0x10624dd3
 8005bb0:	e000e014 	.word	0xe000e014

08005bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005bc4 <vPortEnableVFP+0x10>
 8005bb8:	6801      	ldr	r1, [r0, #0]
 8005bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bbe:	6001      	str	r1, [r0, #0]
 8005bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bc2:	bf00      	nop
 8005bc4:	e000ed88 	.word	0xe000ed88

08005bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d915      	bls.n	8005c06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bda:	4a18      	ldr	r2, [pc, #96]	@ (8005c3c <vPortValidateInterruptPriority+0x74>)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005be4:	4b16      	ldr	r3, [pc, #88]	@ (8005c40 <vPortValidateInterruptPriority+0x78>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	7afa      	ldrb	r2, [r7, #11]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d20b      	bcs.n	8005c06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c06:	4b0f      	ldr	r3, [pc, #60]	@ (8005c44 <vPortValidateInterruptPriority+0x7c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <vPortValidateInterruptPriority+0x80>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d90b      	bls.n	8005c2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	603b      	str	r3, [r7, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <vPortValidateInterruptPriority+0x62>
	}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	e000e3f0 	.word	0xe000e3f0
 8005c40:	20001160 	.word	0x20001160
 8005c44:	e000ed0c 	.word	0xe000ed0c
 8005c48:	20001164 	.word	0x20001164

08005c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	@ 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c58:	f7fe fd84 	bl	8004764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005dd0 <pvPortMalloc+0x184>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c64:	f000 f924 	bl	8005eb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c68:	4b5a      	ldr	r3, [pc, #360]	@ (8005dd4 <pvPortMalloc+0x188>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8095 	bne.w	8005da0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01e      	beq.n	8005cba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d015      	beq.n	8005cba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <pvPortMalloc+0x6e>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	617b      	str	r3, [r7, #20]
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	e7fd      	b.n	8005cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d06f      	beq.n	8005da0 <pvPortMalloc+0x154>
 8005cc0:	4b45      	ldr	r3, [pc, #276]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d86a      	bhi.n	8005da0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cca:	4b44      	ldr	r3, [pc, #272]	@ (8005ddc <pvPortMalloc+0x190>)
 8005ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cce:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <pvPortMalloc+0x190>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cd4:	e004      	b.n	8005ce0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d903      	bls.n	8005cf2 <pvPortMalloc+0xa6>
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f1      	bne.n	8005cd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cf2:	4b37      	ldr	r3, [pc, #220]	@ (8005dd0 <pvPortMalloc+0x184>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d051      	beq.n	8005da0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2208      	movs	r2, #8
 8005d02:	4413      	add	r3, r2
 8005d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	2308      	movs	r3, #8
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d920      	bls.n	8005d60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4413      	add	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <pvPortMalloc+0xfc>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	613b      	str	r3, [r7, #16]
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d5a:	69b8      	ldr	r0, [r7, #24]
 8005d5c:	f000 f90a 	bl	8005f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d60:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <pvPortMalloc+0x194>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d203      	bcs.n	8005d82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a18      	ldr	r2, [pc, #96]	@ (8005de0 <pvPortMalloc+0x194>)
 8005d80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b13      	ldr	r3, [pc, #76]	@ (8005dd4 <pvPortMalloc+0x188>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <pvPortMalloc+0x198>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <pvPortMalloc+0x198>)
 8005d9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005da0:	f7fe fcee 	bl	8004780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <pvPortMalloc+0x17a>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <pvPortMalloc+0x176>
	return pvReturn;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20004d70 	.word	0x20004d70
 8005dd4:	20004d84 	.word	0x20004d84
 8005dd8:	20004d74 	.word	0x20004d74
 8005ddc:	20004d68 	.word	0x20004d68
 8005de0:	20004d78 	.word	0x20004d78
 8005de4:	20004d7c 	.word	0x20004d7c

08005de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d04f      	beq.n	8005e9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ea4 <vPortFree+0xbc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <vPortFree+0x46>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <vPortFree+0x66>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <vPortFree+0xbc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01e      	beq.n	8005e9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11a      	bne.n	8005e9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea4 <vPortFree+0xbc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	401a      	ands	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e74:	f7fe fc76 	bl	8004764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <vPortFree+0xc0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	4a09      	ldr	r2, [pc, #36]	@ (8005ea8 <vPortFree+0xc0>)
 8005e84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e86:	6938      	ldr	r0, [r7, #16]
 8005e88:	f000 f874 	bl	8005f74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vPortFree+0xc4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a06      	ldr	r2, [pc, #24]	@ (8005eac <vPortFree+0xc4>)
 8005e94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e96:	f7fe fc73 	bl	8004780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20004d84 	.word	0x20004d84
 8005ea8:	20004d74 	.word	0x20004d74
 8005eac:	20004d80 	.word	0x20004d80

08005eb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005eba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ebc:	4b27      	ldr	r3, [pc, #156]	@ (8005f5c <prvHeapInit+0xac>)
 8005ebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3307      	adds	r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	4a1f      	ldr	r2, [pc, #124]	@ (8005f5c <prvHeapInit+0xac>)
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <prvHeapInit+0xb0>)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005eee:	4b1c      	ldr	r3, [pc, #112]	@ (8005f60 <prvHeapInit+0xb0>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005efc:	2208      	movs	r2, #8
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f12:	4b14      	ldr	r3, [pc, #80]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f1a:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f30:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f68 <prvHeapInit+0xb8>)
 8005f3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a09      	ldr	r2, [pc, #36]	@ (8005f6c <prvHeapInit+0xbc>)
 8005f46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <prvHeapInit+0xc0>)
 8005f4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f4e:	601a      	str	r2, [r3, #0]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	20001168 	.word	0x20001168
 8005f60:	20004d68 	.word	0x20004d68
 8005f64:	20004d70 	.word	0x20004d70
 8005f68:	20004d78 	.word	0x20004d78
 8005f6c:	20004d74 	.word	0x20004d74
 8005f70:	20004d84 	.word	0x20004d84

08005f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f7c:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <prvInsertBlockIntoFreeList+0xac>)
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e002      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x14>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d8f7      	bhi.n	8005f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d108      	bne.n	8005fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	441a      	add	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d118      	bne.n	8005ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d00d      	beq.n	8005ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e008      	b.n	8006004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	e003      	b.n	8006004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d002      	beq.n	8006012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20004d68 	.word	0x20004d68
 8006024:	20004d70 	.word	0x20004d70

08006028 <__cvt>:
 8006028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	ec57 6b10 	vmov	r6, r7, d0
 8006030:	2f00      	cmp	r7, #0
 8006032:	460c      	mov	r4, r1
 8006034:	4619      	mov	r1, r3
 8006036:	463b      	mov	r3, r7
 8006038:	bfbb      	ittet	lt
 800603a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800603e:	461f      	movlt	r7, r3
 8006040:	2300      	movge	r3, #0
 8006042:	232d      	movlt	r3, #45	@ 0x2d
 8006044:	700b      	strb	r3, [r1, #0]
 8006046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006048:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800604c:	4691      	mov	r9, r2
 800604e:	f023 0820 	bic.w	r8, r3, #32
 8006052:	bfbc      	itt	lt
 8006054:	4632      	movlt	r2, r6
 8006056:	4616      	movlt	r6, r2
 8006058:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800605c:	d005      	beq.n	800606a <__cvt+0x42>
 800605e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006062:	d100      	bne.n	8006066 <__cvt+0x3e>
 8006064:	3401      	adds	r4, #1
 8006066:	2102      	movs	r1, #2
 8006068:	e000      	b.n	800606c <__cvt+0x44>
 800606a:	2103      	movs	r1, #3
 800606c:	ab03      	add	r3, sp, #12
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	ab02      	add	r3, sp, #8
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	ec47 6b10 	vmov	d0, r6, r7
 8006078:	4653      	mov	r3, sl
 800607a:	4622      	mov	r2, r4
 800607c:	f000 fe84 	bl	8006d88 <_dtoa_r>
 8006080:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006084:	4605      	mov	r5, r0
 8006086:	d119      	bne.n	80060bc <__cvt+0x94>
 8006088:	f019 0f01 	tst.w	r9, #1
 800608c:	d00e      	beq.n	80060ac <__cvt+0x84>
 800608e:	eb00 0904 	add.w	r9, r0, r4
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	4630      	mov	r0, r6
 8006098:	4639      	mov	r1, r7
 800609a:	f7fa fd35 	bl	8000b08 <__aeabi_dcmpeq>
 800609e:	b108      	cbz	r0, 80060a4 <__cvt+0x7c>
 80060a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80060a4:	2230      	movs	r2, #48	@ 0x30
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	454b      	cmp	r3, r9
 80060aa:	d31e      	bcc.n	80060ea <__cvt+0xc2>
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060b0:	1b5b      	subs	r3, r3, r5
 80060b2:	4628      	mov	r0, r5
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	b004      	add	sp, #16
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060c0:	eb00 0904 	add.w	r9, r0, r4
 80060c4:	d1e5      	bne.n	8006092 <__cvt+0x6a>
 80060c6:	7803      	ldrb	r3, [r0, #0]
 80060c8:	2b30      	cmp	r3, #48	@ 0x30
 80060ca:	d10a      	bne.n	80060e2 <__cvt+0xba>
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	4630      	mov	r0, r6
 80060d2:	4639      	mov	r1, r7
 80060d4:	f7fa fd18 	bl	8000b08 <__aeabi_dcmpeq>
 80060d8:	b918      	cbnz	r0, 80060e2 <__cvt+0xba>
 80060da:	f1c4 0401 	rsb	r4, r4, #1
 80060de:	f8ca 4000 	str.w	r4, [sl]
 80060e2:	f8da 3000 	ldr.w	r3, [sl]
 80060e6:	4499      	add	r9, r3
 80060e8:	e7d3      	b.n	8006092 <__cvt+0x6a>
 80060ea:	1c59      	adds	r1, r3, #1
 80060ec:	9103      	str	r1, [sp, #12]
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e7d9      	b.n	80060a6 <__cvt+0x7e>

080060f2 <__exponent>:
 80060f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060f4:	2900      	cmp	r1, #0
 80060f6:	bfba      	itte	lt
 80060f8:	4249      	neglt	r1, r1
 80060fa:	232d      	movlt	r3, #45	@ 0x2d
 80060fc:	232b      	movge	r3, #43	@ 0x2b
 80060fe:	2909      	cmp	r1, #9
 8006100:	7002      	strb	r2, [r0, #0]
 8006102:	7043      	strb	r3, [r0, #1]
 8006104:	dd29      	ble.n	800615a <__exponent+0x68>
 8006106:	f10d 0307 	add.w	r3, sp, #7
 800610a:	461d      	mov	r5, r3
 800610c:	270a      	movs	r7, #10
 800610e:	461a      	mov	r2, r3
 8006110:	fbb1 f6f7 	udiv	r6, r1, r7
 8006114:	fb07 1416 	mls	r4, r7, r6, r1
 8006118:	3430      	adds	r4, #48	@ 0x30
 800611a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800611e:	460c      	mov	r4, r1
 8006120:	2c63      	cmp	r4, #99	@ 0x63
 8006122:	f103 33ff 	add.w	r3, r3, #4294967295
 8006126:	4631      	mov	r1, r6
 8006128:	dcf1      	bgt.n	800610e <__exponent+0x1c>
 800612a:	3130      	adds	r1, #48	@ 0x30
 800612c:	1e94      	subs	r4, r2, #2
 800612e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006132:	1c41      	adds	r1, r0, #1
 8006134:	4623      	mov	r3, r4
 8006136:	42ab      	cmp	r3, r5
 8006138:	d30a      	bcc.n	8006150 <__exponent+0x5e>
 800613a:	f10d 0309 	add.w	r3, sp, #9
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	42ac      	cmp	r4, r5
 8006142:	bf88      	it	hi
 8006144:	2300      	movhi	r3, #0
 8006146:	3302      	adds	r3, #2
 8006148:	4403      	add	r3, r0
 800614a:	1a18      	subs	r0, r3, r0
 800614c:	b003      	add	sp, #12
 800614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006150:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006154:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006158:	e7ed      	b.n	8006136 <__exponent+0x44>
 800615a:	2330      	movs	r3, #48	@ 0x30
 800615c:	3130      	adds	r1, #48	@ 0x30
 800615e:	7083      	strb	r3, [r0, #2]
 8006160:	70c1      	strb	r1, [r0, #3]
 8006162:	1d03      	adds	r3, r0, #4
 8006164:	e7f1      	b.n	800614a <__exponent+0x58>
	...

08006168 <_printf_float>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	b08d      	sub	sp, #52	@ 0x34
 800616e:	460c      	mov	r4, r1
 8006170:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006174:	4616      	mov	r6, r2
 8006176:	461f      	mov	r7, r3
 8006178:	4605      	mov	r5, r0
 800617a:	f000 fcf5 	bl	8006b68 <_localeconv_r>
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fa f894 	bl	80002b0 <strlen>
 8006188:	2300      	movs	r3, #0
 800618a:	930a      	str	r3, [sp, #40]	@ 0x28
 800618c:	f8d8 3000 	ldr.w	r3, [r8]
 8006190:	9005      	str	r0, [sp, #20]
 8006192:	3307      	adds	r3, #7
 8006194:	f023 0307 	bic.w	r3, r3, #7
 8006198:	f103 0208 	add.w	r2, r3, #8
 800619c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061a0:	f8d4 b000 	ldr.w	fp, [r4]
 80061a4:	f8c8 2000 	str.w	r2, [r8]
 80061a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80061b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061be:	4b9c      	ldr	r3, [pc, #624]	@ (8006430 <_printf_float+0x2c8>)
 80061c0:	f04f 32ff 	mov.w	r2, #4294967295
 80061c4:	f7fa fcd2 	bl	8000b6c <__aeabi_dcmpun>
 80061c8:	bb70      	cbnz	r0, 8006228 <_printf_float+0xc0>
 80061ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ce:	4b98      	ldr	r3, [pc, #608]	@ (8006430 <_printf_float+0x2c8>)
 80061d0:	f04f 32ff 	mov.w	r2, #4294967295
 80061d4:	f7fa fcac 	bl	8000b30 <__aeabi_dcmple>
 80061d8:	bb30      	cbnz	r0, 8006228 <_printf_float+0xc0>
 80061da:	2200      	movs	r2, #0
 80061dc:	2300      	movs	r3, #0
 80061de:	4640      	mov	r0, r8
 80061e0:	4649      	mov	r1, r9
 80061e2:	f7fa fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80061e6:	b110      	cbz	r0, 80061ee <_printf_float+0x86>
 80061e8:	232d      	movs	r3, #45	@ 0x2d
 80061ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ee:	4a91      	ldr	r2, [pc, #580]	@ (8006434 <_printf_float+0x2cc>)
 80061f0:	4b91      	ldr	r3, [pc, #580]	@ (8006438 <_printf_float+0x2d0>)
 80061f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061f6:	bf8c      	ite	hi
 80061f8:	4690      	movhi	r8, r2
 80061fa:	4698      	movls	r8, r3
 80061fc:	2303      	movs	r3, #3
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	f02b 0304 	bic.w	r3, fp, #4
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	f04f 0900 	mov.w	r9, #0
 800620a:	9700      	str	r7, [sp, #0]
 800620c:	4633      	mov	r3, r6
 800620e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006210:	4621      	mov	r1, r4
 8006212:	4628      	mov	r0, r5
 8006214:	f000 f9d2 	bl	80065bc <_printf_common>
 8006218:	3001      	adds	r0, #1
 800621a:	f040 808d 	bne.w	8006338 <_printf_float+0x1d0>
 800621e:	f04f 30ff 	mov.w	r0, #4294967295
 8006222:	b00d      	add	sp, #52	@ 0x34
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	4640      	mov	r0, r8
 800622e:	4649      	mov	r1, r9
 8006230:	f7fa fc9c 	bl	8000b6c <__aeabi_dcmpun>
 8006234:	b140      	cbz	r0, 8006248 <_printf_float+0xe0>
 8006236:	464b      	mov	r3, r9
 8006238:	2b00      	cmp	r3, #0
 800623a:	bfbc      	itt	lt
 800623c:	232d      	movlt	r3, #45	@ 0x2d
 800623e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006242:	4a7e      	ldr	r2, [pc, #504]	@ (800643c <_printf_float+0x2d4>)
 8006244:	4b7e      	ldr	r3, [pc, #504]	@ (8006440 <_printf_float+0x2d8>)
 8006246:	e7d4      	b.n	80061f2 <_printf_float+0x8a>
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800624e:	9206      	str	r2, [sp, #24]
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	d13b      	bne.n	80062cc <_printf_float+0x164>
 8006254:	2306      	movs	r3, #6
 8006256:	6063      	str	r3, [r4, #4]
 8006258:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800625c:	2300      	movs	r3, #0
 800625e:	6022      	str	r2, [r4, #0]
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	ab0a      	add	r3, sp, #40	@ 0x28
 8006264:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006268:	ab09      	add	r3, sp, #36	@ 0x24
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	6861      	ldr	r1, [r4, #4]
 800626e:	ec49 8b10 	vmov	d0, r8, r9
 8006272:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006276:	4628      	mov	r0, r5
 8006278:	f7ff fed6 	bl	8006028 <__cvt>
 800627c:	9b06      	ldr	r3, [sp, #24]
 800627e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006280:	2b47      	cmp	r3, #71	@ 0x47
 8006282:	4680      	mov	r8, r0
 8006284:	d129      	bne.n	80062da <_printf_float+0x172>
 8006286:	1cc8      	adds	r0, r1, #3
 8006288:	db02      	blt.n	8006290 <_printf_float+0x128>
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	4299      	cmp	r1, r3
 800628e:	dd41      	ble.n	8006314 <_printf_float+0x1ac>
 8006290:	f1aa 0a02 	sub.w	sl, sl, #2
 8006294:	fa5f fa8a 	uxtb.w	sl, sl
 8006298:	3901      	subs	r1, #1
 800629a:	4652      	mov	r2, sl
 800629c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80062a2:	f7ff ff26 	bl	80060f2 <__exponent>
 80062a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062a8:	1813      	adds	r3, r2, r0
 80062aa:	2a01      	cmp	r2, #1
 80062ac:	4681      	mov	r9, r0
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	dc02      	bgt.n	80062b8 <_printf_float+0x150>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	07d2      	lsls	r2, r2, #31
 80062b6:	d501      	bpl.n	80062bc <_printf_float+0x154>
 80062b8:	3301      	adds	r3, #1
 80062ba:	6123      	str	r3, [r4, #16]
 80062bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0a2      	beq.n	800620a <_printf_float+0xa2>
 80062c4:	232d      	movs	r3, #45	@ 0x2d
 80062c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ca:	e79e      	b.n	800620a <_printf_float+0xa2>
 80062cc:	9a06      	ldr	r2, [sp, #24]
 80062ce:	2a47      	cmp	r2, #71	@ 0x47
 80062d0:	d1c2      	bne.n	8006258 <_printf_float+0xf0>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1c0      	bne.n	8006258 <_printf_float+0xf0>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e7bd      	b.n	8006256 <_printf_float+0xee>
 80062da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062de:	d9db      	bls.n	8006298 <_printf_float+0x130>
 80062e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80062e4:	d118      	bne.n	8006318 <_printf_float+0x1b0>
 80062e6:	2900      	cmp	r1, #0
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	dd0b      	ble.n	8006304 <_printf_float+0x19c>
 80062ec:	6121      	str	r1, [r4, #16]
 80062ee:	b913      	cbnz	r3, 80062f6 <_printf_float+0x18e>
 80062f0:	6822      	ldr	r2, [r4, #0]
 80062f2:	07d0      	lsls	r0, r2, #31
 80062f4:	d502      	bpl.n	80062fc <_printf_float+0x194>
 80062f6:	3301      	adds	r3, #1
 80062f8:	440b      	add	r3, r1
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062fe:	f04f 0900 	mov.w	r9, #0
 8006302:	e7db      	b.n	80062bc <_printf_float+0x154>
 8006304:	b913      	cbnz	r3, 800630c <_printf_float+0x1a4>
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	07d2      	lsls	r2, r2, #31
 800630a:	d501      	bpl.n	8006310 <_printf_float+0x1a8>
 800630c:	3302      	adds	r3, #2
 800630e:	e7f4      	b.n	80062fa <_printf_float+0x192>
 8006310:	2301      	movs	r3, #1
 8006312:	e7f2      	b.n	80062fa <_printf_float+0x192>
 8006314:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631a:	4299      	cmp	r1, r3
 800631c:	db05      	blt.n	800632a <_printf_float+0x1c2>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	6121      	str	r1, [r4, #16]
 8006322:	07d8      	lsls	r0, r3, #31
 8006324:	d5ea      	bpl.n	80062fc <_printf_float+0x194>
 8006326:	1c4b      	adds	r3, r1, #1
 8006328:	e7e7      	b.n	80062fa <_printf_float+0x192>
 800632a:	2900      	cmp	r1, #0
 800632c:	bfd4      	ite	le
 800632e:	f1c1 0202 	rsble	r2, r1, #2
 8006332:	2201      	movgt	r2, #1
 8006334:	4413      	add	r3, r2
 8006336:	e7e0      	b.n	80062fa <_printf_float+0x192>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	055a      	lsls	r2, r3, #21
 800633c:	d407      	bmi.n	800634e <_printf_float+0x1e6>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	4642      	mov	r2, r8
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	d12b      	bne.n	80063a4 <_printf_float+0x23c>
 800634c:	e767      	b.n	800621e <_printf_float+0xb6>
 800634e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006352:	f240 80dd 	bls.w	8006510 <_printf_float+0x3a8>
 8006356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800635a:	2200      	movs	r2, #0
 800635c:	2300      	movs	r3, #0
 800635e:	f7fa fbd3 	bl	8000b08 <__aeabi_dcmpeq>
 8006362:	2800      	cmp	r0, #0
 8006364:	d033      	beq.n	80063ce <_printf_float+0x266>
 8006366:	4a37      	ldr	r2, [pc, #220]	@ (8006444 <_printf_float+0x2dc>)
 8006368:	2301      	movs	r3, #1
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	f43f af54 	beq.w	800621e <_printf_float+0xb6>
 8006376:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800637a:	4543      	cmp	r3, r8
 800637c:	db02      	blt.n	8006384 <_printf_float+0x21c>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	07d8      	lsls	r0, r3, #31
 8006382:	d50f      	bpl.n	80063a4 <_printf_float+0x23c>
 8006384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f af45 	beq.w	800621e <_printf_float+0xb6>
 8006394:	f04f 0900 	mov.w	r9, #0
 8006398:	f108 38ff 	add.w	r8, r8, #4294967295
 800639c:	f104 0a1a 	add.w	sl, r4, #26
 80063a0:	45c8      	cmp	r8, r9
 80063a2:	dc09      	bgt.n	80063b8 <_printf_float+0x250>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	079b      	lsls	r3, r3, #30
 80063a8:	f100 8103 	bmi.w	80065b2 <_printf_float+0x44a>
 80063ac:	68e0      	ldr	r0, [r4, #12]
 80063ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063b0:	4298      	cmp	r0, r3
 80063b2:	bfb8      	it	lt
 80063b4:	4618      	movlt	r0, r3
 80063b6:	e734      	b.n	8006222 <_printf_float+0xba>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4652      	mov	r2, sl
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af2b 	beq.w	800621e <_printf_float+0xb6>
 80063c8:	f109 0901 	add.w	r9, r9, #1
 80063cc:	e7e8      	b.n	80063a0 <_printf_float+0x238>
 80063ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dc39      	bgt.n	8006448 <_printf_float+0x2e0>
 80063d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006444 <_printf_float+0x2dc>)
 80063d6:	2301      	movs	r3, #1
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f af1d 	beq.w	800621e <_printf_float+0xb6>
 80063e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80063e8:	ea59 0303 	orrs.w	r3, r9, r3
 80063ec:	d102      	bne.n	80063f4 <_printf_float+0x28c>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	07d9      	lsls	r1, r3, #31
 80063f2:	d5d7      	bpl.n	80063a4 <_printf_float+0x23c>
 80063f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f af0d 	beq.w	800621e <_printf_float+0xb6>
 8006404:	f04f 0a00 	mov.w	sl, #0
 8006408:	f104 0b1a 	add.w	fp, r4, #26
 800640c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640e:	425b      	negs	r3, r3
 8006410:	4553      	cmp	r3, sl
 8006412:	dc01      	bgt.n	8006418 <_printf_float+0x2b0>
 8006414:	464b      	mov	r3, r9
 8006416:	e793      	b.n	8006340 <_printf_float+0x1d8>
 8006418:	2301      	movs	r3, #1
 800641a:	465a      	mov	r2, fp
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f aefb 	beq.w	800621e <_printf_float+0xb6>
 8006428:	f10a 0a01 	add.w	sl, sl, #1
 800642c:	e7ee      	b.n	800640c <_printf_float+0x2a4>
 800642e:	bf00      	nop
 8006430:	7fefffff 	.word	0x7fefffff
 8006434:	08008e60 	.word	0x08008e60
 8006438:	08008e5c 	.word	0x08008e5c
 800643c:	08008e68 	.word	0x08008e68
 8006440:	08008e64 	.word	0x08008e64
 8006444:	08008e6c 	.word	0x08008e6c
 8006448:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800644a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800644e:	4553      	cmp	r3, sl
 8006450:	bfa8      	it	ge
 8006452:	4653      	movge	r3, sl
 8006454:	2b00      	cmp	r3, #0
 8006456:	4699      	mov	r9, r3
 8006458:	dc36      	bgt.n	80064c8 <_printf_float+0x360>
 800645a:	f04f 0b00 	mov.w	fp, #0
 800645e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006462:	f104 021a 	add.w	r2, r4, #26
 8006466:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006468:	9306      	str	r3, [sp, #24]
 800646a:	eba3 0309 	sub.w	r3, r3, r9
 800646e:	455b      	cmp	r3, fp
 8006470:	dc31      	bgt.n	80064d6 <_printf_float+0x36e>
 8006472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006474:	459a      	cmp	sl, r3
 8006476:	dc3a      	bgt.n	80064ee <_printf_float+0x386>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07da      	lsls	r2, r3, #31
 800647c:	d437      	bmi.n	80064ee <_printf_float+0x386>
 800647e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006480:	ebaa 0903 	sub.w	r9, sl, r3
 8006484:	9b06      	ldr	r3, [sp, #24]
 8006486:	ebaa 0303 	sub.w	r3, sl, r3
 800648a:	4599      	cmp	r9, r3
 800648c:	bfa8      	it	ge
 800648e:	4699      	movge	r9, r3
 8006490:	f1b9 0f00 	cmp.w	r9, #0
 8006494:	dc33      	bgt.n	80064fe <_printf_float+0x396>
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800649e:	f104 0b1a 	add.w	fp, r4, #26
 80064a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a4:	ebaa 0303 	sub.w	r3, sl, r3
 80064a8:	eba3 0309 	sub.w	r3, r3, r9
 80064ac:	4543      	cmp	r3, r8
 80064ae:	f77f af79 	ble.w	80063a4 <_printf_float+0x23c>
 80064b2:	2301      	movs	r3, #1
 80064b4:	465a      	mov	r2, fp
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f aeae 	beq.w	800621e <_printf_float+0xb6>
 80064c2:	f108 0801 	add.w	r8, r8, #1
 80064c6:	e7ec      	b.n	80064a2 <_printf_float+0x33a>
 80064c8:	4642      	mov	r2, r8
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	d1c2      	bne.n	800645a <_printf_float+0x2f2>
 80064d4:	e6a3      	b.n	800621e <_printf_float+0xb6>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	9206      	str	r2, [sp, #24]
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae9c 	beq.w	800621e <_printf_float+0xb6>
 80064e6:	9a06      	ldr	r2, [sp, #24]
 80064e8:	f10b 0b01 	add.w	fp, fp, #1
 80064ec:	e7bb      	b.n	8006466 <_printf_float+0x2fe>
 80064ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	d1c0      	bne.n	800647e <_printf_float+0x316>
 80064fc:	e68f      	b.n	800621e <_printf_float+0xb6>
 80064fe:	9a06      	ldr	r2, [sp, #24]
 8006500:	464b      	mov	r3, r9
 8006502:	4442      	add	r2, r8
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	d1c3      	bne.n	8006496 <_printf_float+0x32e>
 800650e:	e686      	b.n	800621e <_printf_float+0xb6>
 8006510:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006514:	f1ba 0f01 	cmp.w	sl, #1
 8006518:	dc01      	bgt.n	800651e <_printf_float+0x3b6>
 800651a:	07db      	lsls	r3, r3, #31
 800651c:	d536      	bpl.n	800658c <_printf_float+0x424>
 800651e:	2301      	movs	r3, #1
 8006520:	4642      	mov	r2, r8
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	f43f ae78 	beq.w	800621e <_printf_float+0xb6>
 800652e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f ae70 	beq.w	800621e <_printf_float+0xb6>
 800653e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800654a:	f7fa fadd 	bl	8000b08 <__aeabi_dcmpeq>
 800654e:	b9c0      	cbnz	r0, 8006582 <_printf_float+0x41a>
 8006550:	4653      	mov	r3, sl
 8006552:	f108 0201 	add.w	r2, r8, #1
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	d10c      	bne.n	800657a <_printf_float+0x412>
 8006560:	e65d      	b.n	800621e <_printf_float+0xb6>
 8006562:	2301      	movs	r3, #1
 8006564:	465a      	mov	r2, fp
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae56 	beq.w	800621e <_printf_float+0xb6>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	45d0      	cmp	r8, sl
 8006578:	dbf3      	blt.n	8006562 <_printf_float+0x3fa>
 800657a:	464b      	mov	r3, r9
 800657c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006580:	e6df      	b.n	8006342 <_printf_float+0x1da>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	f104 0b1a 	add.w	fp, r4, #26
 800658a:	e7f4      	b.n	8006576 <_printf_float+0x40e>
 800658c:	2301      	movs	r3, #1
 800658e:	4642      	mov	r2, r8
 8006590:	e7e1      	b.n	8006556 <_printf_float+0x3ee>
 8006592:	2301      	movs	r3, #1
 8006594:	464a      	mov	r2, r9
 8006596:	4631      	mov	r1, r6
 8006598:	4628      	mov	r0, r5
 800659a:	47b8      	blx	r7
 800659c:	3001      	adds	r0, #1
 800659e:	f43f ae3e 	beq.w	800621e <_printf_float+0xb6>
 80065a2:	f108 0801 	add.w	r8, r8, #1
 80065a6:	68e3      	ldr	r3, [r4, #12]
 80065a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065aa:	1a5b      	subs	r3, r3, r1
 80065ac:	4543      	cmp	r3, r8
 80065ae:	dcf0      	bgt.n	8006592 <_printf_float+0x42a>
 80065b0:	e6fc      	b.n	80063ac <_printf_float+0x244>
 80065b2:	f04f 0800 	mov.w	r8, #0
 80065b6:	f104 0919 	add.w	r9, r4, #25
 80065ba:	e7f4      	b.n	80065a6 <_printf_float+0x43e>

080065bc <_printf_common>:
 80065bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c0:	4616      	mov	r6, r2
 80065c2:	4698      	mov	r8, r3
 80065c4:	688a      	ldr	r2, [r1, #8]
 80065c6:	690b      	ldr	r3, [r1, #16]
 80065c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	bfb8      	it	lt
 80065d0:	4613      	movlt	r3, r2
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065d8:	4607      	mov	r7, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	b10a      	cbz	r2, 80065e2 <_printf_common+0x26>
 80065de:	3301      	adds	r3, #1
 80065e0:	6033      	str	r3, [r6, #0]
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	0699      	lsls	r1, r3, #26
 80065e6:	bf42      	ittt	mi
 80065e8:	6833      	ldrmi	r3, [r6, #0]
 80065ea:	3302      	addmi	r3, #2
 80065ec:	6033      	strmi	r3, [r6, #0]
 80065ee:	6825      	ldr	r5, [r4, #0]
 80065f0:	f015 0506 	ands.w	r5, r5, #6
 80065f4:	d106      	bne.n	8006604 <_printf_common+0x48>
 80065f6:	f104 0a19 	add.w	sl, r4, #25
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	6832      	ldr	r2, [r6, #0]
 80065fe:	1a9b      	subs	r3, r3, r2
 8006600:	42ab      	cmp	r3, r5
 8006602:	dc26      	bgt.n	8006652 <_printf_common+0x96>
 8006604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	3b00      	subs	r3, #0
 800660c:	bf18      	it	ne
 800660e:	2301      	movne	r3, #1
 8006610:	0692      	lsls	r2, r2, #26
 8006612:	d42b      	bmi.n	800666c <_printf_common+0xb0>
 8006614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006618:	4641      	mov	r1, r8
 800661a:	4638      	mov	r0, r7
 800661c:	47c8      	blx	r9
 800661e:	3001      	adds	r0, #1
 8006620:	d01e      	beq.n	8006660 <_printf_common+0xa4>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	6922      	ldr	r2, [r4, #16]
 8006626:	f003 0306 	and.w	r3, r3, #6
 800662a:	2b04      	cmp	r3, #4
 800662c:	bf02      	ittt	eq
 800662e:	68e5      	ldreq	r5, [r4, #12]
 8006630:	6833      	ldreq	r3, [r6, #0]
 8006632:	1aed      	subeq	r5, r5, r3
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	bf0c      	ite	eq
 8006638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800663c:	2500      	movne	r5, #0
 800663e:	4293      	cmp	r3, r2
 8006640:	bfc4      	itt	gt
 8006642:	1a9b      	subgt	r3, r3, r2
 8006644:	18ed      	addgt	r5, r5, r3
 8006646:	2600      	movs	r6, #0
 8006648:	341a      	adds	r4, #26
 800664a:	42b5      	cmp	r5, r6
 800664c:	d11a      	bne.n	8006684 <_printf_common+0xc8>
 800664e:	2000      	movs	r0, #0
 8006650:	e008      	b.n	8006664 <_printf_common+0xa8>
 8006652:	2301      	movs	r3, #1
 8006654:	4652      	mov	r2, sl
 8006656:	4641      	mov	r1, r8
 8006658:	4638      	mov	r0, r7
 800665a:	47c8      	blx	r9
 800665c:	3001      	adds	r0, #1
 800665e:	d103      	bne.n	8006668 <_printf_common+0xac>
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	3501      	adds	r5, #1
 800666a:	e7c6      	b.n	80065fa <_printf_common+0x3e>
 800666c:	18e1      	adds	r1, r4, r3
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	2030      	movs	r0, #48	@ 0x30
 8006672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006676:	4422      	add	r2, r4
 8006678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800667c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006680:	3302      	adds	r3, #2
 8006682:	e7c7      	b.n	8006614 <_printf_common+0x58>
 8006684:	2301      	movs	r3, #1
 8006686:	4622      	mov	r2, r4
 8006688:	4641      	mov	r1, r8
 800668a:	4638      	mov	r0, r7
 800668c:	47c8      	blx	r9
 800668e:	3001      	adds	r0, #1
 8006690:	d0e6      	beq.n	8006660 <_printf_common+0xa4>
 8006692:	3601      	adds	r6, #1
 8006694:	e7d9      	b.n	800664a <_printf_common+0x8e>
	...

08006698 <_printf_i>:
 8006698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800669c:	7e0f      	ldrb	r7, [r1, #24]
 800669e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066a0:	2f78      	cmp	r7, #120	@ 0x78
 80066a2:	4691      	mov	r9, r2
 80066a4:	4680      	mov	r8, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	469a      	mov	sl, r3
 80066aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066ae:	d807      	bhi.n	80066c0 <_printf_i+0x28>
 80066b0:	2f62      	cmp	r7, #98	@ 0x62
 80066b2:	d80a      	bhi.n	80066ca <_printf_i+0x32>
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	f000 80d1 	beq.w	800685c <_printf_i+0x1c4>
 80066ba:	2f58      	cmp	r7, #88	@ 0x58
 80066bc:	f000 80b8 	beq.w	8006830 <_printf_i+0x198>
 80066c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066c8:	e03a      	b.n	8006740 <_printf_i+0xa8>
 80066ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066ce:	2b15      	cmp	r3, #21
 80066d0:	d8f6      	bhi.n	80066c0 <_printf_i+0x28>
 80066d2:	a101      	add	r1, pc, #4	@ (adr r1, 80066d8 <_printf_i+0x40>)
 80066d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006745 	.word	0x08006745
 80066e0:	080066c1 	.word	0x080066c1
 80066e4:	080066c1 	.word	0x080066c1
 80066e8:	080066c1 	.word	0x080066c1
 80066ec:	080066c1 	.word	0x080066c1
 80066f0:	08006745 	.word	0x08006745
 80066f4:	080066c1 	.word	0x080066c1
 80066f8:	080066c1 	.word	0x080066c1
 80066fc:	080066c1 	.word	0x080066c1
 8006700:	080066c1 	.word	0x080066c1
 8006704:	08006843 	.word	0x08006843
 8006708:	0800676f 	.word	0x0800676f
 800670c:	080067fd 	.word	0x080067fd
 8006710:	080066c1 	.word	0x080066c1
 8006714:	080066c1 	.word	0x080066c1
 8006718:	08006865 	.word	0x08006865
 800671c:	080066c1 	.word	0x080066c1
 8006720:	0800676f 	.word	0x0800676f
 8006724:	080066c1 	.word	0x080066c1
 8006728:	080066c1 	.word	0x080066c1
 800672c:	08006805 	.word	0x08006805
 8006730:	6833      	ldr	r3, [r6, #0]
 8006732:	1d1a      	adds	r2, r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6032      	str	r2, [r6, #0]
 8006738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800673c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006740:	2301      	movs	r3, #1
 8006742:	e09c      	b.n	800687e <_printf_i+0x1e6>
 8006744:	6833      	ldr	r3, [r6, #0]
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	1d19      	adds	r1, r3, #4
 800674a:	6031      	str	r1, [r6, #0]
 800674c:	0606      	lsls	r6, r0, #24
 800674e:	d501      	bpl.n	8006754 <_printf_i+0xbc>
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	e003      	b.n	800675c <_printf_i+0xc4>
 8006754:	0645      	lsls	r5, r0, #25
 8006756:	d5fb      	bpl.n	8006750 <_printf_i+0xb8>
 8006758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800675c:	2d00      	cmp	r5, #0
 800675e:	da03      	bge.n	8006768 <_printf_i+0xd0>
 8006760:	232d      	movs	r3, #45	@ 0x2d
 8006762:	426d      	negs	r5, r5
 8006764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006768:	4858      	ldr	r0, [pc, #352]	@ (80068cc <_printf_i+0x234>)
 800676a:	230a      	movs	r3, #10
 800676c:	e011      	b.n	8006792 <_printf_i+0xfa>
 800676e:	6821      	ldr	r1, [r4, #0]
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	0608      	lsls	r0, r1, #24
 8006774:	f853 5b04 	ldr.w	r5, [r3], #4
 8006778:	d402      	bmi.n	8006780 <_printf_i+0xe8>
 800677a:	0649      	lsls	r1, r1, #25
 800677c:	bf48      	it	mi
 800677e:	b2ad      	uxthmi	r5, r5
 8006780:	2f6f      	cmp	r7, #111	@ 0x6f
 8006782:	4852      	ldr	r0, [pc, #328]	@ (80068cc <_printf_i+0x234>)
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	bf14      	ite	ne
 8006788:	230a      	movne	r3, #10
 800678a:	2308      	moveq	r3, #8
 800678c:	2100      	movs	r1, #0
 800678e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006792:	6866      	ldr	r6, [r4, #4]
 8006794:	60a6      	str	r6, [r4, #8]
 8006796:	2e00      	cmp	r6, #0
 8006798:	db05      	blt.n	80067a6 <_printf_i+0x10e>
 800679a:	6821      	ldr	r1, [r4, #0]
 800679c:	432e      	orrs	r6, r5
 800679e:	f021 0104 	bic.w	r1, r1, #4
 80067a2:	6021      	str	r1, [r4, #0]
 80067a4:	d04b      	beq.n	800683e <_printf_i+0x1a6>
 80067a6:	4616      	mov	r6, r2
 80067a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ac:	fb03 5711 	mls	r7, r3, r1, r5
 80067b0:	5dc7      	ldrb	r7, [r0, r7]
 80067b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067b6:	462f      	mov	r7, r5
 80067b8:	42bb      	cmp	r3, r7
 80067ba:	460d      	mov	r5, r1
 80067bc:	d9f4      	bls.n	80067a8 <_printf_i+0x110>
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d10b      	bne.n	80067da <_printf_i+0x142>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	07df      	lsls	r7, r3, #31
 80067c6:	d508      	bpl.n	80067da <_printf_i+0x142>
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	6861      	ldr	r1, [r4, #4]
 80067cc:	4299      	cmp	r1, r3
 80067ce:	bfde      	ittt	le
 80067d0:	2330      	movle	r3, #48	@ 0x30
 80067d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067da:	1b92      	subs	r2, r2, r6
 80067dc:	6122      	str	r2, [r4, #16]
 80067de:	f8cd a000 	str.w	sl, [sp]
 80067e2:	464b      	mov	r3, r9
 80067e4:	aa03      	add	r2, sp, #12
 80067e6:	4621      	mov	r1, r4
 80067e8:	4640      	mov	r0, r8
 80067ea:	f7ff fee7 	bl	80065bc <_printf_common>
 80067ee:	3001      	adds	r0, #1
 80067f0:	d14a      	bne.n	8006888 <_printf_i+0x1f0>
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	b004      	add	sp, #16
 80067f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	f043 0320 	orr.w	r3, r3, #32
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	4832      	ldr	r0, [pc, #200]	@ (80068d0 <_printf_i+0x238>)
 8006806:	2778      	movs	r7, #120	@ 0x78
 8006808:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	6831      	ldr	r1, [r6, #0]
 8006810:	061f      	lsls	r7, r3, #24
 8006812:	f851 5b04 	ldr.w	r5, [r1], #4
 8006816:	d402      	bmi.n	800681e <_printf_i+0x186>
 8006818:	065f      	lsls	r7, r3, #25
 800681a:	bf48      	it	mi
 800681c:	b2ad      	uxthmi	r5, r5
 800681e:	6031      	str	r1, [r6, #0]
 8006820:	07d9      	lsls	r1, r3, #31
 8006822:	bf44      	itt	mi
 8006824:	f043 0320 	orrmi.w	r3, r3, #32
 8006828:	6023      	strmi	r3, [r4, #0]
 800682a:	b11d      	cbz	r5, 8006834 <_printf_i+0x19c>
 800682c:	2310      	movs	r3, #16
 800682e:	e7ad      	b.n	800678c <_printf_i+0xf4>
 8006830:	4826      	ldr	r0, [pc, #152]	@ (80068cc <_printf_i+0x234>)
 8006832:	e7e9      	b.n	8006808 <_printf_i+0x170>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	f023 0320 	bic.w	r3, r3, #32
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	e7f6      	b.n	800682c <_printf_i+0x194>
 800683e:	4616      	mov	r6, r2
 8006840:	e7bd      	b.n	80067be <_printf_i+0x126>
 8006842:	6833      	ldr	r3, [r6, #0]
 8006844:	6825      	ldr	r5, [r4, #0]
 8006846:	6961      	ldr	r1, [r4, #20]
 8006848:	1d18      	adds	r0, r3, #4
 800684a:	6030      	str	r0, [r6, #0]
 800684c:	062e      	lsls	r6, r5, #24
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	d501      	bpl.n	8006856 <_printf_i+0x1be>
 8006852:	6019      	str	r1, [r3, #0]
 8006854:	e002      	b.n	800685c <_printf_i+0x1c4>
 8006856:	0668      	lsls	r0, r5, #25
 8006858:	d5fb      	bpl.n	8006852 <_printf_i+0x1ba>
 800685a:	8019      	strh	r1, [r3, #0]
 800685c:	2300      	movs	r3, #0
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	4616      	mov	r6, r2
 8006862:	e7bc      	b.n	80067de <_printf_i+0x146>
 8006864:	6833      	ldr	r3, [r6, #0]
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	6032      	str	r2, [r6, #0]
 800686a:	681e      	ldr	r6, [r3, #0]
 800686c:	6862      	ldr	r2, [r4, #4]
 800686e:	2100      	movs	r1, #0
 8006870:	4630      	mov	r0, r6
 8006872:	f7f9 fccd 	bl	8000210 <memchr>
 8006876:	b108      	cbz	r0, 800687c <_printf_i+0x1e4>
 8006878:	1b80      	subs	r0, r0, r6
 800687a:	6060      	str	r0, [r4, #4]
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	2300      	movs	r3, #0
 8006882:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006886:	e7aa      	b.n	80067de <_printf_i+0x146>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	4632      	mov	r2, r6
 800688c:	4649      	mov	r1, r9
 800688e:	4640      	mov	r0, r8
 8006890:	47d0      	blx	sl
 8006892:	3001      	adds	r0, #1
 8006894:	d0ad      	beq.n	80067f2 <_printf_i+0x15a>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	079b      	lsls	r3, r3, #30
 800689a:	d413      	bmi.n	80068c4 <_printf_i+0x22c>
 800689c:	68e0      	ldr	r0, [r4, #12]
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	4298      	cmp	r0, r3
 80068a2:	bfb8      	it	lt
 80068a4:	4618      	movlt	r0, r3
 80068a6:	e7a6      	b.n	80067f6 <_printf_i+0x15e>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4632      	mov	r2, r6
 80068ac:	4649      	mov	r1, r9
 80068ae:	4640      	mov	r0, r8
 80068b0:	47d0      	blx	sl
 80068b2:	3001      	adds	r0, #1
 80068b4:	d09d      	beq.n	80067f2 <_printf_i+0x15a>
 80068b6:	3501      	adds	r5, #1
 80068b8:	68e3      	ldr	r3, [r4, #12]
 80068ba:	9903      	ldr	r1, [sp, #12]
 80068bc:	1a5b      	subs	r3, r3, r1
 80068be:	42ab      	cmp	r3, r5
 80068c0:	dcf2      	bgt.n	80068a8 <_printf_i+0x210>
 80068c2:	e7eb      	b.n	800689c <_printf_i+0x204>
 80068c4:	2500      	movs	r5, #0
 80068c6:	f104 0619 	add.w	r6, r4, #25
 80068ca:	e7f5      	b.n	80068b8 <_printf_i+0x220>
 80068cc:	08008e6e 	.word	0x08008e6e
 80068d0:	08008e7f 	.word	0x08008e7f

080068d4 <std>:
 80068d4:	2300      	movs	r3, #0
 80068d6:	b510      	push	{r4, lr}
 80068d8:	4604      	mov	r4, r0
 80068da:	e9c0 3300 	strd	r3, r3, [r0]
 80068de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068e2:	6083      	str	r3, [r0, #8]
 80068e4:	8181      	strh	r1, [r0, #12]
 80068e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068e8:	81c2      	strh	r2, [r0, #14]
 80068ea:	6183      	str	r3, [r0, #24]
 80068ec:	4619      	mov	r1, r3
 80068ee:	2208      	movs	r2, #8
 80068f0:	305c      	adds	r0, #92	@ 0x5c
 80068f2:	f000 f931 	bl	8006b58 <memset>
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <std+0x58>)
 80068f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80068fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <std+0x5c>)
 80068fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <std+0x60>)
 8006900:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <std+0x64>)
 8006904:	6323      	str	r3, [r4, #48]	@ 0x30
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <std+0x68>)
 8006908:	6224      	str	r4, [r4, #32]
 800690a:	429c      	cmp	r4, r3
 800690c:	d006      	beq.n	800691c <std+0x48>
 800690e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006912:	4294      	cmp	r4, r2
 8006914:	d002      	beq.n	800691c <std+0x48>
 8006916:	33d0      	adds	r3, #208	@ 0xd0
 8006918:	429c      	cmp	r4, r3
 800691a:	d105      	bne.n	8006928 <std+0x54>
 800691c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006924:	f000 b994 	b.w	8006c50 <__retarget_lock_init_recursive>
 8006928:	bd10      	pop	{r4, pc}
 800692a:	bf00      	nop
 800692c:	08006a59 	.word	0x08006a59
 8006930:	08006a7b 	.word	0x08006a7b
 8006934:	08006ab3 	.word	0x08006ab3
 8006938:	08006ad7 	.word	0x08006ad7
 800693c:	20004d88 	.word	0x20004d88

08006940 <stdio_exit_handler>:
 8006940:	4a02      	ldr	r2, [pc, #8]	@ (800694c <stdio_exit_handler+0xc>)
 8006942:	4903      	ldr	r1, [pc, #12]	@ (8006950 <stdio_exit_handler+0x10>)
 8006944:	4803      	ldr	r0, [pc, #12]	@ (8006954 <stdio_exit_handler+0x14>)
 8006946:	f000 b869 	b.w	8006a1c <_fwalk_sglue>
 800694a:	bf00      	nop
 800694c:	20000014 	.word	0x20000014
 8006950:	080085d5 	.word	0x080085d5
 8006954:	20000024 	.word	0x20000024

08006958 <cleanup_stdio>:
 8006958:	6841      	ldr	r1, [r0, #4]
 800695a:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <cleanup_stdio+0x34>)
 800695c:	4299      	cmp	r1, r3
 800695e:	b510      	push	{r4, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	d001      	beq.n	8006968 <cleanup_stdio+0x10>
 8006964:	f001 fe36 	bl	80085d4 <_fflush_r>
 8006968:	68a1      	ldr	r1, [r4, #8]
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <cleanup_stdio+0x38>)
 800696c:	4299      	cmp	r1, r3
 800696e:	d002      	beq.n	8006976 <cleanup_stdio+0x1e>
 8006970:	4620      	mov	r0, r4
 8006972:	f001 fe2f 	bl	80085d4 <_fflush_r>
 8006976:	68e1      	ldr	r1, [r4, #12]
 8006978:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <cleanup_stdio+0x3c>)
 800697a:	4299      	cmp	r1, r3
 800697c:	d004      	beq.n	8006988 <cleanup_stdio+0x30>
 800697e:	4620      	mov	r0, r4
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	f001 be26 	b.w	80085d4 <_fflush_r>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	bf00      	nop
 800698c:	20004d88 	.word	0x20004d88
 8006990:	20004df0 	.word	0x20004df0
 8006994:	20004e58 	.word	0x20004e58

08006998 <global_stdio_init.part.0>:
 8006998:	b510      	push	{r4, lr}
 800699a:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <global_stdio_init.part.0+0x30>)
 800699c:	4c0b      	ldr	r4, [pc, #44]	@ (80069cc <global_stdio_init.part.0+0x34>)
 800699e:	4a0c      	ldr	r2, [pc, #48]	@ (80069d0 <global_stdio_init.part.0+0x38>)
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	4620      	mov	r0, r4
 80069a4:	2200      	movs	r2, #0
 80069a6:	2104      	movs	r1, #4
 80069a8:	f7ff ff94 	bl	80068d4 <std>
 80069ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069b0:	2201      	movs	r2, #1
 80069b2:	2109      	movs	r1, #9
 80069b4:	f7ff ff8e 	bl	80068d4 <std>
 80069b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069bc:	2202      	movs	r2, #2
 80069be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c2:	2112      	movs	r1, #18
 80069c4:	f7ff bf86 	b.w	80068d4 <std>
 80069c8:	20004ec0 	.word	0x20004ec0
 80069cc:	20004d88 	.word	0x20004d88
 80069d0:	08006941 	.word	0x08006941

080069d4 <__sfp_lock_acquire>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__sfp_lock_acquire+0x8>)
 80069d6:	f000 b93c 	b.w	8006c52 <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	20004ec9 	.word	0x20004ec9

080069e0 <__sfp_lock_release>:
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <__sfp_lock_release+0x8>)
 80069e2:	f000 b937 	b.w	8006c54 <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	20004ec9 	.word	0x20004ec9

080069ec <__sinit>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4604      	mov	r4, r0
 80069f0:	f7ff fff0 	bl	80069d4 <__sfp_lock_acquire>
 80069f4:	6a23      	ldr	r3, [r4, #32]
 80069f6:	b11b      	cbz	r3, 8006a00 <__sinit+0x14>
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	f7ff bff0 	b.w	80069e0 <__sfp_lock_release>
 8006a00:	4b04      	ldr	r3, [pc, #16]	@ (8006a14 <__sinit+0x28>)
 8006a02:	6223      	str	r3, [r4, #32]
 8006a04:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <__sinit+0x2c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f5      	bne.n	80069f8 <__sinit+0xc>
 8006a0c:	f7ff ffc4 	bl	8006998 <global_stdio_init.part.0>
 8006a10:	e7f2      	b.n	80069f8 <__sinit+0xc>
 8006a12:	bf00      	nop
 8006a14:	08006959 	.word	0x08006959
 8006a18:	20004ec0 	.word	0x20004ec0

08006a1c <_fwalk_sglue>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4607      	mov	r7, r0
 8006a22:	4688      	mov	r8, r1
 8006a24:	4614      	mov	r4, r2
 8006a26:	2600      	movs	r6, #0
 8006a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a30:	d505      	bpl.n	8006a3e <_fwalk_sglue+0x22>
 8006a32:	6824      	ldr	r4, [r4, #0]
 8006a34:	2c00      	cmp	r4, #0
 8006a36:	d1f7      	bne.n	8006a28 <_fwalk_sglue+0xc>
 8006a38:	4630      	mov	r0, r6
 8006a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d907      	bls.n	8006a54 <_fwalk_sglue+0x38>
 8006a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	d003      	beq.n	8006a54 <_fwalk_sglue+0x38>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4638      	mov	r0, r7
 8006a50:	47c0      	blx	r8
 8006a52:	4306      	orrs	r6, r0
 8006a54:	3568      	adds	r5, #104	@ 0x68
 8006a56:	e7e9      	b.n	8006a2c <_fwalk_sglue+0x10>

08006a58 <__sread>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	f000 f8a8 	bl	8006bb4 <_read_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	bfab      	itete	ge
 8006a68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a6c:	181b      	addge	r3, r3, r0
 8006a6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a72:	bfac      	ite	ge
 8006a74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a76:	81a3      	strhlt	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__swrite>:
 8006a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	461f      	mov	r7, r3
 8006a80:	898b      	ldrh	r3, [r1, #12]
 8006a82:	05db      	lsls	r3, r3, #23
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4616      	mov	r6, r2
 8006a8a:	d505      	bpl.n	8006a98 <__swrite+0x1e>
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	2302      	movs	r3, #2
 8006a92:	2200      	movs	r2, #0
 8006a94:	f000 f87c 	bl	8006b90 <_lseek_r>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aae:	f000 b893 	b.w	8006bd8 <_write_r>

08006ab2 <__sseek>:
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aba:	f000 f869 	bl	8006b90 <_lseek_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	bf15      	itete	ne
 8006ac4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ac6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006aca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ace:	81a3      	strheq	r3, [r4, #12]
 8006ad0:	bf18      	it	ne
 8006ad2:	81a3      	strhne	r3, [r4, #12]
 8006ad4:	bd10      	pop	{r4, pc}

08006ad6 <__sclose>:
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 b849 	b.w	8006b70 <_close_r>

08006ade <_vsniprintf_r>:
 8006ade:	b530      	push	{r4, r5, lr}
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	b09b      	sub	sp, #108	@ 0x6c
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	da05      	bge.n	8006af8 <_vsniprintf_r+0x1a>
 8006aec:	238b      	movs	r3, #139	@ 0x8b
 8006aee:	6003      	str	r3, [r0, #0]
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295
 8006af4:	b01b      	add	sp, #108	@ 0x6c
 8006af6:	bd30      	pop	{r4, r5, pc}
 8006af8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006afc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b06:	bf14      	ite	ne
 8006b08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b0c:	4623      	moveq	r3, r4
 8006b0e:	9302      	str	r3, [sp, #8]
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b16:	9100      	str	r1, [sp, #0]
 8006b18:	9104      	str	r1, [sp, #16]
 8006b1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006b1e:	4669      	mov	r1, sp
 8006b20:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006b22:	f001 fbd7 	bl	80082d4 <_svfiprintf_r>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	bfbc      	itt	lt
 8006b2a:	238b      	movlt	r3, #139	@ 0x8b
 8006b2c:	602b      	strlt	r3, [r5, #0]
 8006b2e:	2c00      	cmp	r4, #0
 8006b30:	d0e0      	beq.n	8006af4 <_vsniprintf_r+0x16>
 8006b32:	9b00      	ldr	r3, [sp, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	e7dc      	b.n	8006af4 <_vsniprintf_r+0x16>
	...

08006b3c <vsniprintf>:
 8006b3c:	b507      	push	{r0, r1, r2, lr}
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	460a      	mov	r2, r1
 8006b44:	4601      	mov	r1, r0
 8006b46:	4803      	ldr	r0, [pc, #12]	@ (8006b54 <vsniprintf+0x18>)
 8006b48:	6800      	ldr	r0, [r0, #0]
 8006b4a:	f7ff ffc8 	bl	8006ade <_vsniprintf_r>
 8006b4e:	b003      	add	sp, #12
 8006b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b54:	20000020 	.word	0x20000020

08006b58 <memset>:
 8006b58:	4402      	add	r2, r0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	f803 1b01 	strb.w	r1, [r3], #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <_localeconv_r>:
 8006b68:	4800      	ldr	r0, [pc, #0]	@ (8006b6c <_localeconv_r+0x4>)
 8006b6a:	4770      	bx	lr
 8006b6c:	20000160 	.word	0x20000160

08006b70 <_close_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4d06      	ldr	r5, [pc, #24]	@ (8006b8c <_close_r+0x1c>)
 8006b74:	2300      	movs	r3, #0
 8006b76:	4604      	mov	r4, r0
 8006b78:	4608      	mov	r0, r1
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	f7fa ff48 	bl	8001a10 <_close>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_close_r+0x1a>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_close_r+0x1a>
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	20004ec4 	.word	0x20004ec4

08006b90 <_lseek_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4d07      	ldr	r5, [pc, #28]	@ (8006bb0 <_lseek_r+0x20>)
 8006b94:	4604      	mov	r4, r0
 8006b96:	4608      	mov	r0, r1
 8006b98:	4611      	mov	r1, r2
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	602a      	str	r2, [r5, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f7fa ff5d 	bl	8001a5e <_lseek>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_lseek_r+0x1e>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_lseek_r+0x1e>
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	20004ec4 	.word	0x20004ec4

08006bb4 <_read_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4d07      	ldr	r5, [pc, #28]	@ (8006bd4 <_read_r+0x20>)
 8006bb8:	4604      	mov	r4, r0
 8006bba:	4608      	mov	r0, r1
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	602a      	str	r2, [r5, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f7fa feeb 	bl	800199e <_read>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_read_r+0x1e>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_read_r+0x1e>
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20004ec4 	.word	0x20004ec4

08006bd8 <_write_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d07      	ldr	r5, [pc, #28]	@ (8006bf8 <_write_r+0x20>)
 8006bdc:	4604      	mov	r4, r0
 8006bde:	4608      	mov	r0, r1
 8006be0:	4611      	mov	r1, r2
 8006be2:	2200      	movs	r2, #0
 8006be4:	602a      	str	r2, [r5, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f7fa fef6 	bl	80019d8 <_write>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_write_r+0x1e>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_write_r+0x1e>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20004ec4 	.word	0x20004ec4

08006bfc <__errno>:
 8006bfc:	4b01      	ldr	r3, [pc, #4]	@ (8006c04 <__errno+0x8>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000020 	.word	0x20000020

08006c08 <__libc_init_array>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c40 <__libc_init_array+0x38>)
 8006c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c44 <__libc_init_array+0x3c>)
 8006c0e:	1b64      	subs	r4, r4, r5
 8006c10:	10a4      	asrs	r4, r4, #2
 8006c12:	2600      	movs	r6, #0
 8006c14:	42a6      	cmp	r6, r4
 8006c16:	d109      	bne.n	8006c2c <__libc_init_array+0x24>
 8006c18:	4d0b      	ldr	r5, [pc, #44]	@ (8006c48 <__libc_init_array+0x40>)
 8006c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c4c <__libc_init_array+0x44>)
 8006c1c:	f002 f86a 	bl	8008cf4 <_init>
 8006c20:	1b64      	subs	r4, r4, r5
 8006c22:	10a4      	asrs	r4, r4, #2
 8006c24:	2600      	movs	r6, #0
 8006c26:	42a6      	cmp	r6, r4
 8006c28:	d105      	bne.n	8006c36 <__libc_init_array+0x2e>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c30:	4798      	blx	r3
 8006c32:	3601      	adds	r6, #1
 8006c34:	e7ee      	b.n	8006c14 <__libc_init_array+0xc>
 8006c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3a:	4798      	blx	r3
 8006c3c:	3601      	adds	r6, #1
 8006c3e:	e7f2      	b.n	8006c26 <__libc_init_array+0x1e>
 8006c40:	080091dc 	.word	0x080091dc
 8006c44:	080091dc 	.word	0x080091dc
 8006c48:	080091dc 	.word	0x080091dc
 8006c4c:	080091e0 	.word	0x080091e0

08006c50 <__retarget_lock_init_recursive>:
 8006c50:	4770      	bx	lr

08006c52 <__retarget_lock_acquire_recursive>:
 8006c52:	4770      	bx	lr

08006c54 <__retarget_lock_release_recursive>:
 8006c54:	4770      	bx	lr

08006c56 <memcpy>:
 8006c56:	440a      	add	r2, r1
 8006c58:	4291      	cmp	r1, r2
 8006c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c5e:	d100      	bne.n	8006c62 <memcpy+0xc>
 8006c60:	4770      	bx	lr
 8006c62:	b510      	push	{r4, lr}
 8006c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6c:	4291      	cmp	r1, r2
 8006c6e:	d1f9      	bne.n	8006c64 <memcpy+0xe>
 8006c70:	bd10      	pop	{r4, pc}

08006c72 <quorem>:
 8006c72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c76:	6903      	ldr	r3, [r0, #16]
 8006c78:	690c      	ldr	r4, [r1, #16]
 8006c7a:	42a3      	cmp	r3, r4
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	db7e      	blt.n	8006d7e <quorem+0x10c>
 8006c80:	3c01      	subs	r4, #1
 8006c82:	f101 0814 	add.w	r8, r1, #20
 8006c86:	00a3      	lsls	r3, r4, #2
 8006c88:	f100 0514 	add.w	r5, r0, #20
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ca4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ca8:	d32e      	bcc.n	8006d08 <quorem+0x96>
 8006caa:	f04f 0a00 	mov.w	sl, #0
 8006cae:	46c4      	mov	ip, r8
 8006cb0:	46ae      	mov	lr, r5
 8006cb2:	46d3      	mov	fp, sl
 8006cb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cb8:	b298      	uxth	r0, r3
 8006cba:	fb06 a000 	mla	r0, r6, r0, sl
 8006cbe:	0c02      	lsrs	r2, r0, #16
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	fb06 2303 	mla	r3, r6, r3, r2
 8006cc6:	f8de 2000 	ldr.w	r2, [lr]
 8006cca:	b280      	uxth	r0, r0
 8006ccc:	b292      	uxth	r2, r2
 8006cce:	1a12      	subs	r2, r2, r0
 8006cd0:	445a      	add	r2, fp
 8006cd2:	f8de 0000 	ldr.w	r0, [lr]
 8006cd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ce0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ce4:	b292      	uxth	r2, r2
 8006ce6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cea:	45e1      	cmp	r9, ip
 8006cec:	f84e 2b04 	str.w	r2, [lr], #4
 8006cf0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006cf4:	d2de      	bcs.n	8006cb4 <quorem+0x42>
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	58eb      	ldr	r3, [r5, r3]
 8006cfa:	b92b      	cbnz	r3, 8006d08 <quorem+0x96>
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	3b04      	subs	r3, #4
 8006d00:	429d      	cmp	r5, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	d32f      	bcc.n	8006d66 <quorem+0xf4>
 8006d06:	613c      	str	r4, [r7, #16]
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f001 f97f 	bl	800800c <__mcmp>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	db25      	blt.n	8006d5e <quorem+0xec>
 8006d12:	4629      	mov	r1, r5
 8006d14:	2000      	movs	r0, #0
 8006d16:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d1a:	f8d1 c000 	ldr.w	ip, [r1]
 8006d1e:	fa1f fe82 	uxth.w	lr, r2
 8006d22:	fa1f f38c 	uxth.w	r3, ip
 8006d26:	eba3 030e 	sub.w	r3, r3, lr
 8006d2a:	4403      	add	r3, r0
 8006d2c:	0c12      	lsrs	r2, r2, #16
 8006d2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d3c:	45c1      	cmp	r9, r8
 8006d3e:	f841 3b04 	str.w	r3, [r1], #4
 8006d42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d46:	d2e6      	bcs.n	8006d16 <quorem+0xa4>
 8006d48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d50:	b922      	cbnz	r2, 8006d5c <quorem+0xea>
 8006d52:	3b04      	subs	r3, #4
 8006d54:	429d      	cmp	r5, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	d30b      	bcc.n	8006d72 <quorem+0x100>
 8006d5a:	613c      	str	r4, [r7, #16]
 8006d5c:	3601      	adds	r6, #1
 8006d5e:	4630      	mov	r0, r6
 8006d60:	b003      	add	sp, #12
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	3b04      	subs	r3, #4
 8006d6a:	2a00      	cmp	r2, #0
 8006d6c:	d1cb      	bne.n	8006d06 <quorem+0x94>
 8006d6e:	3c01      	subs	r4, #1
 8006d70:	e7c6      	b.n	8006d00 <quorem+0x8e>
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	3b04      	subs	r3, #4
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d1ef      	bne.n	8006d5a <quorem+0xe8>
 8006d7a:	3c01      	subs	r4, #1
 8006d7c:	e7ea      	b.n	8006d54 <quorem+0xe2>
 8006d7e:	2000      	movs	r0, #0
 8006d80:	e7ee      	b.n	8006d60 <quorem+0xee>
 8006d82:	0000      	movs	r0, r0
 8006d84:	0000      	movs	r0, r0
	...

08006d88 <_dtoa_r>:
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	69c7      	ldr	r7, [r0, #28]
 8006d8e:	b097      	sub	sp, #92	@ 0x5c
 8006d90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006d94:	ec55 4b10 	vmov	r4, r5, d0
 8006d98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006d9a:	9107      	str	r1, [sp, #28]
 8006d9c:	4681      	mov	r9, r0
 8006d9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006da0:	9311      	str	r3, [sp, #68]	@ 0x44
 8006da2:	b97f      	cbnz	r7, 8006dc4 <_dtoa_r+0x3c>
 8006da4:	2010      	movs	r0, #16
 8006da6:	f000 fe09 	bl	80079bc <malloc>
 8006daa:	4602      	mov	r2, r0
 8006dac:	f8c9 001c 	str.w	r0, [r9, #28]
 8006db0:	b920      	cbnz	r0, 8006dbc <_dtoa_r+0x34>
 8006db2:	4ba9      	ldr	r3, [pc, #676]	@ (8007058 <_dtoa_r+0x2d0>)
 8006db4:	21ef      	movs	r1, #239	@ 0xef
 8006db6:	48a9      	ldr	r0, [pc, #676]	@ (800705c <_dtoa_r+0x2d4>)
 8006db8:	f001 fc5e 	bl	8008678 <__assert_func>
 8006dbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006dc0:	6007      	str	r7, [r0, #0]
 8006dc2:	60c7      	str	r7, [r0, #12]
 8006dc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006dc8:	6819      	ldr	r1, [r3, #0]
 8006dca:	b159      	cbz	r1, 8006de4 <_dtoa_r+0x5c>
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	604a      	str	r2, [r1, #4]
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4093      	lsls	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
 8006dd6:	4648      	mov	r0, r9
 8006dd8:	f000 fee6 	bl	8007ba8 <_Bfree>
 8006ddc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	1e2b      	subs	r3, r5, #0
 8006de6:	bfb9      	ittee	lt
 8006de8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006dec:	9305      	strlt	r3, [sp, #20]
 8006dee:	2300      	movge	r3, #0
 8006df0:	6033      	strge	r3, [r6, #0]
 8006df2:	9f05      	ldr	r7, [sp, #20]
 8006df4:	4b9a      	ldr	r3, [pc, #616]	@ (8007060 <_dtoa_r+0x2d8>)
 8006df6:	bfbc      	itt	lt
 8006df8:	2201      	movlt	r2, #1
 8006dfa:	6032      	strlt	r2, [r6, #0]
 8006dfc:	43bb      	bics	r3, r7
 8006dfe:	d112      	bne.n	8006e26 <_dtoa_r+0x9e>
 8006e00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e0c:	4323      	orrs	r3, r4
 8006e0e:	f000 855a 	beq.w	80078c6 <_dtoa_r+0xb3e>
 8006e12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007074 <_dtoa_r+0x2ec>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 855c 	beq.w	80078d6 <_dtoa_r+0xb4e>
 8006e1e:	f10a 0303 	add.w	r3, sl, #3
 8006e22:	f000 bd56 	b.w	80078d2 <_dtoa_r+0xb4a>
 8006e26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	ec51 0b17 	vmov	r0, r1, d7
 8006e30:	2300      	movs	r3, #0
 8006e32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006e36:	f7f9 fe67 	bl	8000b08 <__aeabi_dcmpeq>
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	b158      	cbz	r0, 8006e56 <_dtoa_r+0xce>
 8006e3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e40:	2301      	movs	r3, #1
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e46:	b113      	cbz	r3, 8006e4e <_dtoa_r+0xc6>
 8006e48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006e4a:	4b86      	ldr	r3, [pc, #536]	@ (8007064 <_dtoa_r+0x2dc>)
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007078 <_dtoa_r+0x2f0>
 8006e52:	f000 bd40 	b.w	80078d6 <_dtoa_r+0xb4e>
 8006e56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006e5a:	aa14      	add	r2, sp, #80	@ 0x50
 8006e5c:	a915      	add	r1, sp, #84	@ 0x54
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f001 f984 	bl	800816c <__d2b>
 8006e64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e68:	9002      	str	r0, [sp, #8]
 8006e6a:	2e00      	cmp	r6, #0
 8006e6c:	d078      	beq.n	8006f60 <_dtoa_r+0x1d8>
 8006e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e88:	4619      	mov	r1, r3
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4b76      	ldr	r3, [pc, #472]	@ (8007068 <_dtoa_r+0x2e0>)
 8006e8e:	f7f9 fa1b 	bl	80002c8 <__aeabi_dsub>
 8006e92:	a36b      	add	r3, pc, #428	@ (adr r3, 8007040 <_dtoa_r+0x2b8>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f7f9 fbce 	bl	8000638 <__aeabi_dmul>
 8006e9c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007048 <_dtoa_r+0x2c0>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f7f9 fa13 	bl	80002cc <__adddf3>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	460d      	mov	r5, r1
 8006eac:	f7f9 fb5a 	bl	8000564 <__aeabi_i2d>
 8006eb0:	a367      	add	r3, pc, #412	@ (adr r3, 8007050 <_dtoa_r+0x2c8>)
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f7f9 fbbf 	bl	8000638 <__aeabi_dmul>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fa03 	bl	80002cc <__adddf3>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	460d      	mov	r5, r1
 8006eca:	f7f9 fe65 	bl	8000b98 <__aeabi_d2iz>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	f7f9 fe20 	bl	8000b1c <__aeabi_dcmplt>
 8006edc:	b140      	cbz	r0, 8006ef0 <_dtoa_r+0x168>
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f7f9 fb40 	bl	8000564 <__aeabi_i2d>
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	f7f9 fe0e 	bl	8000b08 <__aeabi_dcmpeq>
 8006eec:	b900      	cbnz	r0, 8006ef0 <_dtoa_r+0x168>
 8006eee:	3f01      	subs	r7, #1
 8006ef0:	2f16      	cmp	r7, #22
 8006ef2:	d852      	bhi.n	8006f9a <_dtoa_r+0x212>
 8006ef4:	4b5d      	ldr	r3, [pc, #372]	@ (800706c <_dtoa_r+0x2e4>)
 8006ef6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f02:	f7f9 fe0b 	bl	8000b1c <__aeabi_dcmplt>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d049      	beq.n	8006f9e <_dtoa_r+0x216>
 8006f0a:	3f01      	subs	r7, #1
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f12:	1b9b      	subs	r3, r3, r6
 8006f14:	1e5a      	subs	r2, r3, #1
 8006f16:	bf45      	ittet	mi
 8006f18:	f1c3 0301 	rsbmi	r3, r3, #1
 8006f1c:	9300      	strmi	r3, [sp, #0]
 8006f1e:	2300      	movpl	r3, #0
 8006f20:	2300      	movmi	r3, #0
 8006f22:	9206      	str	r2, [sp, #24]
 8006f24:	bf54      	ite	pl
 8006f26:	9300      	strpl	r3, [sp, #0]
 8006f28:	9306      	strmi	r3, [sp, #24]
 8006f2a:	2f00      	cmp	r7, #0
 8006f2c:	db39      	blt.n	8006fa2 <_dtoa_r+0x21a>
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	970d      	str	r7, [sp, #52]	@ 0x34
 8006f32:	443b      	add	r3, r7
 8006f34:	9306      	str	r3, [sp, #24]
 8006f36:	2300      	movs	r3, #0
 8006f38:	9308      	str	r3, [sp, #32]
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	2b09      	cmp	r3, #9
 8006f3e:	d863      	bhi.n	8007008 <_dtoa_r+0x280>
 8006f40:	2b05      	cmp	r3, #5
 8006f42:	bfc4      	itt	gt
 8006f44:	3b04      	subgt	r3, #4
 8006f46:	9307      	strgt	r3, [sp, #28]
 8006f48:	9b07      	ldr	r3, [sp, #28]
 8006f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8006f4e:	bfcc      	ite	gt
 8006f50:	2400      	movgt	r4, #0
 8006f52:	2401      	movle	r4, #1
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d863      	bhi.n	8007020 <_dtoa_r+0x298>
 8006f58:	e8df f003 	tbb	[pc, r3]
 8006f5c:	2b375452 	.word	0x2b375452
 8006f60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006f64:	441e      	add	r6, r3
 8006f66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	bfc1      	itttt	gt
 8006f6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f72:	409f      	lslgt	r7, r3
 8006f74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f7c:	bfd6      	itet	le
 8006f7e:	f1c3 0320 	rsble	r3, r3, #32
 8006f82:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f86:	fa04 f003 	lslle.w	r0, r4, r3
 8006f8a:	f7f9 fadb 	bl	8000544 <__aeabi_ui2d>
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f94:	3e01      	subs	r6, #1
 8006f96:	9212      	str	r2, [sp, #72]	@ 0x48
 8006f98:	e776      	b.n	8006e88 <_dtoa_r+0x100>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7b7      	b.n	8006f0e <_dtoa_r+0x186>
 8006f9e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006fa0:	e7b6      	b.n	8006f10 <_dtoa_r+0x188>
 8006fa2:	9b00      	ldr	r3, [sp, #0]
 8006fa4:	1bdb      	subs	r3, r3, r7
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	427b      	negs	r3, r7
 8006faa:	9308      	str	r3, [sp, #32]
 8006fac:	2300      	movs	r3, #0
 8006fae:	930d      	str	r3, [sp, #52]	@ 0x34
 8006fb0:	e7c3      	b.n	8006f3a <_dtoa_r+0x1b2>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fb8:	eb07 0b03 	add.w	fp, r7, r3
 8006fbc:	f10b 0301 	add.w	r3, fp, #1
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	9303      	str	r3, [sp, #12]
 8006fc4:	bfb8      	it	lt
 8006fc6:	2301      	movlt	r3, #1
 8006fc8:	e006      	b.n	8006fd8 <_dtoa_r+0x250>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	dd28      	ble.n	8007026 <_dtoa_r+0x29e>
 8006fd4:	469b      	mov	fp, r3
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	2204      	movs	r2, #4
 8006fe0:	f102 0514 	add.w	r5, r2, #20
 8006fe4:	429d      	cmp	r5, r3
 8006fe6:	d926      	bls.n	8007036 <_dtoa_r+0x2ae>
 8006fe8:	6041      	str	r1, [r0, #4]
 8006fea:	4648      	mov	r0, r9
 8006fec:	f000 fd9c 	bl	8007b28 <_Balloc>
 8006ff0:	4682      	mov	sl, r0
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d142      	bne.n	800707c <_dtoa_r+0x2f4>
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8007070 <_dtoa_r+0x2e8>)
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ffe:	e6da      	b.n	8006db6 <_dtoa_r+0x2e>
 8007000:	2300      	movs	r3, #0
 8007002:	e7e3      	b.n	8006fcc <_dtoa_r+0x244>
 8007004:	2300      	movs	r3, #0
 8007006:	e7d5      	b.n	8006fb4 <_dtoa_r+0x22c>
 8007008:	2401      	movs	r4, #1
 800700a:	2300      	movs	r3, #0
 800700c:	9307      	str	r3, [sp, #28]
 800700e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007010:	f04f 3bff 	mov.w	fp, #4294967295
 8007014:	2200      	movs	r2, #0
 8007016:	f8cd b00c 	str.w	fp, [sp, #12]
 800701a:	2312      	movs	r3, #18
 800701c:	920c      	str	r2, [sp, #48]	@ 0x30
 800701e:	e7db      	b.n	8006fd8 <_dtoa_r+0x250>
 8007020:	2301      	movs	r3, #1
 8007022:	9309      	str	r3, [sp, #36]	@ 0x24
 8007024:	e7f4      	b.n	8007010 <_dtoa_r+0x288>
 8007026:	f04f 0b01 	mov.w	fp, #1
 800702a:	f8cd b00c 	str.w	fp, [sp, #12]
 800702e:	465b      	mov	r3, fp
 8007030:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007034:	e7d0      	b.n	8006fd8 <_dtoa_r+0x250>
 8007036:	3101      	adds	r1, #1
 8007038:	0052      	lsls	r2, r2, #1
 800703a:	e7d1      	b.n	8006fe0 <_dtoa_r+0x258>
 800703c:	f3af 8000 	nop.w
 8007040:	636f4361 	.word	0x636f4361
 8007044:	3fd287a7 	.word	0x3fd287a7
 8007048:	8b60c8b3 	.word	0x8b60c8b3
 800704c:	3fc68a28 	.word	0x3fc68a28
 8007050:	509f79fb 	.word	0x509f79fb
 8007054:	3fd34413 	.word	0x3fd34413
 8007058:	08008e9d 	.word	0x08008e9d
 800705c:	08008eb4 	.word	0x08008eb4
 8007060:	7ff00000 	.word	0x7ff00000
 8007064:	08008e6d 	.word	0x08008e6d
 8007068:	3ff80000 	.word	0x3ff80000
 800706c:	08009008 	.word	0x08009008
 8007070:	08008f0c 	.word	0x08008f0c
 8007074:	08008e99 	.word	0x08008e99
 8007078:	08008e6c 	.word	0x08008e6c
 800707c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007080:	6018      	str	r0, [r3, #0]
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	2b0e      	cmp	r3, #14
 8007086:	f200 80a1 	bhi.w	80071cc <_dtoa_r+0x444>
 800708a:	2c00      	cmp	r4, #0
 800708c:	f000 809e 	beq.w	80071cc <_dtoa_r+0x444>
 8007090:	2f00      	cmp	r7, #0
 8007092:	dd33      	ble.n	80070fc <_dtoa_r+0x374>
 8007094:	4b9c      	ldr	r3, [pc, #624]	@ (8007308 <_dtoa_r+0x580>)
 8007096:	f007 020f 	and.w	r2, r7, #15
 800709a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800709e:	ed93 7b00 	vldr	d7, [r3]
 80070a2:	05f8      	lsls	r0, r7, #23
 80070a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80070a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070ac:	d516      	bpl.n	80070dc <_dtoa_r+0x354>
 80070ae:	4b97      	ldr	r3, [pc, #604]	@ (800730c <_dtoa_r+0x584>)
 80070b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070b8:	f7f9 fbe8 	bl	800088c <__aeabi_ddiv>
 80070bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070c0:	f004 040f 	and.w	r4, r4, #15
 80070c4:	2603      	movs	r6, #3
 80070c6:	4d91      	ldr	r5, [pc, #580]	@ (800730c <_dtoa_r+0x584>)
 80070c8:	b954      	cbnz	r4, 80070e0 <_dtoa_r+0x358>
 80070ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80070ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d2:	f7f9 fbdb 	bl	800088c <__aeabi_ddiv>
 80070d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070da:	e028      	b.n	800712e <_dtoa_r+0x3a6>
 80070dc:	2602      	movs	r6, #2
 80070de:	e7f2      	b.n	80070c6 <_dtoa_r+0x33e>
 80070e0:	07e1      	lsls	r1, r4, #31
 80070e2:	d508      	bpl.n	80070f6 <_dtoa_r+0x36e>
 80070e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80070e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ec:	f7f9 faa4 	bl	8000638 <__aeabi_dmul>
 80070f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80070f4:	3601      	adds	r6, #1
 80070f6:	1064      	asrs	r4, r4, #1
 80070f8:	3508      	adds	r5, #8
 80070fa:	e7e5      	b.n	80070c8 <_dtoa_r+0x340>
 80070fc:	f000 80af 	beq.w	800725e <_dtoa_r+0x4d6>
 8007100:	427c      	negs	r4, r7
 8007102:	4b81      	ldr	r3, [pc, #516]	@ (8007308 <_dtoa_r+0x580>)
 8007104:	4d81      	ldr	r5, [pc, #516]	@ (800730c <_dtoa_r+0x584>)
 8007106:	f004 020f 	and.w	r2, r4, #15
 800710a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007116:	f7f9 fa8f 	bl	8000638 <__aeabi_dmul>
 800711a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800711e:	1124      	asrs	r4, r4, #4
 8007120:	2300      	movs	r3, #0
 8007122:	2602      	movs	r6, #2
 8007124:	2c00      	cmp	r4, #0
 8007126:	f040 808f 	bne.w	8007248 <_dtoa_r+0x4c0>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1d3      	bne.n	80070d6 <_dtoa_r+0x34e>
 800712e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007130:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8094 	beq.w	8007262 <_dtoa_r+0x4da>
 800713a:	4b75      	ldr	r3, [pc, #468]	@ (8007310 <_dtoa_r+0x588>)
 800713c:	2200      	movs	r2, #0
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 fceb 	bl	8000b1c <__aeabi_dcmplt>
 8007146:	2800      	cmp	r0, #0
 8007148:	f000 808b 	beq.w	8007262 <_dtoa_r+0x4da>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8087 	beq.w	8007262 <_dtoa_r+0x4da>
 8007154:	f1bb 0f00 	cmp.w	fp, #0
 8007158:	dd34      	ble.n	80071c4 <_dtoa_r+0x43c>
 800715a:	4620      	mov	r0, r4
 800715c:	4b6d      	ldr	r3, [pc, #436]	@ (8007314 <_dtoa_r+0x58c>)
 800715e:	2200      	movs	r2, #0
 8007160:	4629      	mov	r1, r5
 8007162:	f7f9 fa69 	bl	8000638 <__aeabi_dmul>
 8007166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800716a:	f107 38ff 	add.w	r8, r7, #4294967295
 800716e:	3601      	adds	r6, #1
 8007170:	465c      	mov	r4, fp
 8007172:	4630      	mov	r0, r6
 8007174:	f7f9 f9f6 	bl	8000564 <__aeabi_i2d>
 8007178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800717c:	f7f9 fa5c 	bl	8000638 <__aeabi_dmul>
 8007180:	4b65      	ldr	r3, [pc, #404]	@ (8007318 <_dtoa_r+0x590>)
 8007182:	2200      	movs	r2, #0
 8007184:	f7f9 f8a2 	bl	80002cc <__adddf3>
 8007188:	4605      	mov	r5, r0
 800718a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800718e:	2c00      	cmp	r4, #0
 8007190:	d16a      	bne.n	8007268 <_dtoa_r+0x4e0>
 8007192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007196:	4b61      	ldr	r3, [pc, #388]	@ (800731c <_dtoa_r+0x594>)
 8007198:	2200      	movs	r2, #0
 800719a:	f7f9 f895 	bl	80002c8 <__aeabi_dsub>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071a6:	462a      	mov	r2, r5
 80071a8:	4633      	mov	r3, r6
 80071aa:	f7f9 fcd5 	bl	8000b58 <__aeabi_dcmpgt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f040 8298 	bne.w	80076e4 <_dtoa_r+0x95c>
 80071b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071b8:	462a      	mov	r2, r5
 80071ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80071be:	f7f9 fcad 	bl	8000b1c <__aeabi_dcmplt>
 80071c2:	bb38      	cbnz	r0, 8007214 <_dtoa_r+0x48c>
 80071c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80071c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f2c0 8157 	blt.w	8007482 <_dtoa_r+0x6fa>
 80071d4:	2f0e      	cmp	r7, #14
 80071d6:	f300 8154 	bgt.w	8007482 <_dtoa_r+0x6fa>
 80071da:	4b4b      	ldr	r3, [pc, #300]	@ (8007308 <_dtoa_r+0x580>)
 80071dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071e0:	ed93 7b00 	vldr	d7, [r3]
 80071e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	ed8d 7b00 	vstr	d7, [sp]
 80071ec:	f280 80e5 	bge.w	80073ba <_dtoa_r+0x632>
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f300 80e1 	bgt.w	80073ba <_dtoa_r+0x632>
 80071f8:	d10c      	bne.n	8007214 <_dtoa_r+0x48c>
 80071fa:	4b48      	ldr	r3, [pc, #288]	@ (800731c <_dtoa_r+0x594>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	ec51 0b17 	vmov	r0, r1, d7
 8007202:	f7f9 fa19 	bl	8000638 <__aeabi_dmul>
 8007206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720a:	f7f9 fc9b 	bl	8000b44 <__aeabi_dcmpge>
 800720e:	2800      	cmp	r0, #0
 8007210:	f000 8266 	beq.w	80076e0 <_dtoa_r+0x958>
 8007214:	2400      	movs	r4, #0
 8007216:	4625      	mov	r5, r4
 8007218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800721a:	4656      	mov	r6, sl
 800721c:	ea6f 0803 	mvn.w	r8, r3
 8007220:	2700      	movs	r7, #0
 8007222:	4621      	mov	r1, r4
 8007224:	4648      	mov	r0, r9
 8007226:	f000 fcbf 	bl	8007ba8 <_Bfree>
 800722a:	2d00      	cmp	r5, #0
 800722c:	f000 80bd 	beq.w	80073aa <_dtoa_r+0x622>
 8007230:	b12f      	cbz	r7, 800723e <_dtoa_r+0x4b6>
 8007232:	42af      	cmp	r7, r5
 8007234:	d003      	beq.n	800723e <_dtoa_r+0x4b6>
 8007236:	4639      	mov	r1, r7
 8007238:	4648      	mov	r0, r9
 800723a:	f000 fcb5 	bl	8007ba8 <_Bfree>
 800723e:	4629      	mov	r1, r5
 8007240:	4648      	mov	r0, r9
 8007242:	f000 fcb1 	bl	8007ba8 <_Bfree>
 8007246:	e0b0      	b.n	80073aa <_dtoa_r+0x622>
 8007248:	07e2      	lsls	r2, r4, #31
 800724a:	d505      	bpl.n	8007258 <_dtoa_r+0x4d0>
 800724c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007250:	f7f9 f9f2 	bl	8000638 <__aeabi_dmul>
 8007254:	3601      	adds	r6, #1
 8007256:	2301      	movs	r3, #1
 8007258:	1064      	asrs	r4, r4, #1
 800725a:	3508      	adds	r5, #8
 800725c:	e762      	b.n	8007124 <_dtoa_r+0x39c>
 800725e:	2602      	movs	r6, #2
 8007260:	e765      	b.n	800712e <_dtoa_r+0x3a6>
 8007262:	9c03      	ldr	r4, [sp, #12]
 8007264:	46b8      	mov	r8, r7
 8007266:	e784      	b.n	8007172 <_dtoa_r+0x3ea>
 8007268:	4b27      	ldr	r3, [pc, #156]	@ (8007308 <_dtoa_r+0x580>)
 800726a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800726c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007274:	4454      	add	r4, sl
 8007276:	2900      	cmp	r1, #0
 8007278:	d054      	beq.n	8007324 <_dtoa_r+0x59c>
 800727a:	4929      	ldr	r1, [pc, #164]	@ (8007320 <_dtoa_r+0x598>)
 800727c:	2000      	movs	r0, #0
 800727e:	f7f9 fb05 	bl	800088c <__aeabi_ddiv>
 8007282:	4633      	mov	r3, r6
 8007284:	462a      	mov	r2, r5
 8007286:	f7f9 f81f 	bl	80002c8 <__aeabi_dsub>
 800728a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800728e:	4656      	mov	r6, sl
 8007290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007294:	f7f9 fc80 	bl	8000b98 <__aeabi_d2iz>
 8007298:	4605      	mov	r5, r0
 800729a:	f7f9 f963 	bl	8000564 <__aeabi_i2d>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a6:	f7f9 f80f 	bl	80002c8 <__aeabi_dsub>
 80072aa:	3530      	adds	r5, #48	@ 0x30
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072b4:	f806 5b01 	strb.w	r5, [r6], #1
 80072b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80072bc:	f7f9 fc2e 	bl	8000b1c <__aeabi_dcmplt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d172      	bne.n	80073aa <_dtoa_r+0x622>
 80072c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072c8:	4911      	ldr	r1, [pc, #68]	@ (8007310 <_dtoa_r+0x588>)
 80072ca:	2000      	movs	r0, #0
 80072cc:	f7f8 fffc 	bl	80002c8 <__aeabi_dsub>
 80072d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80072d4:	f7f9 fc22 	bl	8000b1c <__aeabi_dcmplt>
 80072d8:	2800      	cmp	r0, #0
 80072da:	f040 80b4 	bne.w	8007446 <_dtoa_r+0x6be>
 80072de:	42a6      	cmp	r6, r4
 80072e0:	f43f af70 	beq.w	80071c4 <_dtoa_r+0x43c>
 80072e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80072e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <_dtoa_r+0x58c>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	f7f9 f9a4 	bl	8000638 <__aeabi_dmul>
 80072f0:	4b08      	ldr	r3, [pc, #32]	@ (8007314 <_dtoa_r+0x58c>)
 80072f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80072f6:	2200      	movs	r2, #0
 80072f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072fc:	f7f9 f99c 	bl	8000638 <__aeabi_dmul>
 8007300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007304:	e7c4      	b.n	8007290 <_dtoa_r+0x508>
 8007306:	bf00      	nop
 8007308:	08009008 	.word	0x08009008
 800730c:	08008fe0 	.word	0x08008fe0
 8007310:	3ff00000 	.word	0x3ff00000
 8007314:	40240000 	.word	0x40240000
 8007318:	401c0000 	.word	0x401c0000
 800731c:	40140000 	.word	0x40140000
 8007320:	3fe00000 	.word	0x3fe00000
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	f7f9 f986 	bl	8000638 <__aeabi_dmul>
 800732c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007330:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007332:	4656      	mov	r6, sl
 8007334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007338:	f7f9 fc2e 	bl	8000b98 <__aeabi_d2iz>
 800733c:	4605      	mov	r5, r0
 800733e:	f7f9 f911 	bl	8000564 <__aeabi_i2d>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800734a:	f7f8 ffbd 	bl	80002c8 <__aeabi_dsub>
 800734e:	3530      	adds	r5, #48	@ 0x30
 8007350:	f806 5b01 	strb.w	r5, [r6], #1
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	42a6      	cmp	r6, r4
 800735a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	d124      	bne.n	80073ae <_dtoa_r+0x626>
 8007364:	4baf      	ldr	r3, [pc, #700]	@ (8007624 <_dtoa_r+0x89c>)
 8007366:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800736a:	f7f8 ffaf 	bl	80002cc <__adddf3>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007376:	f7f9 fbef 	bl	8000b58 <__aeabi_dcmpgt>
 800737a:	2800      	cmp	r0, #0
 800737c:	d163      	bne.n	8007446 <_dtoa_r+0x6be>
 800737e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007382:	49a8      	ldr	r1, [pc, #672]	@ (8007624 <_dtoa_r+0x89c>)
 8007384:	2000      	movs	r0, #0
 8007386:	f7f8 ff9f 	bl	80002c8 <__aeabi_dsub>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007392:	f7f9 fbc3 	bl	8000b1c <__aeabi_dcmplt>
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f af14 	beq.w	80071c4 <_dtoa_r+0x43c>
 800739c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800739e:	1e73      	subs	r3, r6, #1
 80073a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073a6:	2b30      	cmp	r3, #48	@ 0x30
 80073a8:	d0f8      	beq.n	800739c <_dtoa_r+0x614>
 80073aa:	4647      	mov	r7, r8
 80073ac:	e03b      	b.n	8007426 <_dtoa_r+0x69e>
 80073ae:	4b9e      	ldr	r3, [pc, #632]	@ (8007628 <_dtoa_r+0x8a0>)
 80073b0:	f7f9 f942 	bl	8000638 <__aeabi_dmul>
 80073b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b8:	e7bc      	b.n	8007334 <_dtoa_r+0x5ac>
 80073ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80073be:	4656      	mov	r6, sl
 80073c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f9 fa60 	bl	800088c <__aeabi_ddiv>
 80073cc:	f7f9 fbe4 	bl	8000b98 <__aeabi_d2iz>
 80073d0:	4680      	mov	r8, r0
 80073d2:	f7f9 f8c7 	bl	8000564 <__aeabi_i2d>
 80073d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073da:	f7f9 f92d 	bl	8000638 <__aeabi_dmul>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4620      	mov	r0, r4
 80073e4:	4629      	mov	r1, r5
 80073e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073ea:	f7f8 ff6d 	bl	80002c8 <__aeabi_dsub>
 80073ee:	f806 4b01 	strb.w	r4, [r6], #1
 80073f2:	9d03      	ldr	r5, [sp, #12]
 80073f4:	eba6 040a 	sub.w	r4, r6, sl
 80073f8:	42a5      	cmp	r5, r4
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	d133      	bne.n	8007468 <_dtoa_r+0x6e0>
 8007400:	f7f8 ff64 	bl	80002cc <__adddf3>
 8007404:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	f7f9 fba4 	bl	8000b58 <__aeabi_dcmpgt>
 8007410:	b9c0      	cbnz	r0, 8007444 <_dtoa_r+0x6bc>
 8007412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f9 fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800741e:	b110      	cbz	r0, 8007426 <_dtoa_r+0x69e>
 8007420:	f018 0f01 	tst.w	r8, #1
 8007424:	d10e      	bne.n	8007444 <_dtoa_r+0x6bc>
 8007426:	9902      	ldr	r1, [sp, #8]
 8007428:	4648      	mov	r0, r9
 800742a:	f000 fbbd 	bl	8007ba8 <_Bfree>
 800742e:	2300      	movs	r3, #0
 8007430:	7033      	strb	r3, [r6, #0]
 8007432:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007434:	3701      	adds	r7, #1
 8007436:	601f      	str	r7, [r3, #0]
 8007438:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 824b 	beq.w	80078d6 <_dtoa_r+0xb4e>
 8007440:	601e      	str	r6, [r3, #0]
 8007442:	e248      	b.n	80078d6 <_dtoa_r+0xb4e>
 8007444:	46b8      	mov	r8, r7
 8007446:	4633      	mov	r3, r6
 8007448:	461e      	mov	r6, r3
 800744a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800744e:	2a39      	cmp	r2, #57	@ 0x39
 8007450:	d106      	bne.n	8007460 <_dtoa_r+0x6d8>
 8007452:	459a      	cmp	sl, r3
 8007454:	d1f8      	bne.n	8007448 <_dtoa_r+0x6c0>
 8007456:	2230      	movs	r2, #48	@ 0x30
 8007458:	f108 0801 	add.w	r8, r8, #1
 800745c:	f88a 2000 	strb.w	r2, [sl]
 8007460:	781a      	ldrb	r2, [r3, #0]
 8007462:	3201      	adds	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	e7a0      	b.n	80073aa <_dtoa_r+0x622>
 8007468:	4b6f      	ldr	r3, [pc, #444]	@ (8007628 <_dtoa_r+0x8a0>)
 800746a:	2200      	movs	r2, #0
 800746c:	f7f9 f8e4 	bl	8000638 <__aeabi_dmul>
 8007470:	2200      	movs	r2, #0
 8007472:	2300      	movs	r3, #0
 8007474:	4604      	mov	r4, r0
 8007476:	460d      	mov	r5, r1
 8007478:	f7f9 fb46 	bl	8000b08 <__aeabi_dcmpeq>
 800747c:	2800      	cmp	r0, #0
 800747e:	d09f      	beq.n	80073c0 <_dtoa_r+0x638>
 8007480:	e7d1      	b.n	8007426 <_dtoa_r+0x69e>
 8007482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007484:	2a00      	cmp	r2, #0
 8007486:	f000 80ea 	beq.w	800765e <_dtoa_r+0x8d6>
 800748a:	9a07      	ldr	r2, [sp, #28]
 800748c:	2a01      	cmp	r2, #1
 800748e:	f300 80cd 	bgt.w	800762c <_dtoa_r+0x8a4>
 8007492:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007494:	2a00      	cmp	r2, #0
 8007496:	f000 80c1 	beq.w	800761c <_dtoa_r+0x894>
 800749a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800749e:	9c08      	ldr	r4, [sp, #32]
 80074a0:	9e00      	ldr	r6, [sp, #0]
 80074a2:	9a00      	ldr	r2, [sp, #0]
 80074a4:	441a      	add	r2, r3
 80074a6:	9200      	str	r2, [sp, #0]
 80074a8:	9a06      	ldr	r2, [sp, #24]
 80074aa:	2101      	movs	r1, #1
 80074ac:	441a      	add	r2, r3
 80074ae:	4648      	mov	r0, r9
 80074b0:	9206      	str	r2, [sp, #24]
 80074b2:	f000 fc2d 	bl	8007d10 <__i2b>
 80074b6:	4605      	mov	r5, r0
 80074b8:	b166      	cbz	r6, 80074d4 <_dtoa_r+0x74c>
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dd09      	ble.n	80074d4 <_dtoa_r+0x74c>
 80074c0:	42b3      	cmp	r3, r6
 80074c2:	9a00      	ldr	r2, [sp, #0]
 80074c4:	bfa8      	it	ge
 80074c6:	4633      	movge	r3, r6
 80074c8:	1ad2      	subs	r2, r2, r3
 80074ca:	9200      	str	r2, [sp, #0]
 80074cc:	9a06      	ldr	r2, [sp, #24]
 80074ce:	1af6      	subs	r6, r6, r3
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	9306      	str	r3, [sp, #24]
 80074d4:	9b08      	ldr	r3, [sp, #32]
 80074d6:	b30b      	cbz	r3, 800751c <_dtoa_r+0x794>
 80074d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80c6 	beq.w	800766c <_dtoa_r+0x8e4>
 80074e0:	2c00      	cmp	r4, #0
 80074e2:	f000 80c0 	beq.w	8007666 <_dtoa_r+0x8de>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4622      	mov	r2, r4
 80074ea:	4648      	mov	r0, r9
 80074ec:	f000 fcc8 	bl	8007e80 <__pow5mult>
 80074f0:	9a02      	ldr	r2, [sp, #8]
 80074f2:	4601      	mov	r1, r0
 80074f4:	4605      	mov	r5, r0
 80074f6:	4648      	mov	r0, r9
 80074f8:	f000 fc20 	bl	8007d3c <__multiply>
 80074fc:	9902      	ldr	r1, [sp, #8]
 80074fe:	4680      	mov	r8, r0
 8007500:	4648      	mov	r0, r9
 8007502:	f000 fb51 	bl	8007ba8 <_Bfree>
 8007506:	9b08      	ldr	r3, [sp, #32]
 8007508:	1b1b      	subs	r3, r3, r4
 800750a:	9308      	str	r3, [sp, #32]
 800750c:	f000 80b1 	beq.w	8007672 <_dtoa_r+0x8ea>
 8007510:	9a08      	ldr	r2, [sp, #32]
 8007512:	4641      	mov	r1, r8
 8007514:	4648      	mov	r0, r9
 8007516:	f000 fcb3 	bl	8007e80 <__pow5mult>
 800751a:	9002      	str	r0, [sp, #8]
 800751c:	2101      	movs	r1, #1
 800751e:	4648      	mov	r0, r9
 8007520:	f000 fbf6 	bl	8007d10 <__i2b>
 8007524:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007526:	4604      	mov	r4, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 81d8 	beq.w	80078de <_dtoa_r+0xb56>
 800752e:	461a      	mov	r2, r3
 8007530:	4601      	mov	r1, r0
 8007532:	4648      	mov	r0, r9
 8007534:	f000 fca4 	bl	8007e80 <__pow5mult>
 8007538:	9b07      	ldr	r3, [sp, #28]
 800753a:	2b01      	cmp	r3, #1
 800753c:	4604      	mov	r4, r0
 800753e:	f300 809f 	bgt.w	8007680 <_dtoa_r+0x8f8>
 8007542:	9b04      	ldr	r3, [sp, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 8097 	bne.w	8007678 <_dtoa_r+0x8f0>
 800754a:	9b05      	ldr	r3, [sp, #20]
 800754c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 8093 	bne.w	800767c <_dtoa_r+0x8f4>
 8007556:	9b05      	ldr	r3, [sp, #20]
 8007558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800755c:	0d1b      	lsrs	r3, r3, #20
 800755e:	051b      	lsls	r3, r3, #20
 8007560:	b133      	cbz	r3, 8007570 <_dtoa_r+0x7e8>
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	3301      	adds	r3, #1
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	9b06      	ldr	r3, [sp, #24]
 800756a:	3301      	adds	r3, #1
 800756c:	9306      	str	r3, [sp, #24]
 800756e:	2301      	movs	r3, #1
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 81b8 	beq.w	80078ea <_dtoa_r+0xb62>
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007580:	6918      	ldr	r0, [r3, #16]
 8007582:	f000 fb79 	bl	8007c78 <__hi0bits>
 8007586:	f1c0 0020 	rsb	r0, r0, #32
 800758a:	9b06      	ldr	r3, [sp, #24]
 800758c:	4418      	add	r0, r3
 800758e:	f010 001f 	ands.w	r0, r0, #31
 8007592:	f000 8082 	beq.w	800769a <_dtoa_r+0x912>
 8007596:	f1c0 0320 	rsb	r3, r0, #32
 800759a:	2b04      	cmp	r3, #4
 800759c:	dd73      	ble.n	8007686 <_dtoa_r+0x8fe>
 800759e:	9b00      	ldr	r3, [sp, #0]
 80075a0:	f1c0 001c 	rsb	r0, r0, #28
 80075a4:	4403      	add	r3, r0
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	9b06      	ldr	r3, [sp, #24]
 80075aa:	4403      	add	r3, r0
 80075ac:	4406      	add	r6, r0
 80075ae:	9306      	str	r3, [sp, #24]
 80075b0:	9b00      	ldr	r3, [sp, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dd05      	ble.n	80075c2 <_dtoa_r+0x83a>
 80075b6:	9902      	ldr	r1, [sp, #8]
 80075b8:	461a      	mov	r2, r3
 80075ba:	4648      	mov	r0, r9
 80075bc:	f000 fcba 	bl	8007f34 <__lshift>
 80075c0:	9002      	str	r0, [sp, #8]
 80075c2:	9b06      	ldr	r3, [sp, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dd05      	ble.n	80075d4 <_dtoa_r+0x84c>
 80075c8:	4621      	mov	r1, r4
 80075ca:	461a      	mov	r2, r3
 80075cc:	4648      	mov	r0, r9
 80075ce:	f000 fcb1 	bl	8007f34 <__lshift>
 80075d2:	4604      	mov	r4, r0
 80075d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d061      	beq.n	800769e <_dtoa_r+0x916>
 80075da:	9802      	ldr	r0, [sp, #8]
 80075dc:	4621      	mov	r1, r4
 80075de:	f000 fd15 	bl	800800c <__mcmp>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	da5b      	bge.n	800769e <_dtoa_r+0x916>
 80075e6:	2300      	movs	r3, #0
 80075e8:	9902      	ldr	r1, [sp, #8]
 80075ea:	220a      	movs	r2, #10
 80075ec:	4648      	mov	r0, r9
 80075ee:	f000 fafd 	bl	8007bec <__multadd>
 80075f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f4:	9002      	str	r0, [sp, #8]
 80075f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8177 	beq.w	80078ee <_dtoa_r+0xb66>
 8007600:	4629      	mov	r1, r5
 8007602:	2300      	movs	r3, #0
 8007604:	220a      	movs	r2, #10
 8007606:	4648      	mov	r0, r9
 8007608:	f000 faf0 	bl	8007bec <__multadd>
 800760c:	f1bb 0f00 	cmp.w	fp, #0
 8007610:	4605      	mov	r5, r0
 8007612:	dc6f      	bgt.n	80076f4 <_dtoa_r+0x96c>
 8007614:	9b07      	ldr	r3, [sp, #28]
 8007616:	2b02      	cmp	r3, #2
 8007618:	dc49      	bgt.n	80076ae <_dtoa_r+0x926>
 800761a:	e06b      	b.n	80076f4 <_dtoa_r+0x96c>
 800761c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800761e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007622:	e73c      	b.n	800749e <_dtoa_r+0x716>
 8007624:	3fe00000 	.word	0x3fe00000
 8007628:	40240000 	.word	0x40240000
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1e5c      	subs	r4, r3, #1
 8007630:	9b08      	ldr	r3, [sp, #32]
 8007632:	42a3      	cmp	r3, r4
 8007634:	db09      	blt.n	800764a <_dtoa_r+0x8c2>
 8007636:	1b1c      	subs	r4, r3, r4
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f6bf af30 	bge.w	80074a0 <_dtoa_r+0x718>
 8007640:	9b00      	ldr	r3, [sp, #0]
 8007642:	9a03      	ldr	r2, [sp, #12]
 8007644:	1a9e      	subs	r6, r3, r2
 8007646:	2300      	movs	r3, #0
 8007648:	e72b      	b.n	80074a2 <_dtoa_r+0x71a>
 800764a:	9b08      	ldr	r3, [sp, #32]
 800764c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800764e:	9408      	str	r4, [sp, #32]
 8007650:	1ae3      	subs	r3, r4, r3
 8007652:	441a      	add	r2, r3
 8007654:	9e00      	ldr	r6, [sp, #0]
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	920d      	str	r2, [sp, #52]	@ 0x34
 800765a:	2400      	movs	r4, #0
 800765c:	e721      	b.n	80074a2 <_dtoa_r+0x71a>
 800765e:	9c08      	ldr	r4, [sp, #32]
 8007660:	9e00      	ldr	r6, [sp, #0]
 8007662:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007664:	e728      	b.n	80074b8 <_dtoa_r+0x730>
 8007666:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800766a:	e751      	b.n	8007510 <_dtoa_r+0x788>
 800766c:	9a08      	ldr	r2, [sp, #32]
 800766e:	9902      	ldr	r1, [sp, #8]
 8007670:	e750      	b.n	8007514 <_dtoa_r+0x78c>
 8007672:	f8cd 8008 	str.w	r8, [sp, #8]
 8007676:	e751      	b.n	800751c <_dtoa_r+0x794>
 8007678:	2300      	movs	r3, #0
 800767a:	e779      	b.n	8007570 <_dtoa_r+0x7e8>
 800767c:	9b04      	ldr	r3, [sp, #16]
 800767e:	e777      	b.n	8007570 <_dtoa_r+0x7e8>
 8007680:	2300      	movs	r3, #0
 8007682:	9308      	str	r3, [sp, #32]
 8007684:	e779      	b.n	800757a <_dtoa_r+0x7f2>
 8007686:	d093      	beq.n	80075b0 <_dtoa_r+0x828>
 8007688:	9a00      	ldr	r2, [sp, #0]
 800768a:	331c      	adds	r3, #28
 800768c:	441a      	add	r2, r3
 800768e:	9200      	str	r2, [sp, #0]
 8007690:	9a06      	ldr	r2, [sp, #24]
 8007692:	441a      	add	r2, r3
 8007694:	441e      	add	r6, r3
 8007696:	9206      	str	r2, [sp, #24]
 8007698:	e78a      	b.n	80075b0 <_dtoa_r+0x828>
 800769a:	4603      	mov	r3, r0
 800769c:	e7f4      	b.n	8007688 <_dtoa_r+0x900>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	46b8      	mov	r8, r7
 80076a4:	dc20      	bgt.n	80076e8 <_dtoa_r+0x960>
 80076a6:	469b      	mov	fp, r3
 80076a8:	9b07      	ldr	r3, [sp, #28]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	dd1e      	ble.n	80076ec <_dtoa_r+0x964>
 80076ae:	f1bb 0f00 	cmp.w	fp, #0
 80076b2:	f47f adb1 	bne.w	8007218 <_dtoa_r+0x490>
 80076b6:	4621      	mov	r1, r4
 80076b8:	465b      	mov	r3, fp
 80076ba:	2205      	movs	r2, #5
 80076bc:	4648      	mov	r0, r9
 80076be:	f000 fa95 	bl	8007bec <__multadd>
 80076c2:	4601      	mov	r1, r0
 80076c4:	4604      	mov	r4, r0
 80076c6:	9802      	ldr	r0, [sp, #8]
 80076c8:	f000 fca0 	bl	800800c <__mcmp>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f77f ada3 	ble.w	8007218 <_dtoa_r+0x490>
 80076d2:	4656      	mov	r6, sl
 80076d4:	2331      	movs	r3, #49	@ 0x31
 80076d6:	f806 3b01 	strb.w	r3, [r6], #1
 80076da:	f108 0801 	add.w	r8, r8, #1
 80076de:	e59f      	b.n	8007220 <_dtoa_r+0x498>
 80076e0:	9c03      	ldr	r4, [sp, #12]
 80076e2:	46b8      	mov	r8, r7
 80076e4:	4625      	mov	r5, r4
 80076e6:	e7f4      	b.n	80076d2 <_dtoa_r+0x94a>
 80076e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80076ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8101 	beq.w	80078f6 <_dtoa_r+0xb6e>
 80076f4:	2e00      	cmp	r6, #0
 80076f6:	dd05      	ble.n	8007704 <_dtoa_r+0x97c>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4632      	mov	r2, r6
 80076fc:	4648      	mov	r0, r9
 80076fe:	f000 fc19 	bl	8007f34 <__lshift>
 8007702:	4605      	mov	r5, r0
 8007704:	9b08      	ldr	r3, [sp, #32]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d05c      	beq.n	80077c4 <_dtoa_r+0xa3c>
 800770a:	6869      	ldr	r1, [r5, #4]
 800770c:	4648      	mov	r0, r9
 800770e:	f000 fa0b 	bl	8007b28 <_Balloc>
 8007712:	4606      	mov	r6, r0
 8007714:	b928      	cbnz	r0, 8007722 <_dtoa_r+0x99a>
 8007716:	4b82      	ldr	r3, [pc, #520]	@ (8007920 <_dtoa_r+0xb98>)
 8007718:	4602      	mov	r2, r0
 800771a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800771e:	f7ff bb4a 	b.w	8006db6 <_dtoa_r+0x2e>
 8007722:	692a      	ldr	r2, [r5, #16]
 8007724:	3202      	adds	r2, #2
 8007726:	0092      	lsls	r2, r2, #2
 8007728:	f105 010c 	add.w	r1, r5, #12
 800772c:	300c      	adds	r0, #12
 800772e:	f7ff fa92 	bl	8006c56 <memcpy>
 8007732:	2201      	movs	r2, #1
 8007734:	4631      	mov	r1, r6
 8007736:	4648      	mov	r0, r9
 8007738:	f000 fbfc 	bl	8007f34 <__lshift>
 800773c:	f10a 0301 	add.w	r3, sl, #1
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	eb0a 030b 	add.w	r3, sl, fp
 8007746:	9308      	str	r3, [sp, #32]
 8007748:	9b04      	ldr	r3, [sp, #16]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	462f      	mov	r7, r5
 8007750:	9306      	str	r3, [sp, #24]
 8007752:	4605      	mov	r5, r0
 8007754:	9b00      	ldr	r3, [sp, #0]
 8007756:	9802      	ldr	r0, [sp, #8]
 8007758:	4621      	mov	r1, r4
 800775a:	f103 3bff 	add.w	fp, r3, #4294967295
 800775e:	f7ff fa88 	bl	8006c72 <quorem>
 8007762:	4603      	mov	r3, r0
 8007764:	3330      	adds	r3, #48	@ 0x30
 8007766:	9003      	str	r0, [sp, #12]
 8007768:	4639      	mov	r1, r7
 800776a:	9802      	ldr	r0, [sp, #8]
 800776c:	9309      	str	r3, [sp, #36]	@ 0x24
 800776e:	f000 fc4d 	bl	800800c <__mcmp>
 8007772:	462a      	mov	r2, r5
 8007774:	9004      	str	r0, [sp, #16]
 8007776:	4621      	mov	r1, r4
 8007778:	4648      	mov	r0, r9
 800777a:	f000 fc63 	bl	8008044 <__mdiff>
 800777e:	68c2      	ldr	r2, [r0, #12]
 8007780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007782:	4606      	mov	r6, r0
 8007784:	bb02      	cbnz	r2, 80077c8 <_dtoa_r+0xa40>
 8007786:	4601      	mov	r1, r0
 8007788:	9802      	ldr	r0, [sp, #8]
 800778a:	f000 fc3f 	bl	800800c <__mcmp>
 800778e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007790:	4602      	mov	r2, r0
 8007792:	4631      	mov	r1, r6
 8007794:	4648      	mov	r0, r9
 8007796:	920c      	str	r2, [sp, #48]	@ 0x30
 8007798:	9309      	str	r3, [sp, #36]	@ 0x24
 800779a:	f000 fa05 	bl	8007ba8 <_Bfree>
 800779e:	9b07      	ldr	r3, [sp, #28]
 80077a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077a2:	9e00      	ldr	r6, [sp, #0]
 80077a4:	ea42 0103 	orr.w	r1, r2, r3
 80077a8:	9b06      	ldr	r3, [sp, #24]
 80077aa:	4319      	orrs	r1, r3
 80077ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ae:	d10d      	bne.n	80077cc <_dtoa_r+0xa44>
 80077b0:	2b39      	cmp	r3, #57	@ 0x39
 80077b2:	d027      	beq.n	8007804 <_dtoa_r+0xa7c>
 80077b4:	9a04      	ldr	r2, [sp, #16]
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	dd01      	ble.n	80077be <_dtoa_r+0xa36>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	3331      	adds	r3, #49	@ 0x31
 80077be:	f88b 3000 	strb.w	r3, [fp]
 80077c2:	e52e      	b.n	8007222 <_dtoa_r+0x49a>
 80077c4:	4628      	mov	r0, r5
 80077c6:	e7b9      	b.n	800773c <_dtoa_r+0x9b4>
 80077c8:	2201      	movs	r2, #1
 80077ca:	e7e2      	b.n	8007792 <_dtoa_r+0xa0a>
 80077cc:	9904      	ldr	r1, [sp, #16]
 80077ce:	2900      	cmp	r1, #0
 80077d0:	db04      	blt.n	80077dc <_dtoa_r+0xa54>
 80077d2:	9807      	ldr	r0, [sp, #28]
 80077d4:	4301      	orrs	r1, r0
 80077d6:	9806      	ldr	r0, [sp, #24]
 80077d8:	4301      	orrs	r1, r0
 80077da:	d120      	bne.n	800781e <_dtoa_r+0xa96>
 80077dc:	2a00      	cmp	r2, #0
 80077de:	ddee      	ble.n	80077be <_dtoa_r+0xa36>
 80077e0:	9902      	ldr	r1, [sp, #8]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	2201      	movs	r2, #1
 80077e6:	4648      	mov	r0, r9
 80077e8:	f000 fba4 	bl	8007f34 <__lshift>
 80077ec:	4621      	mov	r1, r4
 80077ee:	9002      	str	r0, [sp, #8]
 80077f0:	f000 fc0c 	bl	800800c <__mcmp>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	dc02      	bgt.n	8007800 <_dtoa_r+0xa78>
 80077fa:	d1e0      	bne.n	80077be <_dtoa_r+0xa36>
 80077fc:	07da      	lsls	r2, r3, #31
 80077fe:	d5de      	bpl.n	80077be <_dtoa_r+0xa36>
 8007800:	2b39      	cmp	r3, #57	@ 0x39
 8007802:	d1da      	bne.n	80077ba <_dtoa_r+0xa32>
 8007804:	2339      	movs	r3, #57	@ 0x39
 8007806:	f88b 3000 	strb.w	r3, [fp]
 800780a:	4633      	mov	r3, r6
 800780c:	461e      	mov	r6, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007814:	2a39      	cmp	r2, #57	@ 0x39
 8007816:	d04e      	beq.n	80078b6 <_dtoa_r+0xb2e>
 8007818:	3201      	adds	r2, #1
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	e501      	b.n	8007222 <_dtoa_r+0x49a>
 800781e:	2a00      	cmp	r2, #0
 8007820:	dd03      	ble.n	800782a <_dtoa_r+0xaa2>
 8007822:	2b39      	cmp	r3, #57	@ 0x39
 8007824:	d0ee      	beq.n	8007804 <_dtoa_r+0xa7c>
 8007826:	3301      	adds	r3, #1
 8007828:	e7c9      	b.n	80077be <_dtoa_r+0xa36>
 800782a:	9a00      	ldr	r2, [sp, #0]
 800782c:	9908      	ldr	r1, [sp, #32]
 800782e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007832:	428a      	cmp	r2, r1
 8007834:	d028      	beq.n	8007888 <_dtoa_r+0xb00>
 8007836:	9902      	ldr	r1, [sp, #8]
 8007838:	2300      	movs	r3, #0
 800783a:	220a      	movs	r2, #10
 800783c:	4648      	mov	r0, r9
 800783e:	f000 f9d5 	bl	8007bec <__multadd>
 8007842:	42af      	cmp	r7, r5
 8007844:	9002      	str	r0, [sp, #8]
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	f04f 020a 	mov.w	r2, #10
 800784e:	4639      	mov	r1, r7
 8007850:	4648      	mov	r0, r9
 8007852:	d107      	bne.n	8007864 <_dtoa_r+0xadc>
 8007854:	f000 f9ca 	bl	8007bec <__multadd>
 8007858:	4607      	mov	r7, r0
 800785a:	4605      	mov	r5, r0
 800785c:	9b00      	ldr	r3, [sp, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	e777      	b.n	8007754 <_dtoa_r+0x9cc>
 8007864:	f000 f9c2 	bl	8007bec <__multadd>
 8007868:	4629      	mov	r1, r5
 800786a:	4607      	mov	r7, r0
 800786c:	2300      	movs	r3, #0
 800786e:	220a      	movs	r2, #10
 8007870:	4648      	mov	r0, r9
 8007872:	f000 f9bb 	bl	8007bec <__multadd>
 8007876:	4605      	mov	r5, r0
 8007878:	e7f0      	b.n	800785c <_dtoa_r+0xad4>
 800787a:	f1bb 0f00 	cmp.w	fp, #0
 800787e:	bfcc      	ite	gt
 8007880:	465e      	movgt	r6, fp
 8007882:	2601      	movle	r6, #1
 8007884:	4456      	add	r6, sl
 8007886:	2700      	movs	r7, #0
 8007888:	9902      	ldr	r1, [sp, #8]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	2201      	movs	r2, #1
 800788e:	4648      	mov	r0, r9
 8007890:	f000 fb50 	bl	8007f34 <__lshift>
 8007894:	4621      	mov	r1, r4
 8007896:	9002      	str	r0, [sp, #8]
 8007898:	f000 fbb8 	bl	800800c <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	dcb4      	bgt.n	800780a <_dtoa_r+0xa82>
 80078a0:	d102      	bne.n	80078a8 <_dtoa_r+0xb20>
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	07db      	lsls	r3, r3, #31
 80078a6:	d4b0      	bmi.n	800780a <_dtoa_r+0xa82>
 80078a8:	4633      	mov	r3, r6
 80078aa:	461e      	mov	r6, r3
 80078ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078b0:	2a30      	cmp	r2, #48	@ 0x30
 80078b2:	d0fa      	beq.n	80078aa <_dtoa_r+0xb22>
 80078b4:	e4b5      	b.n	8007222 <_dtoa_r+0x49a>
 80078b6:	459a      	cmp	sl, r3
 80078b8:	d1a8      	bne.n	800780c <_dtoa_r+0xa84>
 80078ba:	2331      	movs	r3, #49	@ 0x31
 80078bc:	f108 0801 	add.w	r8, r8, #1
 80078c0:	f88a 3000 	strb.w	r3, [sl]
 80078c4:	e4ad      	b.n	8007222 <_dtoa_r+0x49a>
 80078c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007924 <_dtoa_r+0xb9c>
 80078cc:	b11b      	cbz	r3, 80078d6 <_dtoa_r+0xb4e>
 80078ce:	f10a 0308 	add.w	r3, sl, #8
 80078d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4650      	mov	r0, sl
 80078d8:	b017      	add	sp, #92	@ 0x5c
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	9b07      	ldr	r3, [sp, #28]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	f77f ae2e 	ble.w	8007542 <_dtoa_r+0x7ba>
 80078e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078e8:	9308      	str	r3, [sp, #32]
 80078ea:	2001      	movs	r0, #1
 80078ec:	e64d      	b.n	800758a <_dtoa_r+0x802>
 80078ee:	f1bb 0f00 	cmp.w	fp, #0
 80078f2:	f77f aed9 	ble.w	80076a8 <_dtoa_r+0x920>
 80078f6:	4656      	mov	r6, sl
 80078f8:	9802      	ldr	r0, [sp, #8]
 80078fa:	4621      	mov	r1, r4
 80078fc:	f7ff f9b9 	bl	8006c72 <quorem>
 8007900:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007904:	f806 3b01 	strb.w	r3, [r6], #1
 8007908:	eba6 020a 	sub.w	r2, r6, sl
 800790c:	4593      	cmp	fp, r2
 800790e:	ddb4      	ble.n	800787a <_dtoa_r+0xaf2>
 8007910:	9902      	ldr	r1, [sp, #8]
 8007912:	2300      	movs	r3, #0
 8007914:	220a      	movs	r2, #10
 8007916:	4648      	mov	r0, r9
 8007918:	f000 f968 	bl	8007bec <__multadd>
 800791c:	9002      	str	r0, [sp, #8]
 800791e:	e7eb      	b.n	80078f8 <_dtoa_r+0xb70>
 8007920:	08008f0c 	.word	0x08008f0c
 8007924:	08008e90 	.word	0x08008e90

08007928 <_free_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4605      	mov	r5, r0
 800792c:	2900      	cmp	r1, #0
 800792e:	d041      	beq.n	80079b4 <_free_r+0x8c>
 8007930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007934:	1f0c      	subs	r4, r1, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	bfb8      	it	lt
 800793a:	18e4      	addlt	r4, r4, r3
 800793c:	f000 f8e8 	bl	8007b10 <__malloc_lock>
 8007940:	4a1d      	ldr	r2, [pc, #116]	@ (80079b8 <_free_r+0x90>)
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	b933      	cbnz	r3, 8007954 <_free_r+0x2c>
 8007946:	6063      	str	r3, [r4, #4]
 8007948:	6014      	str	r4, [r2, #0]
 800794a:	4628      	mov	r0, r5
 800794c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007950:	f000 b8e4 	b.w	8007b1c <__malloc_unlock>
 8007954:	42a3      	cmp	r3, r4
 8007956:	d908      	bls.n	800796a <_free_r+0x42>
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	1821      	adds	r1, r4, r0
 800795c:	428b      	cmp	r3, r1
 800795e:	bf01      	itttt	eq
 8007960:	6819      	ldreq	r1, [r3, #0]
 8007962:	685b      	ldreq	r3, [r3, #4]
 8007964:	1809      	addeq	r1, r1, r0
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	e7ed      	b.n	8007946 <_free_r+0x1e>
 800796a:	461a      	mov	r2, r3
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	b10b      	cbz	r3, 8007974 <_free_r+0x4c>
 8007970:	42a3      	cmp	r3, r4
 8007972:	d9fa      	bls.n	800796a <_free_r+0x42>
 8007974:	6811      	ldr	r1, [r2, #0]
 8007976:	1850      	adds	r0, r2, r1
 8007978:	42a0      	cmp	r0, r4
 800797a:	d10b      	bne.n	8007994 <_free_r+0x6c>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	4401      	add	r1, r0
 8007980:	1850      	adds	r0, r2, r1
 8007982:	4283      	cmp	r3, r0
 8007984:	6011      	str	r1, [r2, #0]
 8007986:	d1e0      	bne.n	800794a <_free_r+0x22>
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	6053      	str	r3, [r2, #4]
 800798e:	4408      	add	r0, r1
 8007990:	6010      	str	r0, [r2, #0]
 8007992:	e7da      	b.n	800794a <_free_r+0x22>
 8007994:	d902      	bls.n	800799c <_free_r+0x74>
 8007996:	230c      	movs	r3, #12
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	e7d6      	b.n	800794a <_free_r+0x22>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	1821      	adds	r1, r4, r0
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf04      	itt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	6063      	str	r3, [r4, #4]
 80079aa:	bf04      	itt	eq
 80079ac:	1809      	addeq	r1, r1, r0
 80079ae:	6021      	streq	r1, [r4, #0]
 80079b0:	6054      	str	r4, [r2, #4]
 80079b2:	e7ca      	b.n	800794a <_free_r+0x22>
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	20004ed0 	.word	0x20004ed0

080079bc <malloc>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <malloc+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f000 b825 	b.w	8007a10 <_malloc_r>
 80079c6:	bf00      	nop
 80079c8:	20000020 	.word	0x20000020

080079cc <sbrk_aligned>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	4e0f      	ldr	r6, [pc, #60]	@ (8007a0c <sbrk_aligned+0x40>)
 80079d0:	460c      	mov	r4, r1
 80079d2:	6831      	ldr	r1, [r6, #0]
 80079d4:	4605      	mov	r5, r0
 80079d6:	b911      	cbnz	r1, 80079de <sbrk_aligned+0x12>
 80079d8:	f000 fe3e 	bl	8008658 <_sbrk_r>
 80079dc:	6030      	str	r0, [r6, #0]
 80079de:	4621      	mov	r1, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 fe39 	bl	8008658 <_sbrk_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d103      	bne.n	80079f2 <sbrk_aligned+0x26>
 80079ea:	f04f 34ff 	mov.w	r4, #4294967295
 80079ee:	4620      	mov	r0, r4
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
 80079f2:	1cc4      	adds	r4, r0, #3
 80079f4:	f024 0403 	bic.w	r4, r4, #3
 80079f8:	42a0      	cmp	r0, r4
 80079fa:	d0f8      	beq.n	80079ee <sbrk_aligned+0x22>
 80079fc:	1a21      	subs	r1, r4, r0
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fe2a 	bl	8008658 <_sbrk_r>
 8007a04:	3001      	adds	r0, #1
 8007a06:	d1f2      	bne.n	80079ee <sbrk_aligned+0x22>
 8007a08:	e7ef      	b.n	80079ea <sbrk_aligned+0x1e>
 8007a0a:	bf00      	nop
 8007a0c:	20004ecc 	.word	0x20004ecc

08007a10 <_malloc_r>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	1ccd      	adds	r5, r1, #3
 8007a16:	f025 0503 	bic.w	r5, r5, #3
 8007a1a:	3508      	adds	r5, #8
 8007a1c:	2d0c      	cmp	r5, #12
 8007a1e:	bf38      	it	cc
 8007a20:	250c      	movcc	r5, #12
 8007a22:	2d00      	cmp	r5, #0
 8007a24:	4606      	mov	r6, r0
 8007a26:	db01      	blt.n	8007a2c <_malloc_r+0x1c>
 8007a28:	42a9      	cmp	r1, r5
 8007a2a:	d904      	bls.n	8007a36 <_malloc_r+0x26>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	6033      	str	r3, [r6, #0]
 8007a30:	2000      	movs	r0, #0
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b0c <_malloc_r+0xfc>
 8007a3a:	f000 f869 	bl	8007b10 <__malloc_lock>
 8007a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a42:	461c      	mov	r4, r3
 8007a44:	bb44      	cbnz	r4, 8007a98 <_malloc_r+0x88>
 8007a46:	4629      	mov	r1, r5
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff ffbf 	bl	80079cc <sbrk_aligned>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	4604      	mov	r4, r0
 8007a52:	d158      	bne.n	8007b06 <_malloc_r+0xf6>
 8007a54:	f8d8 4000 	ldr.w	r4, [r8]
 8007a58:	4627      	mov	r7, r4
 8007a5a:	2f00      	cmp	r7, #0
 8007a5c:	d143      	bne.n	8007ae6 <_malloc_r+0xd6>
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	d04b      	beq.n	8007afa <_malloc_r+0xea>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	4639      	mov	r1, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	eb04 0903 	add.w	r9, r4, r3
 8007a6c:	f000 fdf4 	bl	8008658 <_sbrk_r>
 8007a70:	4581      	cmp	r9, r0
 8007a72:	d142      	bne.n	8007afa <_malloc_r+0xea>
 8007a74:	6821      	ldr	r1, [r4, #0]
 8007a76:	1a6d      	subs	r5, r5, r1
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff ffa6 	bl	80079cc <sbrk_aligned>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d03a      	beq.n	8007afa <_malloc_r+0xea>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	442b      	add	r3, r5
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	bb62      	cbnz	r2, 8007aec <_malloc_r+0xdc>
 8007a92:	f8c8 7000 	str.w	r7, [r8]
 8007a96:	e00f      	b.n	8007ab8 <_malloc_r+0xa8>
 8007a98:	6822      	ldr	r2, [r4, #0]
 8007a9a:	1b52      	subs	r2, r2, r5
 8007a9c:	d420      	bmi.n	8007ae0 <_malloc_r+0xd0>
 8007a9e:	2a0b      	cmp	r2, #11
 8007aa0:	d917      	bls.n	8007ad2 <_malloc_r+0xc2>
 8007aa2:	1961      	adds	r1, r4, r5
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	6025      	str	r5, [r4, #0]
 8007aa8:	bf18      	it	ne
 8007aaa:	6059      	strne	r1, [r3, #4]
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	bf08      	it	eq
 8007ab0:	f8c8 1000 	streq.w	r1, [r8]
 8007ab4:	5162      	str	r2, [r4, r5]
 8007ab6:	604b      	str	r3, [r1, #4]
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 f82f 	bl	8007b1c <__malloc_unlock>
 8007abe:	f104 000b 	add.w	r0, r4, #11
 8007ac2:	1d23      	adds	r3, r4, #4
 8007ac4:	f020 0007 	bic.w	r0, r0, #7
 8007ac8:	1ac2      	subs	r2, r0, r3
 8007aca:	bf1c      	itt	ne
 8007acc:	1a1b      	subne	r3, r3, r0
 8007ace:	50a3      	strne	r3, [r4, r2]
 8007ad0:	e7af      	b.n	8007a32 <_malloc_r+0x22>
 8007ad2:	6862      	ldr	r2, [r4, #4]
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	bf0c      	ite	eq
 8007ad8:	f8c8 2000 	streq.w	r2, [r8]
 8007adc:	605a      	strne	r2, [r3, #4]
 8007ade:	e7eb      	b.n	8007ab8 <_malloc_r+0xa8>
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	6864      	ldr	r4, [r4, #4]
 8007ae4:	e7ae      	b.n	8007a44 <_malloc_r+0x34>
 8007ae6:	463c      	mov	r4, r7
 8007ae8:	687f      	ldr	r7, [r7, #4]
 8007aea:	e7b6      	b.n	8007a5a <_malloc_r+0x4a>
 8007aec:	461a      	mov	r2, r3
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	d1fb      	bne.n	8007aec <_malloc_r+0xdc>
 8007af4:	2300      	movs	r3, #0
 8007af6:	6053      	str	r3, [r2, #4]
 8007af8:	e7de      	b.n	8007ab8 <_malloc_r+0xa8>
 8007afa:	230c      	movs	r3, #12
 8007afc:	6033      	str	r3, [r6, #0]
 8007afe:	4630      	mov	r0, r6
 8007b00:	f000 f80c 	bl	8007b1c <__malloc_unlock>
 8007b04:	e794      	b.n	8007a30 <_malloc_r+0x20>
 8007b06:	6005      	str	r5, [r0, #0]
 8007b08:	e7d6      	b.n	8007ab8 <_malloc_r+0xa8>
 8007b0a:	bf00      	nop
 8007b0c:	20004ed0 	.word	0x20004ed0

08007b10 <__malloc_lock>:
 8007b10:	4801      	ldr	r0, [pc, #4]	@ (8007b18 <__malloc_lock+0x8>)
 8007b12:	f7ff b89e 	b.w	8006c52 <__retarget_lock_acquire_recursive>
 8007b16:	bf00      	nop
 8007b18:	20004ec8 	.word	0x20004ec8

08007b1c <__malloc_unlock>:
 8007b1c:	4801      	ldr	r0, [pc, #4]	@ (8007b24 <__malloc_unlock+0x8>)
 8007b1e:	f7ff b899 	b.w	8006c54 <__retarget_lock_release_recursive>
 8007b22:	bf00      	nop
 8007b24:	20004ec8 	.word	0x20004ec8

08007b28 <_Balloc>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	69c6      	ldr	r6, [r0, #28]
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	460d      	mov	r5, r1
 8007b30:	b976      	cbnz	r6, 8007b50 <_Balloc+0x28>
 8007b32:	2010      	movs	r0, #16
 8007b34:	f7ff ff42 	bl	80079bc <malloc>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	61e0      	str	r0, [r4, #28]
 8007b3c:	b920      	cbnz	r0, 8007b48 <_Balloc+0x20>
 8007b3e:	4b18      	ldr	r3, [pc, #96]	@ (8007ba0 <_Balloc+0x78>)
 8007b40:	4818      	ldr	r0, [pc, #96]	@ (8007ba4 <_Balloc+0x7c>)
 8007b42:	216b      	movs	r1, #107	@ 0x6b
 8007b44:	f000 fd98 	bl	8008678 <__assert_func>
 8007b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b4c:	6006      	str	r6, [r0, #0]
 8007b4e:	60c6      	str	r6, [r0, #12]
 8007b50:	69e6      	ldr	r6, [r4, #28]
 8007b52:	68f3      	ldr	r3, [r6, #12]
 8007b54:	b183      	cbz	r3, 8007b78 <_Balloc+0x50>
 8007b56:	69e3      	ldr	r3, [r4, #28]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b5e:	b9b8      	cbnz	r0, 8007b90 <_Balloc+0x68>
 8007b60:	2101      	movs	r1, #1
 8007b62:	fa01 f605 	lsl.w	r6, r1, r5
 8007b66:	1d72      	adds	r2, r6, #5
 8007b68:	0092      	lsls	r2, r2, #2
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fda2 	bl	80086b4 <_calloc_r>
 8007b70:	b160      	cbz	r0, 8007b8c <_Balloc+0x64>
 8007b72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b76:	e00e      	b.n	8007b96 <_Balloc+0x6e>
 8007b78:	2221      	movs	r2, #33	@ 0x21
 8007b7a:	2104      	movs	r1, #4
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fd99 	bl	80086b4 <_calloc_r>
 8007b82:	69e3      	ldr	r3, [r4, #28]
 8007b84:	60f0      	str	r0, [r6, #12]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e4      	bne.n	8007b56 <_Balloc+0x2e>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	6802      	ldr	r2, [r0, #0]
 8007b92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b96:	2300      	movs	r3, #0
 8007b98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b9c:	e7f7      	b.n	8007b8e <_Balloc+0x66>
 8007b9e:	bf00      	nop
 8007ba0:	08008e9d 	.word	0x08008e9d
 8007ba4:	08008f1d 	.word	0x08008f1d

08007ba8 <_Bfree>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	69c6      	ldr	r6, [r0, #28]
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	b976      	cbnz	r6, 8007bd0 <_Bfree+0x28>
 8007bb2:	2010      	movs	r0, #16
 8007bb4:	f7ff ff02 	bl	80079bc <malloc>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	61e8      	str	r0, [r5, #28]
 8007bbc:	b920      	cbnz	r0, 8007bc8 <_Bfree+0x20>
 8007bbe:	4b09      	ldr	r3, [pc, #36]	@ (8007be4 <_Bfree+0x3c>)
 8007bc0:	4809      	ldr	r0, [pc, #36]	@ (8007be8 <_Bfree+0x40>)
 8007bc2:	218f      	movs	r1, #143	@ 0x8f
 8007bc4:	f000 fd58 	bl	8008678 <__assert_func>
 8007bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bcc:	6006      	str	r6, [r0, #0]
 8007bce:	60c6      	str	r6, [r0, #12]
 8007bd0:	b13c      	cbz	r4, 8007be2 <_Bfree+0x3a>
 8007bd2:	69eb      	ldr	r3, [r5, #28]
 8007bd4:	6862      	ldr	r2, [r4, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bdc:	6021      	str	r1, [r4, #0]
 8007bde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	08008e9d 	.word	0x08008e9d
 8007be8:	08008f1d 	.word	0x08008f1d

08007bec <__multadd>:
 8007bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf0:	690d      	ldr	r5, [r1, #16]
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	461e      	mov	r6, r3
 8007bf8:	f101 0c14 	add.w	ip, r1, #20
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	f8dc 3000 	ldr.w	r3, [ip]
 8007c02:	b299      	uxth	r1, r3
 8007c04:	fb02 6101 	mla	r1, r2, r1, r6
 8007c08:	0c1e      	lsrs	r6, r3, #16
 8007c0a:	0c0b      	lsrs	r3, r1, #16
 8007c0c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c10:	b289      	uxth	r1, r1
 8007c12:	3001      	adds	r0, #1
 8007c14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c18:	4285      	cmp	r5, r0
 8007c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c22:	dcec      	bgt.n	8007bfe <__multadd+0x12>
 8007c24:	b30e      	cbz	r6, 8007c6a <__multadd+0x7e>
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	42ab      	cmp	r3, r5
 8007c2a:	dc19      	bgt.n	8007c60 <__multadd+0x74>
 8007c2c:	6861      	ldr	r1, [r4, #4]
 8007c2e:	4638      	mov	r0, r7
 8007c30:	3101      	adds	r1, #1
 8007c32:	f7ff ff79 	bl	8007b28 <_Balloc>
 8007c36:	4680      	mov	r8, r0
 8007c38:	b928      	cbnz	r0, 8007c46 <__multadd+0x5a>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <__multadd+0x84>)
 8007c3e:	480d      	ldr	r0, [pc, #52]	@ (8007c74 <__multadd+0x88>)
 8007c40:	21ba      	movs	r1, #186	@ 0xba
 8007c42:	f000 fd19 	bl	8008678 <__assert_func>
 8007c46:	6922      	ldr	r2, [r4, #16]
 8007c48:	3202      	adds	r2, #2
 8007c4a:	f104 010c 	add.w	r1, r4, #12
 8007c4e:	0092      	lsls	r2, r2, #2
 8007c50:	300c      	adds	r0, #12
 8007c52:	f7ff f800 	bl	8006c56 <memcpy>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f7ff ffa5 	bl	8007ba8 <_Bfree>
 8007c5e:	4644      	mov	r4, r8
 8007c60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c64:	3501      	adds	r5, #1
 8007c66:	615e      	str	r6, [r3, #20]
 8007c68:	6125      	str	r5, [r4, #16]
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	08008f0c 	.word	0x08008f0c
 8007c74:	08008f1d 	.word	0x08008f1d

08007c78 <__hi0bits>:
 8007c78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	bf36      	itet	cc
 8007c80:	0403      	lslcc	r3, r0, #16
 8007c82:	2000      	movcs	r0, #0
 8007c84:	2010      	movcc	r0, #16
 8007c86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c8a:	bf3c      	itt	cc
 8007c8c:	021b      	lslcc	r3, r3, #8
 8007c8e:	3008      	addcc	r0, #8
 8007c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c94:	bf3c      	itt	cc
 8007c96:	011b      	lslcc	r3, r3, #4
 8007c98:	3004      	addcc	r0, #4
 8007c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c9e:	bf3c      	itt	cc
 8007ca0:	009b      	lslcc	r3, r3, #2
 8007ca2:	3002      	addcc	r0, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	db05      	blt.n	8007cb4 <__hi0bits+0x3c>
 8007ca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007cac:	f100 0001 	add.w	r0, r0, #1
 8007cb0:	bf08      	it	eq
 8007cb2:	2020      	moveq	r0, #32
 8007cb4:	4770      	bx	lr

08007cb6 <__lo0bits>:
 8007cb6:	6803      	ldr	r3, [r0, #0]
 8007cb8:	4602      	mov	r2, r0
 8007cba:	f013 0007 	ands.w	r0, r3, #7
 8007cbe:	d00b      	beq.n	8007cd8 <__lo0bits+0x22>
 8007cc0:	07d9      	lsls	r1, r3, #31
 8007cc2:	d421      	bmi.n	8007d08 <__lo0bits+0x52>
 8007cc4:	0798      	lsls	r0, r3, #30
 8007cc6:	bf49      	itett	mi
 8007cc8:	085b      	lsrmi	r3, r3, #1
 8007cca:	089b      	lsrpl	r3, r3, #2
 8007ccc:	2001      	movmi	r0, #1
 8007cce:	6013      	strmi	r3, [r2, #0]
 8007cd0:	bf5c      	itt	pl
 8007cd2:	6013      	strpl	r3, [r2, #0]
 8007cd4:	2002      	movpl	r0, #2
 8007cd6:	4770      	bx	lr
 8007cd8:	b299      	uxth	r1, r3
 8007cda:	b909      	cbnz	r1, 8007ce0 <__lo0bits+0x2a>
 8007cdc:	0c1b      	lsrs	r3, r3, #16
 8007cde:	2010      	movs	r0, #16
 8007ce0:	b2d9      	uxtb	r1, r3
 8007ce2:	b909      	cbnz	r1, 8007ce8 <__lo0bits+0x32>
 8007ce4:	3008      	adds	r0, #8
 8007ce6:	0a1b      	lsrs	r3, r3, #8
 8007ce8:	0719      	lsls	r1, r3, #28
 8007cea:	bf04      	itt	eq
 8007cec:	091b      	lsreq	r3, r3, #4
 8007cee:	3004      	addeq	r0, #4
 8007cf0:	0799      	lsls	r1, r3, #30
 8007cf2:	bf04      	itt	eq
 8007cf4:	089b      	lsreq	r3, r3, #2
 8007cf6:	3002      	addeq	r0, #2
 8007cf8:	07d9      	lsls	r1, r3, #31
 8007cfa:	d403      	bmi.n	8007d04 <__lo0bits+0x4e>
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	f100 0001 	add.w	r0, r0, #1
 8007d02:	d003      	beq.n	8007d0c <__lo0bits+0x56>
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	4770      	bx	lr
 8007d08:	2000      	movs	r0, #0
 8007d0a:	4770      	bx	lr
 8007d0c:	2020      	movs	r0, #32
 8007d0e:	4770      	bx	lr

08007d10 <__i2b>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	2101      	movs	r1, #1
 8007d16:	f7ff ff07 	bl	8007b28 <_Balloc>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	b928      	cbnz	r0, 8007d2a <__i2b+0x1a>
 8007d1e:	4b05      	ldr	r3, [pc, #20]	@ (8007d34 <__i2b+0x24>)
 8007d20:	4805      	ldr	r0, [pc, #20]	@ (8007d38 <__i2b+0x28>)
 8007d22:	f240 1145 	movw	r1, #325	@ 0x145
 8007d26:	f000 fca7 	bl	8008678 <__assert_func>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	6144      	str	r4, [r0, #20]
 8007d2e:	6103      	str	r3, [r0, #16]
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	08008f0c 	.word	0x08008f0c
 8007d38:	08008f1d 	.word	0x08008f1d

08007d3c <__multiply>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	4617      	mov	r7, r2
 8007d42:	690a      	ldr	r2, [r1, #16]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	bfa8      	it	ge
 8007d4a:	463b      	movge	r3, r7
 8007d4c:	4689      	mov	r9, r1
 8007d4e:	bfa4      	itt	ge
 8007d50:	460f      	movge	r7, r1
 8007d52:	4699      	movge	r9, r3
 8007d54:	693d      	ldr	r5, [r7, #16]
 8007d56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	eb05 060a 	add.w	r6, r5, sl
 8007d62:	42b3      	cmp	r3, r6
 8007d64:	b085      	sub	sp, #20
 8007d66:	bfb8      	it	lt
 8007d68:	3101      	addlt	r1, #1
 8007d6a:	f7ff fedd 	bl	8007b28 <_Balloc>
 8007d6e:	b930      	cbnz	r0, 8007d7e <__multiply+0x42>
 8007d70:	4602      	mov	r2, r0
 8007d72:	4b41      	ldr	r3, [pc, #260]	@ (8007e78 <__multiply+0x13c>)
 8007d74:	4841      	ldr	r0, [pc, #260]	@ (8007e7c <__multiply+0x140>)
 8007d76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d7a:	f000 fc7d 	bl	8008678 <__assert_func>
 8007d7e:	f100 0414 	add.w	r4, r0, #20
 8007d82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007d86:	4623      	mov	r3, r4
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4573      	cmp	r3, lr
 8007d8c:	d320      	bcc.n	8007dd0 <__multiply+0x94>
 8007d8e:	f107 0814 	add.w	r8, r7, #20
 8007d92:	f109 0114 	add.w	r1, r9, #20
 8007d96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007d9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	1beb      	subs	r3, r5, r7
 8007da2:	3b15      	subs	r3, #21
 8007da4:	f023 0303 	bic.w	r3, r3, #3
 8007da8:	3304      	adds	r3, #4
 8007daa:	3715      	adds	r7, #21
 8007dac:	42bd      	cmp	r5, r7
 8007dae:	bf38      	it	cc
 8007db0:	2304      	movcc	r3, #4
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	9103      	str	r1, [sp, #12]
 8007db8:	428b      	cmp	r3, r1
 8007dba:	d80c      	bhi.n	8007dd6 <__multiply+0x9a>
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	dd03      	ble.n	8007dc8 <__multiply+0x8c>
 8007dc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d055      	beq.n	8007e74 <__multiply+0x138>
 8007dc8:	6106      	str	r6, [r0, #16]
 8007dca:	b005      	add	sp, #20
 8007dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd0:	f843 2b04 	str.w	r2, [r3], #4
 8007dd4:	e7d9      	b.n	8007d8a <__multiply+0x4e>
 8007dd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dda:	f1ba 0f00 	cmp.w	sl, #0
 8007dde:	d01f      	beq.n	8007e20 <__multiply+0xe4>
 8007de0:	46c4      	mov	ip, r8
 8007de2:	46a1      	mov	r9, r4
 8007de4:	2700      	movs	r7, #0
 8007de6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007dea:	f8d9 3000 	ldr.w	r3, [r9]
 8007dee:	fa1f fb82 	uxth.w	fp, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007df8:	443b      	add	r3, r7
 8007dfa:	f8d9 7000 	ldr.w	r7, [r9]
 8007dfe:	0c12      	lsrs	r2, r2, #16
 8007e00:	0c3f      	lsrs	r7, r7, #16
 8007e02:	fb0a 7202 	mla	r2, sl, r2, r7
 8007e06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e10:	4565      	cmp	r5, ip
 8007e12:	f849 3b04 	str.w	r3, [r9], #4
 8007e16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007e1a:	d8e4      	bhi.n	8007de6 <__multiply+0xaa>
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	50e7      	str	r7, [r4, r3]
 8007e20:	9b03      	ldr	r3, [sp, #12]
 8007e22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e26:	3104      	adds	r1, #4
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	d020      	beq.n	8007e70 <__multiply+0x134>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	4647      	mov	r7, r8
 8007e32:	46a4      	mov	ip, r4
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	f8b7 b000 	ldrh.w	fp, [r7]
 8007e3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007e40:	fb09 220b 	mla	r2, r9, fp, r2
 8007e44:	4452      	add	r2, sl
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e4c:	f84c 3b04 	str.w	r3, [ip], #4
 8007e50:	f857 3b04 	ldr.w	r3, [r7], #4
 8007e54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e58:	f8bc 3000 	ldrh.w	r3, [ip]
 8007e5c:	fb09 330a 	mla	r3, r9, sl, r3
 8007e60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007e64:	42bd      	cmp	r5, r7
 8007e66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e6a:	d8e5      	bhi.n	8007e38 <__multiply+0xfc>
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	50a3      	str	r3, [r4, r2]
 8007e70:	3404      	adds	r4, #4
 8007e72:	e79f      	b.n	8007db4 <__multiply+0x78>
 8007e74:	3e01      	subs	r6, #1
 8007e76:	e7a1      	b.n	8007dbc <__multiply+0x80>
 8007e78:	08008f0c 	.word	0x08008f0c
 8007e7c:	08008f1d 	.word	0x08008f1d

08007e80 <__pow5mult>:
 8007e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e84:	4615      	mov	r5, r2
 8007e86:	f012 0203 	ands.w	r2, r2, #3
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	460e      	mov	r6, r1
 8007e8e:	d007      	beq.n	8007ea0 <__pow5mult+0x20>
 8007e90:	4c25      	ldr	r4, [pc, #148]	@ (8007f28 <__pow5mult+0xa8>)
 8007e92:	3a01      	subs	r2, #1
 8007e94:	2300      	movs	r3, #0
 8007e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e9a:	f7ff fea7 	bl	8007bec <__multadd>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	10ad      	asrs	r5, r5, #2
 8007ea2:	d03d      	beq.n	8007f20 <__pow5mult+0xa0>
 8007ea4:	69fc      	ldr	r4, [r7, #28]
 8007ea6:	b97c      	cbnz	r4, 8007ec8 <__pow5mult+0x48>
 8007ea8:	2010      	movs	r0, #16
 8007eaa:	f7ff fd87 	bl	80079bc <malloc>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	61f8      	str	r0, [r7, #28]
 8007eb2:	b928      	cbnz	r0, 8007ec0 <__pow5mult+0x40>
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8007f2c <__pow5mult+0xac>)
 8007eb6:	481e      	ldr	r0, [pc, #120]	@ (8007f30 <__pow5mult+0xb0>)
 8007eb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ebc:	f000 fbdc 	bl	8008678 <__assert_func>
 8007ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ec4:	6004      	str	r4, [r0, #0]
 8007ec6:	60c4      	str	r4, [r0, #12]
 8007ec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ed0:	b94c      	cbnz	r4, 8007ee6 <__pow5mult+0x66>
 8007ed2:	f240 2171 	movw	r1, #625	@ 0x271
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	f7ff ff1a 	bl	8007d10 <__i2b>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	07eb      	lsls	r3, r5, #31
 8007eec:	d50a      	bpl.n	8007f04 <__pow5mult+0x84>
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff ff22 	bl	8007d3c <__multiply>
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4680      	mov	r8, r0
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff fe53 	bl	8007ba8 <_Bfree>
 8007f02:	4646      	mov	r6, r8
 8007f04:	106d      	asrs	r5, r5, #1
 8007f06:	d00b      	beq.n	8007f20 <__pow5mult+0xa0>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	b938      	cbnz	r0, 8007f1c <__pow5mult+0x9c>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ff13 	bl	8007d3c <__multiply>
 8007f16:	6020      	str	r0, [r4, #0]
 8007f18:	f8c0 9000 	str.w	r9, [r0]
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	e7e4      	b.n	8007eea <__pow5mult+0x6a>
 8007f20:	4630      	mov	r0, r6
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	bf00      	nop
 8007f28:	08008fd0 	.word	0x08008fd0
 8007f2c:	08008e9d 	.word	0x08008e9d
 8007f30:	08008f1d 	.word	0x08008f1d

08007f34 <__lshift>:
 8007f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	460c      	mov	r4, r1
 8007f3a:	6849      	ldr	r1, [r1, #4]
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	4607      	mov	r7, r0
 8007f46:	4691      	mov	r9, r2
 8007f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f4c:	f108 0601 	add.w	r6, r8, #1
 8007f50:	42b3      	cmp	r3, r6
 8007f52:	db0b      	blt.n	8007f6c <__lshift+0x38>
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff fde7 	bl	8007b28 <_Balloc>
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	b948      	cbnz	r0, 8007f72 <__lshift+0x3e>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b28      	ldr	r3, [pc, #160]	@ (8008004 <__lshift+0xd0>)
 8007f62:	4829      	ldr	r0, [pc, #164]	@ (8008008 <__lshift+0xd4>)
 8007f64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f68:	f000 fb86 	bl	8008678 <__assert_func>
 8007f6c:	3101      	adds	r1, #1
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	e7ee      	b.n	8007f50 <__lshift+0x1c>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f100 0114 	add.w	r1, r0, #20
 8007f78:	f100 0210 	add.w	r2, r0, #16
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	4553      	cmp	r3, sl
 8007f80:	db33      	blt.n	8007fea <__lshift+0xb6>
 8007f82:	6920      	ldr	r0, [r4, #16]
 8007f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f88:	f104 0314 	add.w	r3, r4, #20
 8007f8c:	f019 091f 	ands.w	r9, r9, #31
 8007f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f98:	d02b      	beq.n	8007ff2 <__lshift+0xbe>
 8007f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f9e:	468a      	mov	sl, r1
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8007fa8:	4310      	orrs	r0, r2
 8007faa:	f84a 0b04 	str.w	r0, [sl], #4
 8007fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb2:	459c      	cmp	ip, r3
 8007fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fb8:	d8f3      	bhi.n	8007fa2 <__lshift+0x6e>
 8007fba:	ebac 0304 	sub.w	r3, ip, r4
 8007fbe:	3b15      	subs	r3, #21
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	f104 0015 	add.w	r0, r4, #21
 8007fca:	4560      	cmp	r0, ip
 8007fcc:	bf88      	it	hi
 8007fce:	2304      	movhi	r3, #4
 8007fd0:	50ca      	str	r2, [r1, r3]
 8007fd2:	b10a      	cbz	r2, 8007fd8 <__lshift+0xa4>
 8007fd4:	f108 0602 	add.w	r6, r8, #2
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	4638      	mov	r0, r7
 8007fdc:	612e      	str	r6, [r5, #16]
 8007fde:	4621      	mov	r1, r4
 8007fe0:	f7ff fde2 	bl	8007ba8 <_Bfree>
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fee:	3301      	adds	r3, #1
 8007ff0:	e7c5      	b.n	8007f7e <__lshift+0x4a>
 8007ff2:	3904      	subs	r1, #4
 8007ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ffc:	459c      	cmp	ip, r3
 8007ffe:	d8f9      	bhi.n	8007ff4 <__lshift+0xc0>
 8008000:	e7ea      	b.n	8007fd8 <__lshift+0xa4>
 8008002:	bf00      	nop
 8008004:	08008f0c 	.word	0x08008f0c
 8008008:	08008f1d 	.word	0x08008f1d

0800800c <__mcmp>:
 800800c:	690a      	ldr	r2, [r1, #16]
 800800e:	4603      	mov	r3, r0
 8008010:	6900      	ldr	r0, [r0, #16]
 8008012:	1a80      	subs	r0, r0, r2
 8008014:	b530      	push	{r4, r5, lr}
 8008016:	d10e      	bne.n	8008036 <__mcmp+0x2a>
 8008018:	3314      	adds	r3, #20
 800801a:	3114      	adds	r1, #20
 800801c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800802c:	4295      	cmp	r5, r2
 800802e:	d003      	beq.n	8008038 <__mcmp+0x2c>
 8008030:	d205      	bcs.n	800803e <__mcmp+0x32>
 8008032:	f04f 30ff 	mov.w	r0, #4294967295
 8008036:	bd30      	pop	{r4, r5, pc}
 8008038:	42a3      	cmp	r3, r4
 800803a:	d3f3      	bcc.n	8008024 <__mcmp+0x18>
 800803c:	e7fb      	b.n	8008036 <__mcmp+0x2a>
 800803e:	2001      	movs	r0, #1
 8008040:	e7f9      	b.n	8008036 <__mcmp+0x2a>
	...

08008044 <__mdiff>:
 8008044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	4689      	mov	r9, r1
 800804a:	4606      	mov	r6, r0
 800804c:	4611      	mov	r1, r2
 800804e:	4648      	mov	r0, r9
 8008050:	4614      	mov	r4, r2
 8008052:	f7ff ffdb 	bl	800800c <__mcmp>
 8008056:	1e05      	subs	r5, r0, #0
 8008058:	d112      	bne.n	8008080 <__mdiff+0x3c>
 800805a:	4629      	mov	r1, r5
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff fd63 	bl	8007b28 <_Balloc>
 8008062:	4602      	mov	r2, r0
 8008064:	b928      	cbnz	r0, 8008072 <__mdiff+0x2e>
 8008066:	4b3f      	ldr	r3, [pc, #252]	@ (8008164 <__mdiff+0x120>)
 8008068:	f240 2137 	movw	r1, #567	@ 0x237
 800806c:	483e      	ldr	r0, [pc, #248]	@ (8008168 <__mdiff+0x124>)
 800806e:	f000 fb03 	bl	8008678 <__assert_func>
 8008072:	2301      	movs	r3, #1
 8008074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008078:	4610      	mov	r0, r2
 800807a:	b003      	add	sp, #12
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008080:	bfbc      	itt	lt
 8008082:	464b      	movlt	r3, r9
 8008084:	46a1      	movlt	r9, r4
 8008086:	4630      	mov	r0, r6
 8008088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800808c:	bfba      	itte	lt
 800808e:	461c      	movlt	r4, r3
 8008090:	2501      	movlt	r5, #1
 8008092:	2500      	movge	r5, #0
 8008094:	f7ff fd48 	bl	8007b28 <_Balloc>
 8008098:	4602      	mov	r2, r0
 800809a:	b918      	cbnz	r0, 80080a4 <__mdiff+0x60>
 800809c:	4b31      	ldr	r3, [pc, #196]	@ (8008164 <__mdiff+0x120>)
 800809e:	f240 2145 	movw	r1, #581	@ 0x245
 80080a2:	e7e3      	b.n	800806c <__mdiff+0x28>
 80080a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080a8:	6926      	ldr	r6, [r4, #16]
 80080aa:	60c5      	str	r5, [r0, #12]
 80080ac:	f109 0310 	add.w	r3, r9, #16
 80080b0:	f109 0514 	add.w	r5, r9, #20
 80080b4:	f104 0e14 	add.w	lr, r4, #20
 80080b8:	f100 0b14 	add.w	fp, r0, #20
 80080bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	46d9      	mov	r9, fp
 80080c8:	f04f 0c00 	mov.w	ip, #0
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	fa1f f38a 	uxth.w	r3, sl
 80080dc:	4619      	mov	r1, r3
 80080de:	b283      	uxth	r3, r0
 80080e0:	1acb      	subs	r3, r1, r3
 80080e2:	0c00      	lsrs	r0, r0, #16
 80080e4:	4463      	add	r3, ip
 80080e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080f4:	4576      	cmp	r6, lr
 80080f6:	f849 3b04 	str.w	r3, [r9], #4
 80080fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080fe:	d8e5      	bhi.n	80080cc <__mdiff+0x88>
 8008100:	1b33      	subs	r3, r6, r4
 8008102:	3b15      	subs	r3, #21
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	3415      	adds	r4, #21
 800810a:	3304      	adds	r3, #4
 800810c:	42a6      	cmp	r6, r4
 800810e:	bf38      	it	cc
 8008110:	2304      	movcc	r3, #4
 8008112:	441d      	add	r5, r3
 8008114:	445b      	add	r3, fp
 8008116:	461e      	mov	r6, r3
 8008118:	462c      	mov	r4, r5
 800811a:	4544      	cmp	r4, r8
 800811c:	d30e      	bcc.n	800813c <__mdiff+0xf8>
 800811e:	f108 0103 	add.w	r1, r8, #3
 8008122:	1b49      	subs	r1, r1, r5
 8008124:	f021 0103 	bic.w	r1, r1, #3
 8008128:	3d03      	subs	r5, #3
 800812a:	45a8      	cmp	r8, r5
 800812c:	bf38      	it	cc
 800812e:	2100      	movcc	r1, #0
 8008130:	440b      	add	r3, r1
 8008132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008136:	b191      	cbz	r1, 800815e <__mdiff+0x11a>
 8008138:	6117      	str	r7, [r2, #16]
 800813a:	e79d      	b.n	8008078 <__mdiff+0x34>
 800813c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008140:	46e6      	mov	lr, ip
 8008142:	0c08      	lsrs	r0, r1, #16
 8008144:	fa1c fc81 	uxtah	ip, ip, r1
 8008148:	4471      	add	r1, lr
 800814a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800814e:	b289      	uxth	r1, r1
 8008150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008154:	f846 1b04 	str.w	r1, [r6], #4
 8008158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800815c:	e7dd      	b.n	800811a <__mdiff+0xd6>
 800815e:	3f01      	subs	r7, #1
 8008160:	e7e7      	b.n	8008132 <__mdiff+0xee>
 8008162:	bf00      	nop
 8008164:	08008f0c 	.word	0x08008f0c
 8008168:	08008f1d 	.word	0x08008f1d

0800816c <__d2b>:
 800816c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008170:	460f      	mov	r7, r1
 8008172:	2101      	movs	r1, #1
 8008174:	ec59 8b10 	vmov	r8, r9, d0
 8008178:	4616      	mov	r6, r2
 800817a:	f7ff fcd5 	bl	8007b28 <_Balloc>
 800817e:	4604      	mov	r4, r0
 8008180:	b930      	cbnz	r0, 8008190 <__d2b+0x24>
 8008182:	4602      	mov	r2, r0
 8008184:	4b23      	ldr	r3, [pc, #140]	@ (8008214 <__d2b+0xa8>)
 8008186:	4824      	ldr	r0, [pc, #144]	@ (8008218 <__d2b+0xac>)
 8008188:	f240 310f 	movw	r1, #783	@ 0x30f
 800818c:	f000 fa74 	bl	8008678 <__assert_func>
 8008190:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008198:	b10d      	cbz	r5, 800819e <__d2b+0x32>
 800819a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	f1b8 0300 	subs.w	r3, r8, #0
 80081a4:	d023      	beq.n	80081ee <__d2b+0x82>
 80081a6:	4668      	mov	r0, sp
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	f7ff fd84 	bl	8007cb6 <__lo0bits>
 80081ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081b2:	b1d0      	cbz	r0, 80081ea <__d2b+0x7e>
 80081b4:	f1c0 0320 	rsb	r3, r0, #32
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	430b      	orrs	r3, r1
 80081be:	40c2      	lsrs	r2, r0
 80081c0:	6163      	str	r3, [r4, #20]
 80081c2:	9201      	str	r2, [sp, #4]
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	61a3      	str	r3, [r4, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bf0c      	ite	eq
 80081cc:	2201      	moveq	r2, #1
 80081ce:	2202      	movne	r2, #2
 80081d0:	6122      	str	r2, [r4, #16]
 80081d2:	b1a5      	cbz	r5, 80081fe <__d2b+0x92>
 80081d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081d8:	4405      	add	r5, r0
 80081da:	603d      	str	r5, [r7, #0]
 80081dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081e0:	6030      	str	r0, [r6, #0]
 80081e2:	4620      	mov	r0, r4
 80081e4:	b003      	add	sp, #12
 80081e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ea:	6161      	str	r1, [r4, #20]
 80081ec:	e7ea      	b.n	80081c4 <__d2b+0x58>
 80081ee:	a801      	add	r0, sp, #4
 80081f0:	f7ff fd61 	bl	8007cb6 <__lo0bits>
 80081f4:	9b01      	ldr	r3, [sp, #4]
 80081f6:	6163      	str	r3, [r4, #20]
 80081f8:	3020      	adds	r0, #32
 80081fa:	2201      	movs	r2, #1
 80081fc:	e7e8      	b.n	80081d0 <__d2b+0x64>
 80081fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008202:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008206:	6038      	str	r0, [r7, #0]
 8008208:	6918      	ldr	r0, [r3, #16]
 800820a:	f7ff fd35 	bl	8007c78 <__hi0bits>
 800820e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008212:	e7e5      	b.n	80081e0 <__d2b+0x74>
 8008214:	08008f0c 	.word	0x08008f0c
 8008218:	08008f1d 	.word	0x08008f1d

0800821c <__ssputs_r>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	688e      	ldr	r6, [r1, #8]
 8008222:	461f      	mov	r7, r3
 8008224:	42be      	cmp	r6, r7
 8008226:	680b      	ldr	r3, [r1, #0]
 8008228:	4682      	mov	sl, r0
 800822a:	460c      	mov	r4, r1
 800822c:	4690      	mov	r8, r2
 800822e:	d82d      	bhi.n	800828c <__ssputs_r+0x70>
 8008230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008238:	d026      	beq.n	8008288 <__ssputs_r+0x6c>
 800823a:	6965      	ldr	r5, [r4, #20]
 800823c:	6909      	ldr	r1, [r1, #16]
 800823e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008242:	eba3 0901 	sub.w	r9, r3, r1
 8008246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800824a:	1c7b      	adds	r3, r7, #1
 800824c:	444b      	add	r3, r9
 800824e:	106d      	asrs	r5, r5, #1
 8008250:	429d      	cmp	r5, r3
 8008252:	bf38      	it	cc
 8008254:	461d      	movcc	r5, r3
 8008256:	0553      	lsls	r3, r2, #21
 8008258:	d527      	bpl.n	80082aa <__ssputs_r+0x8e>
 800825a:	4629      	mov	r1, r5
 800825c:	f7ff fbd8 	bl	8007a10 <_malloc_r>
 8008260:	4606      	mov	r6, r0
 8008262:	b360      	cbz	r0, 80082be <__ssputs_r+0xa2>
 8008264:	6921      	ldr	r1, [r4, #16]
 8008266:	464a      	mov	r2, r9
 8008268:	f7fe fcf5 	bl	8006c56 <memcpy>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	6126      	str	r6, [r4, #16]
 800827a:	6165      	str	r5, [r4, #20]
 800827c:	444e      	add	r6, r9
 800827e:	eba5 0509 	sub.w	r5, r5, r9
 8008282:	6026      	str	r6, [r4, #0]
 8008284:	60a5      	str	r5, [r4, #8]
 8008286:	463e      	mov	r6, r7
 8008288:	42be      	cmp	r6, r7
 800828a:	d900      	bls.n	800828e <__ssputs_r+0x72>
 800828c:	463e      	mov	r6, r7
 800828e:	6820      	ldr	r0, [r4, #0]
 8008290:	4632      	mov	r2, r6
 8008292:	4641      	mov	r1, r8
 8008294:	f000 f9c6 	bl	8008624 <memmove>
 8008298:	68a3      	ldr	r3, [r4, #8]
 800829a:	1b9b      	subs	r3, r3, r6
 800829c:	60a3      	str	r3, [r4, #8]
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	4433      	add	r3, r6
 80082a2:	6023      	str	r3, [r4, #0]
 80082a4:	2000      	movs	r0, #0
 80082a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082aa:	462a      	mov	r2, r5
 80082ac:	f000 fa28 	bl	8008700 <_realloc_r>
 80082b0:	4606      	mov	r6, r0
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1e0      	bne.n	8008278 <__ssputs_r+0x5c>
 80082b6:	6921      	ldr	r1, [r4, #16]
 80082b8:	4650      	mov	r0, sl
 80082ba:	f7ff fb35 	bl	8007928 <_free_r>
 80082be:	230c      	movs	r3, #12
 80082c0:	f8ca 3000 	str.w	r3, [sl]
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	e7e9      	b.n	80082a6 <__ssputs_r+0x8a>
	...

080082d4 <_svfiprintf_r>:
 80082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	4698      	mov	r8, r3
 80082da:	898b      	ldrh	r3, [r1, #12]
 80082dc:	061b      	lsls	r3, r3, #24
 80082de:	b09d      	sub	sp, #116	@ 0x74
 80082e0:	4607      	mov	r7, r0
 80082e2:	460d      	mov	r5, r1
 80082e4:	4614      	mov	r4, r2
 80082e6:	d510      	bpl.n	800830a <_svfiprintf_r+0x36>
 80082e8:	690b      	ldr	r3, [r1, #16]
 80082ea:	b973      	cbnz	r3, 800830a <_svfiprintf_r+0x36>
 80082ec:	2140      	movs	r1, #64	@ 0x40
 80082ee:	f7ff fb8f 	bl	8007a10 <_malloc_r>
 80082f2:	6028      	str	r0, [r5, #0]
 80082f4:	6128      	str	r0, [r5, #16]
 80082f6:	b930      	cbnz	r0, 8008306 <_svfiprintf_r+0x32>
 80082f8:	230c      	movs	r3, #12
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	b01d      	add	sp, #116	@ 0x74
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	2340      	movs	r3, #64	@ 0x40
 8008308:	616b      	str	r3, [r5, #20]
 800830a:	2300      	movs	r3, #0
 800830c:	9309      	str	r3, [sp, #36]	@ 0x24
 800830e:	2320      	movs	r3, #32
 8008310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008314:	f8cd 800c 	str.w	r8, [sp, #12]
 8008318:	2330      	movs	r3, #48	@ 0x30
 800831a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084b8 <_svfiprintf_r+0x1e4>
 800831e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008322:	f04f 0901 	mov.w	r9, #1
 8008326:	4623      	mov	r3, r4
 8008328:	469a      	mov	sl, r3
 800832a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800832e:	b10a      	cbz	r2, 8008334 <_svfiprintf_r+0x60>
 8008330:	2a25      	cmp	r2, #37	@ 0x25
 8008332:	d1f9      	bne.n	8008328 <_svfiprintf_r+0x54>
 8008334:	ebba 0b04 	subs.w	fp, sl, r4
 8008338:	d00b      	beq.n	8008352 <_svfiprintf_r+0x7e>
 800833a:	465b      	mov	r3, fp
 800833c:	4622      	mov	r2, r4
 800833e:	4629      	mov	r1, r5
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff ff6b 	bl	800821c <__ssputs_r>
 8008346:	3001      	adds	r0, #1
 8008348:	f000 80a7 	beq.w	800849a <_svfiprintf_r+0x1c6>
 800834c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800834e:	445a      	add	r2, fp
 8008350:	9209      	str	r2, [sp, #36]	@ 0x24
 8008352:	f89a 3000 	ldrb.w	r3, [sl]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 809f 	beq.w	800849a <_svfiprintf_r+0x1c6>
 800835c:	2300      	movs	r3, #0
 800835e:	f04f 32ff 	mov.w	r2, #4294967295
 8008362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008366:	f10a 0a01 	add.w	sl, sl, #1
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008372:	931a      	str	r3, [sp, #104]	@ 0x68
 8008374:	4654      	mov	r4, sl
 8008376:	2205      	movs	r2, #5
 8008378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837c:	484e      	ldr	r0, [pc, #312]	@ (80084b8 <_svfiprintf_r+0x1e4>)
 800837e:	f7f7 ff47 	bl	8000210 <memchr>
 8008382:	9a04      	ldr	r2, [sp, #16]
 8008384:	b9d8      	cbnz	r0, 80083be <_svfiprintf_r+0xea>
 8008386:	06d0      	lsls	r0, r2, #27
 8008388:	bf44      	itt	mi
 800838a:	2320      	movmi	r3, #32
 800838c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008390:	0711      	lsls	r1, r2, #28
 8008392:	bf44      	itt	mi
 8008394:	232b      	movmi	r3, #43	@ 0x2b
 8008396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800839a:	f89a 3000 	ldrb.w	r3, [sl]
 800839e:	2b2a      	cmp	r3, #42	@ 0x2a
 80083a0:	d015      	beq.n	80083ce <_svfiprintf_r+0xfa>
 80083a2:	9a07      	ldr	r2, [sp, #28]
 80083a4:	4654      	mov	r4, sl
 80083a6:	2000      	movs	r0, #0
 80083a8:	f04f 0c0a 	mov.w	ip, #10
 80083ac:	4621      	mov	r1, r4
 80083ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083b2:	3b30      	subs	r3, #48	@ 0x30
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d94b      	bls.n	8008450 <_svfiprintf_r+0x17c>
 80083b8:	b1b0      	cbz	r0, 80083e8 <_svfiprintf_r+0x114>
 80083ba:	9207      	str	r2, [sp, #28]
 80083bc:	e014      	b.n	80083e8 <_svfiprintf_r+0x114>
 80083be:	eba0 0308 	sub.w	r3, r0, r8
 80083c2:	fa09 f303 	lsl.w	r3, r9, r3
 80083c6:	4313      	orrs	r3, r2
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	46a2      	mov	sl, r4
 80083cc:	e7d2      	b.n	8008374 <_svfiprintf_r+0xa0>
 80083ce:	9b03      	ldr	r3, [sp, #12]
 80083d0:	1d19      	adds	r1, r3, #4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	9103      	str	r1, [sp, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bfbb      	ittet	lt
 80083da:	425b      	neglt	r3, r3
 80083dc:	f042 0202 	orrlt.w	r2, r2, #2
 80083e0:	9307      	strge	r3, [sp, #28]
 80083e2:	9307      	strlt	r3, [sp, #28]
 80083e4:	bfb8      	it	lt
 80083e6:	9204      	strlt	r2, [sp, #16]
 80083e8:	7823      	ldrb	r3, [r4, #0]
 80083ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ec:	d10a      	bne.n	8008404 <_svfiprintf_r+0x130>
 80083ee:	7863      	ldrb	r3, [r4, #1]
 80083f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083f2:	d132      	bne.n	800845a <_svfiprintf_r+0x186>
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	1d1a      	adds	r2, r3, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	9203      	str	r2, [sp, #12]
 80083fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008400:	3402      	adds	r4, #2
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084c8 <_svfiprintf_r+0x1f4>
 8008408:	7821      	ldrb	r1, [r4, #0]
 800840a:	2203      	movs	r2, #3
 800840c:	4650      	mov	r0, sl
 800840e:	f7f7 feff 	bl	8000210 <memchr>
 8008412:	b138      	cbz	r0, 8008424 <_svfiprintf_r+0x150>
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	eba0 000a 	sub.w	r0, r0, sl
 800841a:	2240      	movs	r2, #64	@ 0x40
 800841c:	4082      	lsls	r2, r0
 800841e:	4313      	orrs	r3, r2
 8008420:	3401      	adds	r4, #1
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	4824      	ldr	r0, [pc, #144]	@ (80084bc <_svfiprintf_r+0x1e8>)
 800842a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800842e:	2206      	movs	r2, #6
 8008430:	f7f7 feee 	bl	8000210 <memchr>
 8008434:	2800      	cmp	r0, #0
 8008436:	d036      	beq.n	80084a6 <_svfiprintf_r+0x1d2>
 8008438:	4b21      	ldr	r3, [pc, #132]	@ (80084c0 <_svfiprintf_r+0x1ec>)
 800843a:	bb1b      	cbnz	r3, 8008484 <_svfiprintf_r+0x1b0>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	3307      	adds	r3, #7
 8008440:	f023 0307 	bic.w	r3, r3, #7
 8008444:	3308      	adds	r3, #8
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844a:	4433      	add	r3, r6
 800844c:	9309      	str	r3, [sp, #36]	@ 0x24
 800844e:	e76a      	b.n	8008326 <_svfiprintf_r+0x52>
 8008450:	fb0c 3202 	mla	r2, ip, r2, r3
 8008454:	460c      	mov	r4, r1
 8008456:	2001      	movs	r0, #1
 8008458:	e7a8      	b.n	80083ac <_svfiprintf_r+0xd8>
 800845a:	2300      	movs	r3, #0
 800845c:	3401      	adds	r4, #1
 800845e:	9305      	str	r3, [sp, #20]
 8008460:	4619      	mov	r1, r3
 8008462:	f04f 0c0a 	mov.w	ip, #10
 8008466:	4620      	mov	r0, r4
 8008468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846c:	3a30      	subs	r2, #48	@ 0x30
 800846e:	2a09      	cmp	r2, #9
 8008470:	d903      	bls.n	800847a <_svfiprintf_r+0x1a6>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0c6      	beq.n	8008404 <_svfiprintf_r+0x130>
 8008476:	9105      	str	r1, [sp, #20]
 8008478:	e7c4      	b.n	8008404 <_svfiprintf_r+0x130>
 800847a:	fb0c 2101 	mla	r1, ip, r1, r2
 800847e:	4604      	mov	r4, r0
 8008480:	2301      	movs	r3, #1
 8008482:	e7f0      	b.n	8008466 <_svfiprintf_r+0x192>
 8008484:	ab03      	add	r3, sp, #12
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	462a      	mov	r2, r5
 800848a:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <_svfiprintf_r+0x1f0>)
 800848c:	a904      	add	r1, sp, #16
 800848e:	4638      	mov	r0, r7
 8008490:	f7fd fe6a 	bl	8006168 <_printf_float>
 8008494:	1c42      	adds	r2, r0, #1
 8008496:	4606      	mov	r6, r0
 8008498:	d1d6      	bne.n	8008448 <_svfiprintf_r+0x174>
 800849a:	89ab      	ldrh	r3, [r5, #12]
 800849c:	065b      	lsls	r3, r3, #25
 800849e:	f53f af2d 	bmi.w	80082fc <_svfiprintf_r+0x28>
 80084a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084a4:	e72c      	b.n	8008300 <_svfiprintf_r+0x2c>
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	462a      	mov	r2, r5
 80084ac:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <_svfiprintf_r+0x1f0>)
 80084ae:	a904      	add	r1, sp, #16
 80084b0:	4638      	mov	r0, r7
 80084b2:	f7fe f8f1 	bl	8006698 <_printf_i>
 80084b6:	e7ed      	b.n	8008494 <_svfiprintf_r+0x1c0>
 80084b8:	08008f76 	.word	0x08008f76
 80084bc:	08008f80 	.word	0x08008f80
 80084c0:	08006169 	.word	0x08006169
 80084c4:	0800821d 	.word	0x0800821d
 80084c8:	08008f7c 	.word	0x08008f7c

080084cc <__sflush_r>:
 80084cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d4:	0716      	lsls	r6, r2, #28
 80084d6:	4605      	mov	r5, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	d454      	bmi.n	8008586 <__sflush_r+0xba>
 80084dc:	684b      	ldr	r3, [r1, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dc02      	bgt.n	80084e8 <__sflush_r+0x1c>
 80084e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd48      	ble.n	800857a <__sflush_r+0xae>
 80084e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	d045      	beq.n	800857a <__sflush_r+0xae>
 80084ee:	2300      	movs	r3, #0
 80084f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084f4:	682f      	ldr	r7, [r5, #0]
 80084f6:	6a21      	ldr	r1, [r4, #32]
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	d030      	beq.n	800855e <__sflush_r+0x92>
 80084fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	0759      	lsls	r1, r3, #29
 8008502:	d505      	bpl.n	8008510 <__sflush_r+0x44>
 8008504:	6863      	ldr	r3, [r4, #4]
 8008506:	1ad2      	subs	r2, r2, r3
 8008508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800850a:	b10b      	cbz	r3, 8008510 <__sflush_r+0x44>
 800850c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	2300      	movs	r3, #0
 8008512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008514:	6a21      	ldr	r1, [r4, #32]
 8008516:	4628      	mov	r0, r5
 8008518:	47b0      	blx	r6
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	d106      	bne.n	800852e <__sflush_r+0x62>
 8008520:	6829      	ldr	r1, [r5, #0]
 8008522:	291d      	cmp	r1, #29
 8008524:	d82b      	bhi.n	800857e <__sflush_r+0xb2>
 8008526:	4a2a      	ldr	r2, [pc, #168]	@ (80085d0 <__sflush_r+0x104>)
 8008528:	40ca      	lsrs	r2, r1
 800852a:	07d6      	lsls	r6, r2, #31
 800852c:	d527      	bpl.n	800857e <__sflush_r+0xb2>
 800852e:	2200      	movs	r2, #0
 8008530:	6062      	str	r2, [r4, #4]
 8008532:	04d9      	lsls	r1, r3, #19
 8008534:	6922      	ldr	r2, [r4, #16]
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	d504      	bpl.n	8008544 <__sflush_r+0x78>
 800853a:	1c42      	adds	r2, r0, #1
 800853c:	d101      	bne.n	8008542 <__sflush_r+0x76>
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	b903      	cbnz	r3, 8008544 <__sflush_r+0x78>
 8008542:	6560      	str	r0, [r4, #84]	@ 0x54
 8008544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008546:	602f      	str	r7, [r5, #0]
 8008548:	b1b9      	cbz	r1, 800857a <__sflush_r+0xae>
 800854a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800854e:	4299      	cmp	r1, r3
 8008550:	d002      	beq.n	8008558 <__sflush_r+0x8c>
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff f9e8 	bl	8007928 <_free_r>
 8008558:	2300      	movs	r3, #0
 800855a:	6363      	str	r3, [r4, #52]	@ 0x34
 800855c:	e00d      	b.n	800857a <__sflush_r+0xae>
 800855e:	2301      	movs	r3, #1
 8008560:	4628      	mov	r0, r5
 8008562:	47b0      	blx	r6
 8008564:	4602      	mov	r2, r0
 8008566:	1c50      	adds	r0, r2, #1
 8008568:	d1c9      	bne.n	80084fe <__sflush_r+0x32>
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0c6      	beq.n	80084fe <__sflush_r+0x32>
 8008570:	2b1d      	cmp	r3, #29
 8008572:	d001      	beq.n	8008578 <__sflush_r+0xac>
 8008574:	2b16      	cmp	r3, #22
 8008576:	d11e      	bne.n	80085b6 <__sflush_r+0xea>
 8008578:	602f      	str	r7, [r5, #0]
 800857a:	2000      	movs	r0, #0
 800857c:	e022      	b.n	80085c4 <__sflush_r+0xf8>
 800857e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008582:	b21b      	sxth	r3, r3
 8008584:	e01b      	b.n	80085be <__sflush_r+0xf2>
 8008586:	690f      	ldr	r7, [r1, #16]
 8008588:	2f00      	cmp	r7, #0
 800858a:	d0f6      	beq.n	800857a <__sflush_r+0xae>
 800858c:	0793      	lsls	r3, r2, #30
 800858e:	680e      	ldr	r6, [r1, #0]
 8008590:	bf08      	it	eq
 8008592:	694b      	ldreq	r3, [r1, #20]
 8008594:	600f      	str	r7, [r1, #0]
 8008596:	bf18      	it	ne
 8008598:	2300      	movne	r3, #0
 800859a:	eba6 0807 	sub.w	r8, r6, r7
 800859e:	608b      	str	r3, [r1, #8]
 80085a0:	f1b8 0f00 	cmp.w	r8, #0
 80085a4:	dde9      	ble.n	800857a <__sflush_r+0xae>
 80085a6:	6a21      	ldr	r1, [r4, #32]
 80085a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085aa:	4643      	mov	r3, r8
 80085ac:	463a      	mov	r2, r7
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b0      	blx	r6
 80085b2:	2800      	cmp	r0, #0
 80085b4:	dc08      	bgt.n	80085c8 <__sflush_r+0xfc>
 80085b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c8:	4407      	add	r7, r0
 80085ca:	eba8 0800 	sub.w	r8, r8, r0
 80085ce:	e7e7      	b.n	80085a0 <__sflush_r+0xd4>
 80085d0:	20400001 	.word	0x20400001

080085d4 <_fflush_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	690b      	ldr	r3, [r1, #16]
 80085d8:	4605      	mov	r5, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b913      	cbnz	r3, 80085e4 <_fflush_r+0x10>
 80085de:	2500      	movs	r5, #0
 80085e0:	4628      	mov	r0, r5
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	b118      	cbz	r0, 80085ee <_fflush_r+0x1a>
 80085e6:	6a03      	ldr	r3, [r0, #32]
 80085e8:	b90b      	cbnz	r3, 80085ee <_fflush_r+0x1a>
 80085ea:	f7fe f9ff 	bl	80069ec <__sinit>
 80085ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f3      	beq.n	80085de <_fflush_r+0xa>
 80085f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085f8:	07d0      	lsls	r0, r2, #31
 80085fa:	d404      	bmi.n	8008606 <_fflush_r+0x32>
 80085fc:	0599      	lsls	r1, r3, #22
 80085fe:	d402      	bmi.n	8008606 <_fflush_r+0x32>
 8008600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008602:	f7fe fb26 	bl	8006c52 <__retarget_lock_acquire_recursive>
 8008606:	4628      	mov	r0, r5
 8008608:	4621      	mov	r1, r4
 800860a:	f7ff ff5f 	bl	80084cc <__sflush_r>
 800860e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008610:	07da      	lsls	r2, r3, #31
 8008612:	4605      	mov	r5, r0
 8008614:	d4e4      	bmi.n	80085e0 <_fflush_r+0xc>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	059b      	lsls	r3, r3, #22
 800861a:	d4e1      	bmi.n	80085e0 <_fflush_r+0xc>
 800861c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861e:	f7fe fb19 	bl	8006c54 <__retarget_lock_release_recursive>
 8008622:	e7dd      	b.n	80085e0 <_fflush_r+0xc>

08008624 <memmove>:
 8008624:	4288      	cmp	r0, r1
 8008626:	b510      	push	{r4, lr}
 8008628:	eb01 0402 	add.w	r4, r1, r2
 800862c:	d902      	bls.n	8008634 <memmove+0x10>
 800862e:	4284      	cmp	r4, r0
 8008630:	4623      	mov	r3, r4
 8008632:	d807      	bhi.n	8008644 <memmove+0x20>
 8008634:	1e43      	subs	r3, r0, #1
 8008636:	42a1      	cmp	r1, r4
 8008638:	d008      	beq.n	800864c <memmove+0x28>
 800863a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800863e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008642:	e7f8      	b.n	8008636 <memmove+0x12>
 8008644:	4402      	add	r2, r0
 8008646:	4601      	mov	r1, r0
 8008648:	428a      	cmp	r2, r1
 800864a:	d100      	bne.n	800864e <memmove+0x2a>
 800864c:	bd10      	pop	{r4, pc}
 800864e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008656:	e7f7      	b.n	8008648 <memmove+0x24>

08008658 <_sbrk_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d06      	ldr	r5, [pc, #24]	@ (8008674 <_sbrk_r+0x1c>)
 800865c:	2300      	movs	r3, #0
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	f7f9 fa08 	bl	8001a78 <_sbrk>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_sbrk_r+0x1a>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_sbrk_r+0x1a>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20004ec4 	.word	0x20004ec4

08008678 <__assert_func>:
 8008678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800867a:	4614      	mov	r4, r2
 800867c:	461a      	mov	r2, r3
 800867e:	4b09      	ldr	r3, [pc, #36]	@ (80086a4 <__assert_func+0x2c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4605      	mov	r5, r0
 8008684:	68d8      	ldr	r0, [r3, #12]
 8008686:	b14c      	cbz	r4, 800869c <__assert_func+0x24>
 8008688:	4b07      	ldr	r3, [pc, #28]	@ (80086a8 <__assert_func+0x30>)
 800868a:	9100      	str	r1, [sp, #0]
 800868c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008690:	4906      	ldr	r1, [pc, #24]	@ (80086ac <__assert_func+0x34>)
 8008692:	462b      	mov	r3, r5
 8008694:	f000 f870 	bl	8008778 <fiprintf>
 8008698:	f000 f880 	bl	800879c <abort>
 800869c:	4b04      	ldr	r3, [pc, #16]	@ (80086b0 <__assert_func+0x38>)
 800869e:	461c      	mov	r4, r3
 80086a0:	e7f3      	b.n	800868a <__assert_func+0x12>
 80086a2:	bf00      	nop
 80086a4:	20000020 	.word	0x20000020
 80086a8:	08008f91 	.word	0x08008f91
 80086ac:	08008f9e 	.word	0x08008f9e
 80086b0:	08008fcc 	.word	0x08008fcc

080086b4 <_calloc_r>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	fba1 5402 	umull	r5, r4, r1, r2
 80086ba:	b934      	cbnz	r4, 80086ca <_calloc_r+0x16>
 80086bc:	4629      	mov	r1, r5
 80086be:	f7ff f9a7 	bl	8007a10 <_malloc_r>
 80086c2:	4606      	mov	r6, r0
 80086c4:	b928      	cbnz	r0, 80086d2 <_calloc_r+0x1e>
 80086c6:	4630      	mov	r0, r6
 80086c8:	bd70      	pop	{r4, r5, r6, pc}
 80086ca:	220c      	movs	r2, #12
 80086cc:	6002      	str	r2, [r0, #0]
 80086ce:	2600      	movs	r6, #0
 80086d0:	e7f9      	b.n	80086c6 <_calloc_r+0x12>
 80086d2:	462a      	mov	r2, r5
 80086d4:	4621      	mov	r1, r4
 80086d6:	f7fe fa3f 	bl	8006b58 <memset>
 80086da:	e7f4      	b.n	80086c6 <_calloc_r+0x12>

080086dc <__ascii_mbtowc>:
 80086dc:	b082      	sub	sp, #8
 80086de:	b901      	cbnz	r1, 80086e2 <__ascii_mbtowc+0x6>
 80086e0:	a901      	add	r1, sp, #4
 80086e2:	b142      	cbz	r2, 80086f6 <__ascii_mbtowc+0x1a>
 80086e4:	b14b      	cbz	r3, 80086fa <__ascii_mbtowc+0x1e>
 80086e6:	7813      	ldrb	r3, [r2, #0]
 80086e8:	600b      	str	r3, [r1, #0]
 80086ea:	7812      	ldrb	r2, [r2, #0]
 80086ec:	1e10      	subs	r0, r2, #0
 80086ee:	bf18      	it	ne
 80086f0:	2001      	movne	r0, #1
 80086f2:	b002      	add	sp, #8
 80086f4:	4770      	bx	lr
 80086f6:	4610      	mov	r0, r2
 80086f8:	e7fb      	b.n	80086f2 <__ascii_mbtowc+0x16>
 80086fa:	f06f 0001 	mvn.w	r0, #1
 80086fe:	e7f8      	b.n	80086f2 <__ascii_mbtowc+0x16>

08008700 <_realloc_r>:
 8008700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008704:	4607      	mov	r7, r0
 8008706:	4614      	mov	r4, r2
 8008708:	460d      	mov	r5, r1
 800870a:	b921      	cbnz	r1, 8008716 <_realloc_r+0x16>
 800870c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008710:	4611      	mov	r1, r2
 8008712:	f7ff b97d 	b.w	8007a10 <_malloc_r>
 8008716:	b92a      	cbnz	r2, 8008724 <_realloc_r+0x24>
 8008718:	f7ff f906 	bl	8007928 <_free_r>
 800871c:	4625      	mov	r5, r4
 800871e:	4628      	mov	r0, r5
 8008720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008724:	f000 f841 	bl	80087aa <_malloc_usable_size_r>
 8008728:	4284      	cmp	r4, r0
 800872a:	4606      	mov	r6, r0
 800872c:	d802      	bhi.n	8008734 <_realloc_r+0x34>
 800872e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008732:	d8f4      	bhi.n	800871e <_realloc_r+0x1e>
 8008734:	4621      	mov	r1, r4
 8008736:	4638      	mov	r0, r7
 8008738:	f7ff f96a 	bl	8007a10 <_malloc_r>
 800873c:	4680      	mov	r8, r0
 800873e:	b908      	cbnz	r0, 8008744 <_realloc_r+0x44>
 8008740:	4645      	mov	r5, r8
 8008742:	e7ec      	b.n	800871e <_realloc_r+0x1e>
 8008744:	42b4      	cmp	r4, r6
 8008746:	4622      	mov	r2, r4
 8008748:	4629      	mov	r1, r5
 800874a:	bf28      	it	cs
 800874c:	4632      	movcs	r2, r6
 800874e:	f7fe fa82 	bl	8006c56 <memcpy>
 8008752:	4629      	mov	r1, r5
 8008754:	4638      	mov	r0, r7
 8008756:	f7ff f8e7 	bl	8007928 <_free_r>
 800875a:	e7f1      	b.n	8008740 <_realloc_r+0x40>

0800875c <__ascii_wctomb>:
 800875c:	4603      	mov	r3, r0
 800875e:	4608      	mov	r0, r1
 8008760:	b141      	cbz	r1, 8008774 <__ascii_wctomb+0x18>
 8008762:	2aff      	cmp	r2, #255	@ 0xff
 8008764:	d904      	bls.n	8008770 <__ascii_wctomb+0x14>
 8008766:	228a      	movs	r2, #138	@ 0x8a
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	4770      	bx	lr
 8008770:	700a      	strb	r2, [r1, #0]
 8008772:	2001      	movs	r0, #1
 8008774:	4770      	bx	lr
	...

08008778 <fiprintf>:
 8008778:	b40e      	push	{r1, r2, r3}
 800877a:	b503      	push	{r0, r1, lr}
 800877c:	4601      	mov	r1, r0
 800877e:	ab03      	add	r3, sp, #12
 8008780:	4805      	ldr	r0, [pc, #20]	@ (8008798 <fiprintf+0x20>)
 8008782:	f853 2b04 	ldr.w	r2, [r3], #4
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	f000 f83f 	bl	800880c <_vfiprintf_r>
 800878e:	b002      	add	sp, #8
 8008790:	f85d eb04 	ldr.w	lr, [sp], #4
 8008794:	b003      	add	sp, #12
 8008796:	4770      	bx	lr
 8008798:	20000020 	.word	0x20000020

0800879c <abort>:
 800879c:	b508      	push	{r3, lr}
 800879e:	2006      	movs	r0, #6
 80087a0:	f000 fa08 	bl	8008bb4 <raise>
 80087a4:	2001      	movs	r0, #1
 80087a6:	f7f9 f8ef 	bl	8001988 <_exit>

080087aa <_malloc_usable_size_r>:
 80087aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ae:	1f18      	subs	r0, r3, #4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bfbc      	itt	lt
 80087b4:	580b      	ldrlt	r3, [r1, r0]
 80087b6:	18c0      	addlt	r0, r0, r3
 80087b8:	4770      	bx	lr

080087ba <__sfputc_r>:
 80087ba:	6893      	ldr	r3, [r2, #8]
 80087bc:	3b01      	subs	r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	b410      	push	{r4}
 80087c2:	6093      	str	r3, [r2, #8]
 80087c4:	da08      	bge.n	80087d8 <__sfputc_r+0x1e>
 80087c6:	6994      	ldr	r4, [r2, #24]
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	db01      	blt.n	80087d0 <__sfputc_r+0x16>
 80087cc:	290a      	cmp	r1, #10
 80087ce:	d103      	bne.n	80087d8 <__sfputc_r+0x1e>
 80087d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d4:	f000 b932 	b.w	8008a3c <__swbuf_r>
 80087d8:	6813      	ldr	r3, [r2, #0]
 80087da:	1c58      	adds	r0, r3, #1
 80087dc:	6010      	str	r0, [r2, #0]
 80087de:	7019      	strb	r1, [r3, #0]
 80087e0:	4608      	mov	r0, r1
 80087e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <__sfputs_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	4614      	mov	r4, r2
 80087f0:	18d5      	adds	r5, r2, r3
 80087f2:	42ac      	cmp	r4, r5
 80087f4:	d101      	bne.n	80087fa <__sfputs_r+0x12>
 80087f6:	2000      	movs	r0, #0
 80087f8:	e007      	b.n	800880a <__sfputs_r+0x22>
 80087fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fe:	463a      	mov	r2, r7
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff ffda 	bl	80087ba <__sfputc_r>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d1f3      	bne.n	80087f2 <__sfputs_r+0xa>
 800880a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800880c <_vfiprintf_r>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	460d      	mov	r5, r1
 8008812:	b09d      	sub	sp, #116	@ 0x74
 8008814:	4614      	mov	r4, r2
 8008816:	4698      	mov	r8, r3
 8008818:	4606      	mov	r6, r0
 800881a:	b118      	cbz	r0, 8008824 <_vfiprintf_r+0x18>
 800881c:	6a03      	ldr	r3, [r0, #32]
 800881e:	b90b      	cbnz	r3, 8008824 <_vfiprintf_r+0x18>
 8008820:	f7fe f8e4 	bl	80069ec <__sinit>
 8008824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008826:	07d9      	lsls	r1, r3, #31
 8008828:	d405      	bmi.n	8008836 <_vfiprintf_r+0x2a>
 800882a:	89ab      	ldrh	r3, [r5, #12]
 800882c:	059a      	lsls	r2, r3, #22
 800882e:	d402      	bmi.n	8008836 <_vfiprintf_r+0x2a>
 8008830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008832:	f7fe fa0e 	bl	8006c52 <__retarget_lock_acquire_recursive>
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	071b      	lsls	r3, r3, #28
 800883a:	d501      	bpl.n	8008840 <_vfiprintf_r+0x34>
 800883c:	692b      	ldr	r3, [r5, #16]
 800883e:	b99b      	cbnz	r3, 8008868 <_vfiprintf_r+0x5c>
 8008840:	4629      	mov	r1, r5
 8008842:	4630      	mov	r0, r6
 8008844:	f000 f938 	bl	8008ab8 <__swsetup_r>
 8008848:	b170      	cbz	r0, 8008868 <_vfiprintf_r+0x5c>
 800884a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800884c:	07dc      	lsls	r4, r3, #31
 800884e:	d504      	bpl.n	800885a <_vfiprintf_r+0x4e>
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	b01d      	add	sp, #116	@ 0x74
 8008856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	0598      	lsls	r0, r3, #22
 800885e:	d4f7      	bmi.n	8008850 <_vfiprintf_r+0x44>
 8008860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008862:	f7fe f9f7 	bl	8006c54 <__retarget_lock_release_recursive>
 8008866:	e7f3      	b.n	8008850 <_vfiprintf_r+0x44>
 8008868:	2300      	movs	r3, #0
 800886a:	9309      	str	r3, [sp, #36]	@ 0x24
 800886c:	2320      	movs	r3, #32
 800886e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008872:	f8cd 800c 	str.w	r8, [sp, #12]
 8008876:	2330      	movs	r3, #48	@ 0x30
 8008878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a28 <_vfiprintf_r+0x21c>
 800887c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008880:	f04f 0901 	mov.w	r9, #1
 8008884:	4623      	mov	r3, r4
 8008886:	469a      	mov	sl, r3
 8008888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800888c:	b10a      	cbz	r2, 8008892 <_vfiprintf_r+0x86>
 800888e:	2a25      	cmp	r2, #37	@ 0x25
 8008890:	d1f9      	bne.n	8008886 <_vfiprintf_r+0x7a>
 8008892:	ebba 0b04 	subs.w	fp, sl, r4
 8008896:	d00b      	beq.n	80088b0 <_vfiprintf_r+0xa4>
 8008898:	465b      	mov	r3, fp
 800889a:	4622      	mov	r2, r4
 800889c:	4629      	mov	r1, r5
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ffa2 	bl	80087e8 <__sfputs_r>
 80088a4:	3001      	adds	r0, #1
 80088a6:	f000 80a7 	beq.w	80089f8 <_vfiprintf_r+0x1ec>
 80088aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088ac:	445a      	add	r2, fp
 80088ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80088b0:	f89a 3000 	ldrb.w	r3, [sl]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 809f 	beq.w	80089f8 <_vfiprintf_r+0x1ec>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f04f 32ff 	mov.w	r2, #4294967295
 80088c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088c4:	f10a 0a01 	add.w	sl, sl, #1
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	9307      	str	r3, [sp, #28]
 80088cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80088d2:	4654      	mov	r4, sl
 80088d4:	2205      	movs	r2, #5
 80088d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088da:	4853      	ldr	r0, [pc, #332]	@ (8008a28 <_vfiprintf_r+0x21c>)
 80088dc:	f7f7 fc98 	bl	8000210 <memchr>
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	b9d8      	cbnz	r0, 800891c <_vfiprintf_r+0x110>
 80088e4:	06d1      	lsls	r1, r2, #27
 80088e6:	bf44      	itt	mi
 80088e8:	2320      	movmi	r3, #32
 80088ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ee:	0713      	lsls	r3, r2, #28
 80088f0:	bf44      	itt	mi
 80088f2:	232b      	movmi	r3, #43	@ 0x2b
 80088f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088f8:	f89a 3000 	ldrb.w	r3, [sl]
 80088fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80088fe:	d015      	beq.n	800892c <_vfiprintf_r+0x120>
 8008900:	9a07      	ldr	r2, [sp, #28]
 8008902:	4654      	mov	r4, sl
 8008904:	2000      	movs	r0, #0
 8008906:	f04f 0c0a 	mov.w	ip, #10
 800890a:	4621      	mov	r1, r4
 800890c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008910:	3b30      	subs	r3, #48	@ 0x30
 8008912:	2b09      	cmp	r3, #9
 8008914:	d94b      	bls.n	80089ae <_vfiprintf_r+0x1a2>
 8008916:	b1b0      	cbz	r0, 8008946 <_vfiprintf_r+0x13a>
 8008918:	9207      	str	r2, [sp, #28]
 800891a:	e014      	b.n	8008946 <_vfiprintf_r+0x13a>
 800891c:	eba0 0308 	sub.w	r3, r0, r8
 8008920:	fa09 f303 	lsl.w	r3, r9, r3
 8008924:	4313      	orrs	r3, r2
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	46a2      	mov	sl, r4
 800892a:	e7d2      	b.n	80088d2 <_vfiprintf_r+0xc6>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	1d19      	adds	r1, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9103      	str	r1, [sp, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	bfbb      	ittet	lt
 8008938:	425b      	neglt	r3, r3
 800893a:	f042 0202 	orrlt.w	r2, r2, #2
 800893e:	9307      	strge	r3, [sp, #28]
 8008940:	9307      	strlt	r3, [sp, #28]
 8008942:	bfb8      	it	lt
 8008944:	9204      	strlt	r2, [sp, #16]
 8008946:	7823      	ldrb	r3, [r4, #0]
 8008948:	2b2e      	cmp	r3, #46	@ 0x2e
 800894a:	d10a      	bne.n	8008962 <_vfiprintf_r+0x156>
 800894c:	7863      	ldrb	r3, [r4, #1]
 800894e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008950:	d132      	bne.n	80089b8 <_vfiprintf_r+0x1ac>
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	1d1a      	adds	r2, r3, #4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	9203      	str	r2, [sp, #12]
 800895a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800895e:	3402      	adds	r4, #2
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a38 <_vfiprintf_r+0x22c>
 8008966:	7821      	ldrb	r1, [r4, #0]
 8008968:	2203      	movs	r2, #3
 800896a:	4650      	mov	r0, sl
 800896c:	f7f7 fc50 	bl	8000210 <memchr>
 8008970:	b138      	cbz	r0, 8008982 <_vfiprintf_r+0x176>
 8008972:	9b04      	ldr	r3, [sp, #16]
 8008974:	eba0 000a 	sub.w	r0, r0, sl
 8008978:	2240      	movs	r2, #64	@ 0x40
 800897a:	4082      	lsls	r2, r0
 800897c:	4313      	orrs	r3, r2
 800897e:	3401      	adds	r4, #1
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008986:	4829      	ldr	r0, [pc, #164]	@ (8008a2c <_vfiprintf_r+0x220>)
 8008988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800898c:	2206      	movs	r2, #6
 800898e:	f7f7 fc3f 	bl	8000210 <memchr>
 8008992:	2800      	cmp	r0, #0
 8008994:	d03f      	beq.n	8008a16 <_vfiprintf_r+0x20a>
 8008996:	4b26      	ldr	r3, [pc, #152]	@ (8008a30 <_vfiprintf_r+0x224>)
 8008998:	bb1b      	cbnz	r3, 80089e2 <_vfiprintf_r+0x1d6>
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	3307      	adds	r3, #7
 800899e:	f023 0307 	bic.w	r3, r3, #7
 80089a2:	3308      	adds	r3, #8
 80089a4:	9303      	str	r3, [sp, #12]
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	443b      	add	r3, r7
 80089aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ac:	e76a      	b.n	8008884 <_vfiprintf_r+0x78>
 80089ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b2:	460c      	mov	r4, r1
 80089b4:	2001      	movs	r0, #1
 80089b6:	e7a8      	b.n	800890a <_vfiprintf_r+0xfe>
 80089b8:	2300      	movs	r3, #0
 80089ba:	3401      	adds	r4, #1
 80089bc:	9305      	str	r3, [sp, #20]
 80089be:	4619      	mov	r1, r3
 80089c0:	f04f 0c0a 	mov.w	ip, #10
 80089c4:	4620      	mov	r0, r4
 80089c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ca:	3a30      	subs	r2, #48	@ 0x30
 80089cc:	2a09      	cmp	r2, #9
 80089ce:	d903      	bls.n	80089d8 <_vfiprintf_r+0x1cc>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0c6      	beq.n	8008962 <_vfiprintf_r+0x156>
 80089d4:	9105      	str	r1, [sp, #20]
 80089d6:	e7c4      	b.n	8008962 <_vfiprintf_r+0x156>
 80089d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089dc:	4604      	mov	r4, r0
 80089de:	2301      	movs	r3, #1
 80089e0:	e7f0      	b.n	80089c4 <_vfiprintf_r+0x1b8>
 80089e2:	ab03      	add	r3, sp, #12
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	462a      	mov	r2, r5
 80089e8:	4b12      	ldr	r3, [pc, #72]	@ (8008a34 <_vfiprintf_r+0x228>)
 80089ea:	a904      	add	r1, sp, #16
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7fd fbbb 	bl	8006168 <_printf_float>
 80089f2:	4607      	mov	r7, r0
 80089f4:	1c78      	adds	r0, r7, #1
 80089f6:	d1d6      	bne.n	80089a6 <_vfiprintf_r+0x19a>
 80089f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089fa:	07d9      	lsls	r1, r3, #31
 80089fc:	d405      	bmi.n	8008a0a <_vfiprintf_r+0x1fe>
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	059a      	lsls	r2, r3, #22
 8008a02:	d402      	bmi.n	8008a0a <_vfiprintf_r+0x1fe>
 8008a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a06:	f7fe f925 	bl	8006c54 <__retarget_lock_release_recursive>
 8008a0a:	89ab      	ldrh	r3, [r5, #12]
 8008a0c:	065b      	lsls	r3, r3, #25
 8008a0e:	f53f af1f 	bmi.w	8008850 <_vfiprintf_r+0x44>
 8008a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a14:	e71e      	b.n	8008854 <_vfiprintf_r+0x48>
 8008a16:	ab03      	add	r3, sp, #12
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	4b05      	ldr	r3, [pc, #20]	@ (8008a34 <_vfiprintf_r+0x228>)
 8008a1e:	a904      	add	r1, sp, #16
 8008a20:	4630      	mov	r0, r6
 8008a22:	f7fd fe39 	bl	8006698 <_printf_i>
 8008a26:	e7e4      	b.n	80089f2 <_vfiprintf_r+0x1e6>
 8008a28:	08008f76 	.word	0x08008f76
 8008a2c:	08008f80 	.word	0x08008f80
 8008a30:	08006169 	.word	0x08006169
 8008a34:	080087e9 	.word	0x080087e9
 8008a38:	08008f7c 	.word	0x08008f7c

08008a3c <__swbuf_r>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	460e      	mov	r6, r1
 8008a40:	4614      	mov	r4, r2
 8008a42:	4605      	mov	r5, r0
 8008a44:	b118      	cbz	r0, 8008a4e <__swbuf_r+0x12>
 8008a46:	6a03      	ldr	r3, [r0, #32]
 8008a48:	b90b      	cbnz	r3, 8008a4e <__swbuf_r+0x12>
 8008a4a:	f7fd ffcf 	bl	80069ec <__sinit>
 8008a4e:	69a3      	ldr	r3, [r4, #24]
 8008a50:	60a3      	str	r3, [r4, #8]
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	071a      	lsls	r2, r3, #28
 8008a56:	d501      	bpl.n	8008a5c <__swbuf_r+0x20>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	b943      	cbnz	r3, 8008a6e <__swbuf_r+0x32>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f000 f82a 	bl	8008ab8 <__swsetup_r>
 8008a64:	b118      	cbz	r0, 8008a6e <__swbuf_r+0x32>
 8008a66:	f04f 37ff 	mov.w	r7, #4294967295
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	6922      	ldr	r2, [r4, #16]
 8008a72:	1a98      	subs	r0, r3, r2
 8008a74:	6963      	ldr	r3, [r4, #20]
 8008a76:	b2f6      	uxtb	r6, r6
 8008a78:	4283      	cmp	r3, r0
 8008a7a:	4637      	mov	r7, r6
 8008a7c:	dc05      	bgt.n	8008a8a <__swbuf_r+0x4e>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f7ff fda7 	bl	80085d4 <_fflush_r>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d1ed      	bne.n	8008a66 <__swbuf_r+0x2a>
 8008a8a:	68a3      	ldr	r3, [r4, #8]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	60a3      	str	r3, [r4, #8]
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	6022      	str	r2, [r4, #0]
 8008a96:	701e      	strb	r6, [r3, #0]
 8008a98:	6962      	ldr	r2, [r4, #20]
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d004      	beq.n	8008aaa <__swbuf_r+0x6e>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	07db      	lsls	r3, r3, #31
 8008aa4:	d5e1      	bpl.n	8008a6a <__swbuf_r+0x2e>
 8008aa6:	2e0a      	cmp	r6, #10
 8008aa8:	d1df      	bne.n	8008a6a <__swbuf_r+0x2e>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7ff fd91 	bl	80085d4 <_fflush_r>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d0d9      	beq.n	8008a6a <__swbuf_r+0x2e>
 8008ab6:	e7d6      	b.n	8008a66 <__swbuf_r+0x2a>

08008ab8 <__swsetup_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4b29      	ldr	r3, [pc, #164]	@ (8008b60 <__swsetup_r+0xa8>)
 8008abc:	4605      	mov	r5, r0
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	b118      	cbz	r0, 8008acc <__swsetup_r+0x14>
 8008ac4:	6a03      	ldr	r3, [r0, #32]
 8008ac6:	b90b      	cbnz	r3, 8008acc <__swsetup_r+0x14>
 8008ac8:	f7fd ff90 	bl	80069ec <__sinit>
 8008acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad0:	0719      	lsls	r1, r3, #28
 8008ad2:	d422      	bmi.n	8008b1a <__swsetup_r+0x62>
 8008ad4:	06da      	lsls	r2, r3, #27
 8008ad6:	d407      	bmi.n	8008ae8 <__swsetup_r+0x30>
 8008ad8:	2209      	movs	r2, #9
 8008ada:	602a      	str	r2, [r5, #0]
 8008adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae6:	e033      	b.n	8008b50 <__swsetup_r+0x98>
 8008ae8:	0758      	lsls	r0, r3, #29
 8008aea:	d512      	bpl.n	8008b12 <__swsetup_r+0x5a>
 8008aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aee:	b141      	cbz	r1, 8008b02 <__swsetup_r+0x4a>
 8008af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d002      	beq.n	8008afe <__swsetup_r+0x46>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7fe ff15 	bl	8007928 <_free_r>
 8008afe:	2300      	movs	r3, #0
 8008b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	f043 0308 	orr.w	r3, r3, #8
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	b94b      	cbnz	r3, 8008b32 <__swsetup_r+0x7a>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b28:	d003      	beq.n	8008b32 <__swsetup_r+0x7a>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 f883 	bl	8008c38 <__smakebuf_r>
 8008b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b36:	f013 0201 	ands.w	r2, r3, #1
 8008b3a:	d00a      	beq.n	8008b52 <__swsetup_r+0x9a>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	60a2      	str	r2, [r4, #8]
 8008b40:	6962      	ldr	r2, [r4, #20]
 8008b42:	4252      	negs	r2, r2
 8008b44:	61a2      	str	r2, [r4, #24]
 8008b46:	6922      	ldr	r2, [r4, #16]
 8008b48:	b942      	cbnz	r2, 8008b5c <__swsetup_r+0xa4>
 8008b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b4e:	d1c5      	bne.n	8008adc <__swsetup_r+0x24>
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	0799      	lsls	r1, r3, #30
 8008b54:	bf58      	it	pl
 8008b56:	6962      	ldrpl	r2, [r4, #20]
 8008b58:	60a2      	str	r2, [r4, #8]
 8008b5a:	e7f4      	b.n	8008b46 <__swsetup_r+0x8e>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7f7      	b.n	8008b50 <__swsetup_r+0x98>
 8008b60:	20000020 	.word	0x20000020

08008b64 <_raise_r>:
 8008b64:	291f      	cmp	r1, #31
 8008b66:	b538      	push	{r3, r4, r5, lr}
 8008b68:	4605      	mov	r5, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	d904      	bls.n	8008b78 <_raise_r+0x14>
 8008b6e:	2316      	movs	r3, #22
 8008b70:	6003      	str	r3, [r0, #0]
 8008b72:	f04f 30ff 	mov.w	r0, #4294967295
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b7a:	b112      	cbz	r2, 8008b82 <_raise_r+0x1e>
 8008b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b80:	b94b      	cbnz	r3, 8008b96 <_raise_r+0x32>
 8008b82:	4628      	mov	r0, r5
 8008b84:	f000 f830 	bl	8008be8 <_getpid_r>
 8008b88:	4622      	mov	r2, r4
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b92:	f000 b817 	b.w	8008bc4 <_kill_r>
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d00a      	beq.n	8008bb0 <_raise_r+0x4c>
 8008b9a:	1c59      	adds	r1, r3, #1
 8008b9c:	d103      	bne.n	8008ba6 <_raise_r+0x42>
 8008b9e:	2316      	movs	r3, #22
 8008ba0:	6003      	str	r3, [r0, #0]
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	e7e7      	b.n	8008b76 <_raise_r+0x12>
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bac:	4620      	mov	r0, r4
 8008bae:	4798      	blx	r3
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e7e0      	b.n	8008b76 <_raise_r+0x12>

08008bb4 <raise>:
 8008bb4:	4b02      	ldr	r3, [pc, #8]	@ (8008bc0 <raise+0xc>)
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	f7ff bfd3 	b.w	8008b64 <_raise_r>
 8008bbe:	bf00      	nop
 8008bc0:	20000020 	.word	0x20000020

08008bc4 <_kill_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d07      	ldr	r5, [pc, #28]	@ (8008be4 <_kill_r+0x20>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	4611      	mov	r1, r2
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	f7f8 fec9 	bl	8001968 <_kill>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	d102      	bne.n	8008be0 <_kill_r+0x1c>
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	b103      	cbz	r3, 8008be0 <_kill_r+0x1c>
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	bd38      	pop	{r3, r4, r5, pc}
 8008be2:	bf00      	nop
 8008be4:	20004ec4 	.word	0x20004ec4

08008be8 <_getpid_r>:
 8008be8:	f7f8 beb6 	b.w	8001958 <_getpid>

08008bec <__swhatbuf_r>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	460c      	mov	r4, r1
 8008bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	b096      	sub	sp, #88	@ 0x58
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	461e      	mov	r6, r3
 8008bfc:	da0d      	bge.n	8008c1a <__swhatbuf_r+0x2e>
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c04:	f04f 0100 	mov.w	r1, #0
 8008c08:	bf14      	ite	ne
 8008c0a:	2340      	movne	r3, #64	@ 0x40
 8008c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c10:	2000      	movs	r0, #0
 8008c12:	6031      	str	r1, [r6, #0]
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	b016      	add	sp, #88	@ 0x58
 8008c18:	bd70      	pop	{r4, r5, r6, pc}
 8008c1a:	466a      	mov	r2, sp
 8008c1c:	f000 f848 	bl	8008cb0 <_fstat_r>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dbec      	blt.n	8008bfe <__swhatbuf_r+0x12>
 8008c24:	9901      	ldr	r1, [sp, #4]
 8008c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c2e:	4259      	negs	r1, r3
 8008c30:	4159      	adcs	r1, r3
 8008c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c36:	e7eb      	b.n	8008c10 <__swhatbuf_r+0x24>

08008c38 <__smakebuf_r>:
 8008c38:	898b      	ldrh	r3, [r1, #12]
 8008c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c3c:	079d      	lsls	r5, r3, #30
 8008c3e:	4606      	mov	r6, r0
 8008c40:	460c      	mov	r4, r1
 8008c42:	d507      	bpl.n	8008c54 <__smakebuf_r+0x1c>
 8008c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	6163      	str	r3, [r4, #20]
 8008c50:	b003      	add	sp, #12
 8008c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c54:	ab01      	add	r3, sp, #4
 8008c56:	466a      	mov	r2, sp
 8008c58:	f7ff ffc8 	bl	8008bec <__swhatbuf_r>
 8008c5c:	9f00      	ldr	r7, [sp, #0]
 8008c5e:	4605      	mov	r5, r0
 8008c60:	4639      	mov	r1, r7
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7fe fed4 	bl	8007a10 <_malloc_r>
 8008c68:	b948      	cbnz	r0, 8008c7e <__smakebuf_r+0x46>
 8008c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6e:	059a      	lsls	r2, r3, #22
 8008c70:	d4ee      	bmi.n	8008c50 <__smakebuf_r+0x18>
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	f043 0302 	orr.w	r3, r3, #2
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	e7e2      	b.n	8008c44 <__smakebuf_r+0xc>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	6020      	str	r0, [r4, #0]
 8008c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c8e:	b15b      	cbz	r3, 8008ca8 <__smakebuf_r+0x70>
 8008c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c94:	4630      	mov	r0, r6
 8008c96:	f000 f81d 	bl	8008cd4 <_isatty_r>
 8008c9a:	b128      	cbz	r0, 8008ca8 <__smakebuf_r+0x70>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	f023 0303 	bic.w	r3, r3, #3
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	431d      	orrs	r5, r3
 8008cac:	81a5      	strh	r5, [r4, #12]
 8008cae:	e7cf      	b.n	8008c50 <__smakebuf_r+0x18>

08008cb0 <_fstat_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d07      	ldr	r5, [pc, #28]	@ (8008cd0 <_fstat_r+0x20>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	4611      	mov	r1, r2
 8008cbc:	602b      	str	r3, [r5, #0]
 8008cbe:	f7f8 feb3 	bl	8001a28 <_fstat>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	d102      	bne.n	8008ccc <_fstat_r+0x1c>
 8008cc6:	682b      	ldr	r3, [r5, #0]
 8008cc8:	b103      	cbz	r3, 8008ccc <_fstat_r+0x1c>
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	bd38      	pop	{r3, r4, r5, pc}
 8008cce:	bf00      	nop
 8008cd0:	20004ec4 	.word	0x20004ec4

08008cd4 <_isatty_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d06      	ldr	r5, [pc, #24]	@ (8008cf0 <_isatty_r+0x1c>)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	f7f8 feb2 	bl	8001a48 <_isatty>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_isatty_r+0x1a>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_isatty_r+0x1a>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	20004ec4 	.word	0x20004ec4

08008cf4 <_init>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr

08008d00 <_fini>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr
