
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a028  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800a1f8  0800a1f8  0000b1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7d4  0800a7d4  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a7d4  0800a7d4  0000b7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7dc  0800a7dc  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7dc  0800a7dc  0000b7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7e0  0800a7e0  0000b7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a7e4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004da4  200001dc  0800a9c0  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f80  0800a9c0  0000cf80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016546  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9f  00000000  00000000  00022752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000262f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  00027578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261ae  00000000  00000000  0002839c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170a5  00000000  00000000  0004e54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e25c1  00000000  00000000  000655ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147bb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d04  00000000  00000000  00147bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0014d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1e0 	.word	0x0800a1e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800a1e0 	.word	0x0800a1e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <PLC_ProcessTask>:
static uint8_t checksum(const uint8_t * data, size_t len);

QueueHandle_t xQueuePLC = NULL;

void PLC_ProcessTask(void *param)
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
    (void)param;
    while (1)
    {
		mPrint("PLC Task is running...\n");
 8000fbc:	4890      	ldr	r0, [pc, #576]	@ (8001200 <PLC_ProcessTask+0x24c>)
 8000fbe:	f000 fa45 	bl	800144c <mPrint>
        PLC_Read_Pin_Input();
 8000fc2:	f000 f9e5 	bl	8001390 <PLC_Read_Pin_Input>
        /*--------------NetWork 1 -----------*/

        volatile uint8_t I0_0sl0 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	75fb      	strb	r3, [r7, #23]
        volatile static uint8_t checkEU0 = 1;
        if (!(I0_0))
 8000fca:	4b8e      	ldr	r3, [pc, #568]	@ (8001204 <PLC_ProcessTask+0x250>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <PLC_ProcessTask+0x26>
        {
            checkEU0 = 0;
 8000fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8001208 <PLC_ProcessTask+0x254>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
        }
        if ((!checkEU0) && (I0_0))
 8000fda:	4b8b      	ldr	r3, [pc, #556]	@ (8001208 <PLC_ProcessTask+0x254>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <PLC_ProcessTask+0x44>
 8000fe4:	4b87      	ldr	r3, [pc, #540]	@ (8001204 <PLC_ProcessTask+0x250>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <PLC_ProcessTask+0x44>
        {
            checkEU0 = 1;
 8000fee:	4b86      	ldr	r3, [pc, #536]	@ (8001208 <PLC_ProcessTask+0x254>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
            I0_0sl0 = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
        }
        M0_0 = (((I0_0sl0 + M0_0)) * !I0_1);
 8000ff8:	4b84      	ldr	r3, [pc, #528]	@ (800120c <PLC_ProcessTask+0x258>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b7f      	ldr	r3, [pc, #508]	@ (8001204 <PLC_ProcessTask+0x250>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	fb12 f303 	smulbb	r3, r2, r3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b7b      	ldr	r3, [pc, #492]	@ (800120c <PLC_ProcessTask+0x258>)
 8001020:	701a      	strb	r2, [r3, #0]
        if (M0_0 > 0)
 8001022:	4b7a      	ldr	r3, [pc, #488]	@ (800120c <PLC_ProcessTask+0x258>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <PLC_ProcessTask+0x80>
        {
            M0_0 = 1;
 800102c:	4b77      	ldr	r3, [pc, #476]	@ (800120c <PLC_ProcessTask+0x258>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e002      	b.n	800103a <PLC_ProcessTask+0x86>
        }
        else
        {
            M0_0 = 0;
 8001034:	4b75      	ldr	r3, [pc, #468]	@ (800120c <PLC_ProcessTask+0x258>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
        }
        /*--------------NetWork 2 -----------*/
        if ((M0_0))
 800103a:	4b74      	ldr	r3, [pc, #464]	@ (800120c <PLC_ProcessTask+0x258>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <PLC_ProcessTask+0x9a>
            u16VW1 = AI[0]; // Đọc giá trị cảm biến từ AI[0] (DMA cập nhật)
 8001044:	4b72      	ldr	r3, [pc, #456]	@ (8001210 <PLC_ProcessTask+0x25c>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b72      	ldr	r3, [pc, #456]	@ (8001214 <PLC_ProcessTask+0x260>)
 800104c:	805a      	strh	r2, [r3, #2]
        M1_1 = (M0_0);
 800104e:	4b6f      	ldr	r3, [pc, #444]	@ (800120c <PLC_ProcessTask+0x258>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b6d      	ldr	r3, [pc, #436]	@ (800120c <PLC_ProcessTask+0x258>)
 8001056:	725a      	strb	r2, [r3, #9]
        if (M1_1 > 0)
 8001058:	4b6c      	ldr	r3, [pc, #432]	@ (800120c <PLC_ProcessTask+0x258>)
 800105a:	7a5b      	ldrb	r3, [r3, #9]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <PLC_ProcessTask+0xb6>
        {
            M1_1 = 1;
 8001062:	4b6a      	ldr	r3, [pc, #424]	@ (800120c <PLC_ProcessTask+0x258>)
 8001064:	2201      	movs	r2, #1
 8001066:	725a      	strb	r2, [r3, #9]
 8001068:	e002      	b.n	8001070 <PLC_ProcessTask+0xbc>
        }
        else
        {
            M1_1 = 0;
 800106a:	4b68      	ldr	r3, [pc, #416]	@ (800120c <PLC_ProcessTask+0x258>)
 800106c:	2200      	movs	r2, #0
 800106e:	725a      	strb	r2, [r3, #9]
        }
        /*--------------NetWork 3 -----------*/

        if ((M0_0))
 8001070:	4b66      	ldr	r3, [pc, #408]	@ (800120c <PLC_ProcessTask+0x258>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <PLC_ProcessTask+0xd2>
            u32VD[0] = (uint32_t)u16VW1;
 800107a:	4b66      	ldr	r3, [pc, #408]	@ (8001214 <PLC_ProcessTask+0x260>)
 800107c:	885b      	ldrh	r3, [r3, #2]
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4b65      	ldr	r3, [pc, #404]	@ (8001218 <PLC_ProcessTask+0x264>)
 8001084:	601a      	str	r2, [r3, #0]
        /*--------------NetWork 4 -----------*/

        if ((M0_0))
 8001086:	4b61      	ldr	r3, [pc, #388]	@ (800120c <PLC_ProcessTask+0x258>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <PLC_ProcessTask+0xee>
            f32VD[0] = (float)u32VD[0];
 8001090:	4b61      	ldr	r3, [pc, #388]	@ (8001218 <PLC_ProcessTask+0x264>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109c:	4b5f      	ldr	r3, [pc, #380]	@ (800121c <PLC_ProcessTask+0x268>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
        /*--------------NetWork 5 -----------*/

        if ((M0_0))
 80010a2:	4b5a      	ldr	r3, [pc, #360]	@ (800120c <PLC_ProcessTask+0x258>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <PLC_ProcessTask+0x114>
            f32VD[0] = (f32VD[0] / 4095.0f) * 3300.0f; // Đổi ADC 12bit (0..4095) về mV (Vref=3.3V)
 80010ac:	4b5b      	ldr	r3, [pc, #364]	@ (800121c <PLC_ProcessTask+0x268>)
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001220 <PLC_ProcessTask+0x26c>
 80010b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001224 <PLC_ProcessTask+0x270>
 80010be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c2:	4b56      	ldr	r3, [pc, #344]	@ (800121c <PLC_ProcessTask+0x268>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
        /*--------------NetWork 6 -----------*/

        if ((M0_0))
 80010c8:	4b50      	ldr	r3, [pc, #320]	@ (800120c <PLC_ProcessTask+0x258>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <PLC_ProcessTask+0x132>
            f32VD[0] = f32VD[0] / 10.0f; // Đổi mV sang độ C cho LM35 (10mV/°C, not offset)
 80010d2:	4b52      	ldr	r3, [pc, #328]	@ (800121c <PLC_ProcessTask+0x268>)
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	4b4e      	ldr	r3, [pc, #312]	@ (800121c <PLC_ProcessTask+0x268>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]
        /*--------------NetWork 7 -----------*/

        volatile uint8_t u8Compare0 = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75bb      	strb	r3, [r7, #22]
        u8Compare0 = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	75bb      	strb	r3, [r7, #22]
        if (f32VD[0] >= 50.0)
 80010ee:	4b4b      	ldr	r3, [pc, #300]	@ (800121c <PLC_ProcessTask+0x268>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001228 <PLC_ProcessTask+0x274>
 80010f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	db01      	blt.n	8001106 <PLC_ProcessTask+0x152>
        {
            u8Compare0 = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	75bb      	strb	r3, [r7, #22]
        }
        Q0_0 = (M0_0 * u8Compare0);
 8001106:	4b41      	ldr	r3, [pc, #260]	@ (800120c <PLC_ProcessTask+0x258>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	7dbb      	ldrb	r3, [r7, #22]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	fb12 f303 	smulbb	r3, r2, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b45      	ldr	r3, [pc, #276]	@ (800122c <PLC_ProcessTask+0x278>)
 8001118:	701a      	strb	r2, [r3, #0]
        if (Q0_0 > 0)
 800111a:	4b44      	ldr	r3, [pc, #272]	@ (800122c <PLC_ProcessTask+0x278>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <PLC_ProcessTask+0x178>
        {
            Q0_0 = 1;
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <PLC_ProcessTask+0x278>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e002      	b.n	8001132 <PLC_ProcessTask+0x17e>
        }
        else
        {
            Q0_0 = 0;
 800112c:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <PLC_ProcessTask+0x278>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
        }
        PLC_Write_Pin_Output();
 8001132:	f000 f951 	bl	80013d8 <PLC_Write_Pin_Output>

        /* Set data to queue */
        PLC_DataFrame_t sendFrame;
        if (xQueuePLC != NULL)
 8001136:	4b3e      	ldr	r3, [pc, #248]	@ (8001230 <PLC_ProcessTask+0x27c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d040      	beq.n	80011c0 <PLC_ProcessTask+0x20c>
        {
            sendFrame.led_status = Q0_0; // Set LED status
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <PLC_ProcessTask+0x278>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	723b      	strb	r3, [r7, #8]
            sendFrame.reserved[0] = 0; // Reserved bytes
 8001146:	2300      	movs	r3, #0
 8001148:	727b      	strb	r3, [r7, #9]
            sendFrame.reserved[1] = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	72bb      	strb	r3, [r7, #10]
            sendFrame.reserved[2] = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	72fb      	strb	r3, [r7, #11]
            sendFrame.temperature.fsensor_v = f32VD[0];
 8001152:	4b32      	ldr	r3, [pc, #200]	@ (800121c <PLC_ProcessTask+0x268>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]
            sendFrame.temperature_fake.fsensor_v = RAND_SENSOR_VALUE; // Simulated sensor value
 8001158:	f006 f99e 	bl	8007498 <rand>
 800115c:	ee07 0a90 	vmov	s15, r0
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001234 <PLC_ProcessTask+0x280>
 8001168:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800116c:	ee16 0a90 	vmov	r0, s13
 8001170:	f7ff fa0a 	bl	8000588 <__aeabi_f2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <PLC_ProcessTask+0x284>)
 800117a:	f7ff fa5d 	bl	8000638 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <PLC_ProcessTask+0x284>)
 800118c:	f7ff f89e 	bl	80002cc <__adddf3>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fd26 	bl	8000be8 <__aeabi_d2f>
 800119c:	4603      	mov	r3, r0
 800119e:	613b      	str	r3, [r7, #16]

            if (xQueueSend(xQueuePLC, &sendFrame, portMAX_DELAY) != pdPASS)
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <PLC_ProcessTask+0x27c>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f107 0108 	add.w	r1, r7, #8
 80011a8:	2300      	movs	r3, #0
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	f003 fed9 	bl	8004f64 <xQueueGenericSend>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d006      	beq.n	80011c6 <PLC_ProcessTask+0x212>
            {
                mPrint("Failed to send data to queue\n");
 80011b8:	4820      	ldr	r0, [pc, #128]	@ (800123c <PLC_ProcessTask+0x288>)
 80011ba:	f000 f947 	bl	800144c <mPrint>
 80011be:	e002      	b.n	80011c6 <PLC_ProcessTask+0x212>
            }
        }
        else
        {
            mPrint("Queue is NULL\n");
 80011c0:	481f      	ldr	r0, [pc, #124]	@ (8001240 <PLC_ProcessTask+0x28c>)
 80011c2:	f000 f943 	bl	800144c <mPrint>
        }

        mPrint("LED Status: %d, \
                Temperature Sensor Value: %.2f °C, \
                Temperature Fake Value: %.2f °C\n",
                Q0_0, f32VD[0], sendFrame.temperature_fake.fsensor_v);
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <PLC_ProcessTask+0x278>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
        mPrint("LED Status: %d, \
 80011cc:	461e      	mov	r6, r3
                Q0_0, f32VD[0], sendFrame.temperature_fake.fsensor_v);
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <PLC_ProcessTask+0x268>)
 80011d0:	681b      	ldr	r3, [r3, #0]
        mPrint("LED Status: %d, \
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9d8 	bl	8000588 <__aeabi_f2d>
 80011d8:	4604      	mov	r4, r0
 80011da:	460d      	mov	r5, r1
                Q0_0, f32VD[0], sendFrame.temperature_fake.fsensor_v);
 80011dc:	693b      	ldr	r3, [r7, #16]
        mPrint("LED Status: %d, \
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9d2 	bl	8000588 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	e9cd 2300 	strd	r2, r3, [sp]
 80011ec:	4622      	mov	r2, r4
 80011ee:	462b      	mov	r3, r5
 80011f0:	4631      	mov	r1, r6
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <PLC_ProcessTask+0x290>)
 80011f4:	f000 f92a 	bl	800144c <mPrint>
        osDelay(100); // Delay to simulate PLC cycle time
 80011f8:	2064      	movs	r0, #100	@ 0x64
 80011fa:	f003 fc69 	bl	8004ad0 <osDelay>
    {
 80011fe:	e6dd      	b.n	8000fbc <PLC_ProcessTask+0x8>
 8001200:	0800a1f8 	.word	0x0800a1f8
 8001204:	200001f8 	.word	0x200001f8
 8001208:	20000000 	.word	0x20000000
 800120c:	20000238 	.word	0x20000238
 8001210:	20000210 	.word	0x20000210
 8001214:	20000250 	.word	0x20000250
 8001218:	20000260 	.word	0x20000260
 800121c:	20000280 	.word	0x20000280
 8001220:	457ff000 	.word	0x457ff000
 8001224:	454e4000 	.word	0x454e4000
 8001228:	42480000 	.word	0x42480000
 800122c:	20000220 	.word	0x20000220
 8001230:	200002a0 	.word	0x200002a0
 8001234:	4f000000 	.word	0x4f000000
 8001238:	403e0000 	.word	0x403e0000
 800123c:	0800a210 	.word	0x0800a210
 8001240:	0800a230 	.word	0x0800a230
 8001244:	0800a240 	.word	0x0800a240

08001248 <PLC_SendDataTask>:
    }
}

void PLC_SendDataTask(void * argument) {
 8001248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800124c:	b08b      	sub	sp, #44	@ 0x2c
 800124e:	af02      	add	r7, sp, #8
 8001250:	6078      	str	r0, [r7, #4]
    
    for (;;)
    {
        mPrint("Notify task running...\n");
 8001252:	484a      	ldr	r0, [pc, #296]	@ (800137c <PLC_SendDataTask+0x134>)
 8001254:	f000 f8fa 	bl	800144c <mPrint>

        if (xQueuePLC != NULL)
 8001258:	4b49      	ldr	r3, [pc, #292]	@ (8001380 <PLC_SendDataTask+0x138>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 8085 	beq.w	800136c <PLC_SendDataTask+0x124>
        {
 8001262:	466b      	mov	r3, sp
 8001264:	461e      	mov	r6, r3
            PLC_DataFrame_t receivedData;
            if (xQueueReceive(xQueuePLC, &receivedData, portMAX_DELAY) == pdTRUE)
 8001266:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <PLC_SendDataTask+0x138>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f107 0108 	add.w	r1, r7, #8
 800126e:	f04f 32ff 	mov.w	r2, #4294967295
 8001272:	4618      	mov	r0, r3
 8001274:	f004 f816 	bl	80052a4 <xQueueReceive>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d11c      	bne.n	80012b8 <PLC_SendDataTask+0x70>
            {
                mSendCommand((uint8_t *)&receivedData, sizeof(PLC_DataFrame_t));
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	210c      	movs	r1, #12
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f911 	bl	80014ac <mSendCommand>
                mPrint("Received data: LED Status: %d, \
                        Temperature Sensor Value: %.2f °C, \
                        Temperature Fake Value: %.2f °C\n",
                        receivedData.led_status, receivedData.temperature.fsensor_v, receivedData.temperature_fake.fsensor_v);
 800128a:	7a3b      	ldrb	r3, [r7, #8]
                mPrint("Received data: LED Status: %d, \
 800128c:	603b      	str	r3, [r7, #0]
                        receivedData.led_status, receivedData.temperature.fsensor_v, receivedData.temperature_fake.fsensor_v);
 800128e:	68fb      	ldr	r3, [r7, #12]
                mPrint("Received data: LED Status: %d, \
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f979 	bl	8000588 <__aeabi_f2d>
 8001296:	4682      	mov	sl, r0
 8001298:	468b      	mov	fp, r1
                        receivedData.led_status, receivedData.temperature.fsensor_v, receivedData.temperature_fake.fsensor_v);
 800129a:	693b      	ldr	r3, [r7, #16]
                mPrint("Received data: LED Status: %d, \
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f973 	bl	8000588 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	e9cd 2300 	strd	r2, r3, [sp]
 80012aa:	4652      	mov	r2, sl
 80012ac:	465b      	mov	r3, fp
 80012ae:	6839      	ldr	r1, [r7, #0]
 80012b0:	4834      	ldr	r0, [pc, #208]	@ (8001384 <PLC_SendDataTask+0x13c>)
 80012b2:	f000 f8cb 	bl	800144c <mPrint>
 80012b6:	e002      	b.n	80012be <PLC_SendDataTask+0x76>
            }
            else
            {
                mPrint("Failed to receive data from queue\n");
 80012b8:	4833      	ldr	r0, [pc, #204]	@ (8001388 <PLC_SendDataTask+0x140>)
 80012ba:	f000 f8c7 	bl	800144c <mPrint>
            }

            const uint8_t LEN = sizeof(PLC_DataFrame_t);
 80012be:	230c      	movs	r3, #12
 80012c0:	77fb      	strb	r3, [r7, #31]
            uint8_t cs = (LEN + checksum((uint8_t *)&receivedData, LEN)) & 0xFF;
 80012c2:	7ffa      	ldrb	r2, [r7, #31]
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f89c 	bl	8001408 <checksum>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	4413      	add	r3, r2
 80012d8:	77bb      	strb	r3, [r7, #30]
            
            uint8_t frame[LEN + 3];
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	3302      	adds	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	7ffb      	ldrb	r3, [r7, #31]
 80012e2:	3303      	adds	r3, #3
 80012e4:	2200      	movs	r2, #0
 80012e6:	461c      	mov	r4, r3
 80012e8:	4615      	mov	r5, r2
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	00eb      	lsls	r3, r5, #3
 80012f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012f8:	00e2      	lsls	r2, r4, #3
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	3303      	adds	r3, #3
 80012fe:	2200      	movs	r2, #0
 8001300:	4698      	mov	r8, r3
 8001302:	4691      	mov	r9, r2
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001310:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001314:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	3303      	adds	r3, #3
 800131c:	3307      	adds	r3, #7
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	ebad 0d03 	sub.w	sp, sp, r3
 8001326:	ab02      	add	r3, sp, #8
 8001328:	3300      	adds	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
            memset(frame, 0, sizeof(frame));
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	3303      	adds	r3, #3
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	6978      	ldr	r0, [r7, #20]
 8001336:	f006 fe85 	bl	8008044 <memset>

            frame[0] = 0xAA; // Start byte
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	22aa      	movs	r2, #170	@ 0xaa
 800133e:	701a      	strb	r2, [r3, #0]
            frame[1] = LEN; // Length of the data
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	7ffa      	ldrb	r2, [r7, #31]
 8001344:	705a      	strb	r2, [r3, #1]
            memcpy(&frame[2], (uint8_t *)&receivedData, LEN);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3302      	adds	r3, #2
 800134a:	7ffa      	ldrb	r2, [r7, #31]
 800134c:	f107 0108 	add.w	r1, r7, #8
 8001350:	4618      	mov	r0, r3
 8001352:	f006 fef6 	bl	8008142 <memcpy>
            frame[LEN+2] = cs;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	3302      	adds	r3, #2
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	7fb9      	ldrb	r1, [r7, #30]
 800135e:	54d1      	strb	r1, [r2, r3]
            mSendCommand(frame, sizeof(PLC_DataFrame_t)+3);
 8001360:	210f      	movs	r1, #15
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f000 f8a2 	bl	80014ac <mSendCommand>
 8001368:	46b5      	mov	sp, r6
 800136a:	e002      	b.n	8001372 <PLC_SendDataTask+0x12a>
        }
        else
        {
            mPrint("Queue is NULL in Notify Task\n");
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <PLC_SendDataTask+0x144>)
 800136e:	f000 f86d 	bl	800144c <mPrint>
        }

        osDelay(250);
 8001372:	20fa      	movs	r0, #250	@ 0xfa
 8001374:	f003 fbac 	bl	8004ad0 <osDelay>
        mPrint("Notify task running...\n");
 8001378:	e76b      	b.n	8001252 <PLC_SendDataTask+0xa>
 800137a:	bf00      	nop
 800137c:	0800a2b8 	.word	0x0800a2b8
 8001380:	200002a0 	.word	0x200002a0
 8001384:	0800a2d0 	.word	0x0800a2d0
 8001388:	0800a368 	.word	0x0800a368
 800138c:	0800a38c 	.word	0x0800a38c

08001390 <PLC_Read_Pin_Input>:
    }
    /* USER CODE END 5 */
}

void PLC_Read_Pin_Input(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    I0_0 = !HAL_GPIO_ReadPin(I0_0_PORT, I0_0_PIN);
 8001394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <PLC_Read_Pin_Input+0x40>)
 800139a:	f002 f8ff 	bl	800359c <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <PLC_Read_Pin_Input+0x44>)
 80013ae:	701a      	strb	r2, [r3, #0]
    I0_1 = !HAL_GPIO_ReadPin(I0_1_PORT, I0_1_PIN);
 80013b0:	2101      	movs	r1, #1
 80013b2:	4807      	ldr	r0, [pc, #28]	@ (80013d0 <PLC_Read_Pin_Input+0x40>)
 80013b4:	f002 f8f2 	bl	800359c <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <PLC_Read_Pin_Input+0x44>)
 80013c8:	705a      	strb	r2, [r3, #1]
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020800 	.word	0x40020800
 80013d4:	200001f8 	.word	0x200001f8

080013d8 <PLC_Write_Pin_Output>:


void PLC_Write_Pin_Output(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    if (Q0_0 >= 1)
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <PLC_Write_Pin_Output+0x28>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <PLC_Write_Pin_Output+0x1a>
    {
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, ENABLE); /* Set Q0_0 pin for LED */
 80013e6:	2201      	movs	r2, #1
 80013e8:	2120      	movs	r1, #32
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <PLC_Write_Pin_Output+0x2c>)
 80013ec:	f002 f8ee 	bl	80035cc <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE); /* Reset Q0_0 pin for LED */
    }
}
 80013f0:	e004      	b.n	80013fc <PLC_Write_Pin_Output+0x24>
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE); /* Reset Q0_0 pin for LED */
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	4803      	ldr	r0, [pc, #12]	@ (8001404 <PLC_Write_Pin_Output+0x2c>)
 80013f8:	f002 f8e8 	bl	80035cc <HAL_GPIO_WritePin>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000220 	.word	0x20000220
 8001404:	40020000 	.word	0x40020000

08001408 <checksum>:

static uint8_t checksum(const uint8_t * data, size_t len)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
    uint16_t sum = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < len; i++) 
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	e00a      	b.n	8001432 <checksum+0x2a>
        sum += data[i];
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	4413      	add	r3, r2
 800142a:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < len; i++) 
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3f0      	bcc.n	800141c <checksum+0x14>
    return sum & 0xFF;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	b2db      	uxtb	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <mPrint>:
#include "mPrint.h"

char mPrintBuffer[PRINT_BUFFER_SIZE];

void mPrint (const char * format, ...)
{
 800144c:	b40f      	push	{r0, r1, r2, r3}
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
    memset(mPrintBuffer, 0, sizeof(mPrintBuffer));
 8001454:	22fa      	movs	r2, #250	@ 0xfa
 8001456:	2100      	movs	r1, #0
 8001458:	4812      	ldr	r0, [pc, #72]	@ (80014a4 <mPrint+0x58>)
 800145a:	f006 fdf3 	bl	8008044 <memset>
    va_list args;
    va_start(args, format);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(mPrintBuffer, sizeof(mPrintBuffer), format, args);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	21fa      	movs	r1, #250	@ 0xfa
 800146a:	480e      	ldr	r0, [pc, #56]	@ (80014a4 <mPrint+0x58>)
 800146c:	f006 fddc 	bl	8008028 <vsniprintf>
 8001470:	6078      	str	r0, [r7, #4]
    va_end(args);
    if (len < 0) len = 0;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da01      	bge.n	800147c <mPrint+0x30>
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
    if (len >= sizeof(mPrintBuffer)) len = sizeof(mPrintBuffer) - 1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001480:	d901      	bls.n	8001486 <mPrint+0x3a>
 8001482:	23f9      	movs	r3, #249	@ 0xf9
 8001484:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)mPrintBuffer, (uint16_t)len, 100);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	b29a      	uxth	r2, r3
 800148a:	2364      	movs	r3, #100	@ 0x64
 800148c:	4905      	ldr	r1, [pc, #20]	@ (80014a4 <mPrint+0x58>)
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <mPrint+0x5c>)
 8001490:	f002 ff3e 	bl	8004310 <HAL_UART_Transmit>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800149e:	b004      	add	sp, #16
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200002a4 	.word	0x200002a4
 80014a8:	200003e8 	.word	0x200003e8

080014ac <mSendCommand>:

void mSendCommand(const uint8_t *data, size_t len) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) return;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00a      	beq.n	80014d2 <mSendCommand+0x26>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <mSendCommand+0x26>
    HAL_UART_Transmit(&huart1, data, len, 100); // Gửi toàn bộ dữ liệu nhị phân
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	2364      	movs	r3, #100	@ 0x64
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <mSendCommand+0x30>)
 80014cc:	f002 ff20 	bl	8004310 <HAL_UART_Transmit>
 80014d0:	e000      	b.n	80014d4 <mSendCommand+0x28>
    if (data == NULL || len == 0) return;
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200003a0 	.word	0x200003a0

080014e0 <main>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);

static void PLC_Init(void);

int main(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af02      	add	r7, sp, #8
    HAL_Init();
 80014e6:	f000 fc91 	bl	8001e0c <HAL_Init>
    SystemClock_Config();
 80014ea:	f000 f843 	bl	8001574 <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80014ee:	f000 f909 	bl	8001704 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80014f2:	f000 f8dd 	bl	80016b0 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 80014f6:	f000 f8b1 	bl	800165c <MX_USART1_UART_Init>
    MX_DMA_Init();
 80014fa:	f000 f97f 	bl	80017fc <MX_DMA_Init>
    MX_ADC1_Init();
 80014fe:	f000 f99d 	bl	800183c <MX_ADC1_Init>

    // Chỉ gọi 1 lần, dùng AI làm buffer
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AI, 8);
 8001502:	2208      	movs	r2, #8
 8001504:	4915      	ldr	r1, [pc, #84]	@ (800155c <main+0x7c>)
 8001506:	4816      	ldr	r0, [pc, #88]	@ (8001560 <main+0x80>)
 8001508:	f000 fe46 	bl	8002198 <HAL_ADC_Start_DMA>

    osKernelInitialize();
 800150c:	f003 fabc 	bl	8004a88 <osKernelInitialize>

    PLC_Init();
 8001510:	f000 f9fc 	bl	800190c <PLC_Init>

    BaseType_t notifyTaskHandle = xTaskCreate(
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2303      	movs	r3, #3
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001522:	4910      	ldr	r1, [pc, #64]	@ (8001564 <main+0x84>)
 8001524:	4810      	ldr	r0, [pc, #64]	@ (8001568 <main+0x88>)
 8001526:	f004 f96d 	bl	8005804 <xTaskCreate>
 800152a:	6078      	str	r0, [r7, #4]
        1024 * 1,
        NULL,
        3,
        NULL
    );
    BaseType_t plcOprateTaskHandle = xTaskCreate(
 800152c:	2300      	movs	r3, #0
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2302      	movs	r3, #2
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153a:	490c      	ldr	r1, [pc, #48]	@ (800156c <main+0x8c>)
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <main+0x90>)
 800153e:	f004 f961 	bl	8005804 <xTaskCreate>
 8001542:	6038      	str	r0, [r7, #0]
        NULL,
        2,
        NULL
    );

    if (notifyTaskHandle != pdPASS || plcOprateTaskHandle != pdPASS)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <main+0x70>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d001      	beq.n	8001554 <main+0x74>
    {
        Error_Handler();
 8001550:	f000 f9f0 	bl	8001934 <Error_Handler>
    }

    /* Start scheduler */
    vTaskStartScheduler();
 8001554:	f004 fad2 	bl	8005afc <vTaskStartScheduler>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    while (1) {}
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <main+0x78>
 800155c:	20000210 	.word	0x20000210
 8001560:	20000430 	.word	0x20000430
 8001564:	0800a3ac 	.word	0x0800a3ac
 8001568:	08001249 	.word	0x08001249
 800156c:	0800a3bc 	.word	0x0800a3bc
 8001570:	08000fb5 	.word	0x08000fb5

08001574 <SystemClock_Config>:
}

void SystemClock_Config(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	@ 0x50
 8001578:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2234      	movs	r2, #52	@ 0x34
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f006 fd5e 	bl	8008044 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <SystemClock_Config+0xe0>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001654 <SystemClock_Config+0xe0>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <SystemClock_Config+0xe0>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <SystemClock_Config+0xe4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <SystemClock_Config+0xe4>)
 80015be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <SystemClock_Config+0xe4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d8:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 80015e4:	2308      	movs	r3, #8
 80015e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 360;
 80015e8:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80015ec:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fb98 	bl	8003d34 <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x9a>
        Error_Handler();
 800160a:	f000 f993 	bl	8001934 <Error_Handler>
    }

    if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800160e:	f001 fff7 	bl	8003600 <HAL_PWREx_EnableOverDrive>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0xa8>
        Error_Handler();
 8001618:	f000 f98c 	bl	8001934 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800161c:	230f      	movs	r3, #15
 800161e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2302      	movs	r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001628:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800162c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	2105      	movs	r1, #5
 800163a:	4618      	mov	r0, r3
 800163c:	f002 f830 	bl	80036a0 <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xd6>
        Error_Handler();
 8001646:	f000 f975 	bl	8001934 <Error_Handler>
    }
}
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	@ 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 8001662:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <MX_USART1_UART_Init+0x50>)
 8001664:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_USART1_UART_Init+0x4c>)
 8001694:	f002 fdec 	bl	8004270 <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 800169e:	f000 f949 	bl	8001934 <Error_Handler>
    }
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200003a0 	.word	0x200003a0
 80016ac:	40011000 	.word	0x40011000

080016b0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <MX_USART2_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e8:	f002 fdc2 	bl	8004270 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80016f2:	f000 f91f 	bl	8001934 <Error_Handler>
    }
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200003e8 	.word	0x200003e8
 8001700:	40004400 	.word	0x40004400

08001704 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a33      	ldr	r2, [pc, #204]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <MX_GPIO_Init+0xec>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <MX_GPIO_Init+0xec>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a2c      	ldr	r2, [pc, #176]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a25      	ldr	r2, [pc, #148]	@ (80017f0 <MX_GPIO_Init+0xec>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a1e      	ldr	r2, [pc, #120]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <MX_GPIO_Init+0xec>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	21e0      	movs	r1, #224	@ 0xe0
 800178e:	4819      	ldr	r0, [pc, #100]	@ (80017f4 <MX_GPIO_Init+0xf0>)
 8001790:	f001 ff1c 	bl	80035cc <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = B1_Pin;
 8001794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4813      	ldr	r0, [pc, #76]	@ (80017f8 <MX_GPIO_Init+0xf4>)
 80017ac:	f001 fd62 	bl	8003274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B2_Pin;
 80017b0:	2301      	movs	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <MX_GPIO_Init+0xf4>)
 80017c6:	f001 fd55 	bl	8003274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 80017ca:	23e0      	movs	r3, #224	@ 0xe0
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_GPIO_Init+0xf0>)
 80017e2:	f001 fd47 	bl	8003274 <HAL_GPIO_Init>
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	@ 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020800 	.word	0x40020800

080017fc <MX_DMA_Init>:

void MX_DMA_Init(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_DMA_Init+0x3c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a0b      	ldr	r2, [pc, #44]	@ (8001838 <MX_DMA_Init+0x3c>)
 800180c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_DMA_Init+0x3c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2105      	movs	r1, #5
 8001822:	2038      	movs	r0, #56	@ 0x38
 8001824:	f001 f97f 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001828:	2038      	movs	r0, #56	@ 0x38
 800182a:	f001 f998 	bl	8002b5e <HAL_NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]

    hadc1.Instance = ADC1;
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001850:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <MX_ADC1_Init+0x9c>)
 8001852:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001856:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800185a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800185c:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <MX_ADC1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_ADC1_Init+0x98>)
 800186a:	2201      	movs	r2, #1
 800186c:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001878:	2200      	movs	r2, #0
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <MX_ADC1_Init+0x98>)
 800187e:	4a17      	ldr	r2, [pc, #92]	@ (80018dc <MX_ADC1_Init+0xa0>)
 8001880:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <MX_ADC1_Init+0x98>)
 800188a:	2201      	movs	r2, #1
 800188c:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = ENABLE;
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <MX_ADC1_Init+0x98>)
 8001898:	2201      	movs	r2, #1
 800189a:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189c:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <MX_ADC1_Init+0x98>)
 800189e:	f000 fb27 	bl	8001ef0 <HAL_ADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 80018a8:	f000 f844 	bl	8001934 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <MX_ADC1_Init+0x98>)
 80018be:	f000 fd9d 	bl	80023fc <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x90>
    {
        Error_Handler();
 80018c8:	f000 f834 	bl	8001934 <Error_Handler>
    }
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000430 	.word	0x20000430
 80018d8:	40012000 	.word	0x40012000
 80018dc:	0f000001 	.word	0x0f000001

080018e0 <HAL_ADC_ConvCpltCallback>:

// Callback chỉ set flag, không gọi lại HAL_ADC_Start_DMA
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <HAL_ADC_ConvCpltCallback+0x24>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d102      	bne.n	80018f8 <HAL_ADC_ConvCpltCallback+0x18>
        DataReadyFlag = 1;
 80018f2:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_ADC_ConvCpltCallback+0x28>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
    }
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40012000 	.word	0x40012000
 8001908:	200004d8 	.word	0x200004d8

0800190c <PLC_Init>:

static void PLC_Init(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
    xQueuePLC = xQueueCreate(10, sizeof(PLC_DataFrame_t));
 8001910:	2200      	movs	r2, #0
 8001912:	210c      	movs	r1, #12
 8001914:	200a      	movs	r0, #10
 8001916:	f003 fac6 	bl	8004ea6 <xQueueGenericCreate>
 800191a:	4603      	mov	r3, r0
 800191c:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <PLC_Init+0x24>)
 800191e:	6013      	str	r3, [r2, #0]

    if (xQueuePLC == NULL) {
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <PLC_Init+0x24>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <PLC_Init+0x20>
        Error_Handler();
 8001928:	f000 f804 	bl	8001934 <Error_Handler>
    }
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200002a0 	.word	0x200002a0

08001934 <Error_Handler>:

void Error_Handler(void) {
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
    __disable_irq();
    while (1) {}
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <Error_Handler+0x8>

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_MspInit+0x54>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <HAL_MspInit+0x54>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001954:	6453      	str	r3, [r2, #68]	@ 0x44
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_MspInit+0x54>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_MspInit+0x54>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_MspInit+0x54>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <HAL_MspInit+0x54>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	210f      	movs	r1, #15
 8001982:	f06f 0001 	mvn.w	r0, #1
 8001986:	f001 f8ce 	bl	8002b26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a33      	ldr	r2, [pc, #204]	@ (8001a84 <HAL_ADC_MspInit+0xec>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d15f      	bne.n	8001a7a <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b32      	ldr	r3, [pc, #200]	@ (8001a88 <HAL_ADC_MspInit+0xf0>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a31      	ldr	r2, [pc, #196]	@ (8001a88 <HAL_ADC_MspInit+0xf0>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001a88 <HAL_ADC_MspInit+0xf0>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <HAL_ADC_MspInit+0xf0>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a2a      	ldr	r2, [pc, #168]	@ (8001a88 <HAL_ADC_MspInit+0xf0>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b28      	ldr	r3, [pc, #160]	@ (8001a88 <HAL_ADC_MspInit+0xf0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019f2:	2302      	movs	r3, #2
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f6:	2303      	movs	r3, #3
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4821      	ldr	r0, [pc, #132]	@ (8001a8c <HAL_ADC_MspInit+0xf4>)
 8001a06:	f001 fc35 	bl	8003274 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a0c:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <HAL_ADC_MspInit+0xfc>)
 8001a0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a42:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a4e:	4810      	ldr	r0, [pc, #64]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a50:	f001 f8a0 	bl	8002b94 <HAL_DMA_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a5a:	f7ff ff6b 	bl	8001934 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a62:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a64:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <HAL_ADC_MspInit+0xf8>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	2012      	movs	r0, #18
 8001a70:	f001 f859 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a74:	2012      	movs	r0, #18
 8001a76:	f001 f872 	bl	8002b5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	@ 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40012000 	.word	0x40012000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	20000478 	.word	0x20000478
 8001a94:	40026410 	.word	0x40026410

08001a98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	@ 0x30
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a32      	ldr	r2, [pc, #200]	@ (8001b80 <HAL_UART_MspInit+0xe8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12d      	bne.n	8001b16 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a30      	ldr	r2, [pc, #192]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001af2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b04:	2307      	movs	r3, #7
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481e      	ldr	r0, [pc, #120]	@ (8001b88 <HAL_UART_MspInit+0xf0>)
 8001b10:	f001 fbb0 	bl	8003274 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b14:	e030      	b.n	8001b78 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_UART_MspInit+0xf4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d12b      	bne.n	8001b78 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <HAL_UART_MspInit+0xec>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b58:	230c      	movs	r3, #12
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <HAL_UART_MspInit+0xf0>)
 8001b74:	f001 fb7e 	bl	8003274 <HAL_GPIO_Init>
}
 8001b78:	bf00      	nop
 8001b7a:	3730      	adds	r7, #48	@ 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40011000 	.word	0x40011000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40004400 	.word	0x40004400

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <NMI_Handler+0x4>

08001b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <HardFault_Handler+0x4>

08001ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <MemManage_Handler+0x4>

08001ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bca:	f000 f971 	bl	8001eb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bce:	f004 fbe3 	bl	8006398 <xTaskGetSchedulerState>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bd8:	f005 f9de 	bl	8006f98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <ADC_IRQHandler+0x10>)
 8001be6:	f000 f9c6 	bl	8001f76 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000430 	.word	0x20000430

08001bf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <DMA2_Stream0_IRQHandler+0x10>)
 8001bfa:	f001 f8d1 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000478 	.word	0x20000478

08001c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_kill>:

int _kill(int pid, int sig)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c22:	f006 fa61 	bl	80080e8 <__errno>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2216      	movs	r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_exit>:

void _exit (int status)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffe7 	bl	8001c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c4a:	bf00      	nop
 8001c4c:	e7fd      	b.n	8001c4a <_exit+0x12>

08001c4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e00a      	b.n	8001c76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c60:	f3af 8000 	nop.w
 8001c64:	4601      	mov	r1, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	60ba      	str	r2, [r7, #8]
 8001c6c:	b2ca      	uxtb	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf0      	blt.n	8001c60 <_read+0x12>
  }

  return len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e009      	b.n	8001cae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dbf1      	blt.n	8001c9a <_write+0x12>
  }
  return len;
 8001cb6:	687b      	ldr	r3, [r7, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_close>:

int _close(int file)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_isatty>:

int _isatty(int file)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f006 f9c6 	bl	80080e8 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20020000 	.word	0x20020000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	200004dc 	.word	0x200004dc
 8001d90:	20004f80 	.word	0x20004f80

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dbc:	f7ff ffea 	bl	8001d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc0:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc2:	490d      	ldr	r1, [pc, #52]	@ (8001df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f006 f985 	bl	80080f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff fb79 	bl	80014e0 <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001dfc:	0800a7e4 	.word	0x0800a7e4
  ldr r2, =_sbss
 8001e00:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e04:	20004f80 	.word	0x20004f80

08001e08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <CAN1_RX0_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 fe6b 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fd7e 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fe83 	bl	8002b7a <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 fe4b 	bl	8002b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	2000000c 	.word	0x2000000c
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	200004e0 	.word	0x200004e0

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	200004e0 	.word	0x200004e0

08001ef0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e033      	b.n	8001f6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fd42 	bl	8001998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d118      	bne.n	8001f60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	f043 0202 	orr.w	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fb8c 	bl	8002660 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f5e:	e001      	b.n	8001f64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d049      	beq.n	8002040 <HAL_ADC_IRQHandler+0xca>
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d046      	beq.n	8002040 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d12b      	bne.n	8002030 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d127      	bne.n	8002030 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d119      	bne.n	8002030 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0220 	bic.w	r2, r2, #32
 800200a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fc55 	bl	80018e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f06f 0212 	mvn.w	r2, #18
 800203e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d057      	beq.n	8002106 <HAL_ADC_IRQHandler+0x190>
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d054      	beq.n	8002106 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d139      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002088:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800208c:	2b00      	cmp	r3, #0
 800208e:	d006      	beq.n	800209e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d12b      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d124      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11d      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d119      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020d0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fc30 	bl	800295c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 020c 	mvn.w	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002114:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d017      	beq.n	800214c <HAL_ADC_IRQHandler+0x1d6>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d014      	beq.n	800214c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10d      	bne.n	800214c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f949 	bl	80023d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0201 	mvn.w	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800215a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d015      	beq.n	800218e <HAL_ADC_IRQHandler+0x218>
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0220 	mvn.w	r2, #32
 800217c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f932 	bl	80023e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0220 	mvn.w	r2, #32
 800218c:	601a      	str	r2, [r3, #0]
  }
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_Start_DMA+0x22>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e0eb      	b.n	8002392 <HAL_ADC_Start_DMA+0x1fa>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d018      	beq.n	8002202 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021e0:	4b6e      	ldr	r3, [pc, #440]	@ (800239c <HAL_ADC_Start_DMA+0x204>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6e      	ldr	r2, [pc, #440]	@ (80023a0 <HAL_ADC_Start_DMA+0x208>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0c9a      	lsrs	r2, r3, #18
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021f4:	e002      	b.n	80021fc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f9      	bne.n	80021f6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002210:	d107      	bne.n	8002222 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002220:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	f040 80a3 	bne.w	8002378 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800225c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002270:	d106      	bne.n	8002280 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f023 0206 	bic.w	r2, r3, #6
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
 800227e:	e002      	b.n	8002286 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228e:	4b45      	ldr	r3, [pc, #276]	@ (80023a4 <HAL_ADC_Start_DMA+0x20c>)
 8002290:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002296:	4a44      	ldr	r2, [pc, #272]	@ (80023a8 <HAL_ADC_Start_DMA+0x210>)
 8002298:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229e:	4a43      	ldr	r2, [pc, #268]	@ (80023ac <HAL_ADC_Start_DMA+0x214>)
 80022a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a6:	4a42      	ldr	r2, [pc, #264]	@ (80023b0 <HAL_ADC_Start_DMA+0x218>)
 80022a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80022c2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022d2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	334c      	adds	r3, #76	@ 0x4c
 80022de:	4619      	mov	r1, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f000 fd04 	bl	8002cf0 <HAL_DMA_Start_IT>
 80022e8:	4603      	mov	r3, r0
 80022ea:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d12a      	bne.n	800234e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <HAL_ADC_Start_DMA+0x21c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d015      	beq.n	800232e <HAL_ADC_Start_DMA+0x196>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <HAL_ADC_Start_DMA+0x220>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d105      	bne.n	8002318 <HAL_ADC_Start_DMA+0x180>
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <HAL_ADC_Start_DMA+0x20c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a27      	ldr	r2, [pc, #156]	@ (80023bc <HAL_ADC_Start_DMA+0x224>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d136      	bne.n	8002390 <HAL_ADC_Start_DMA+0x1f8>
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_ADC_Start_DMA+0x20c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d130      	bne.n	8002390 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d129      	bne.n	8002390 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	e020      	b.n	8002390 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a18      	ldr	r2, [pc, #96]	@ (80023b4 <HAL_ADC_Start_DMA+0x21c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d11b      	bne.n	8002390 <HAL_ADC_Start_DMA+0x1f8>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	e00b      	b.n	8002390 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000004 	.word	0x20000004
 80023a0:	431bde83 	.word	0x431bde83
 80023a4:	40012300 	.word	0x40012300
 80023a8:	08002859 	.word	0x08002859
 80023ac:	08002913 	.word	0x08002913
 80023b0:	0800292f 	.word	0x0800292f
 80023b4:	40012000 	.word	0x40012000
 80023b8:	40012100 	.word	0x40012100
 80023bc:	40012200 	.word	0x40012200

080023c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1c>
 8002414:	2302      	movs	r3, #2
 8002416:	e113      	b.n	8002640 <HAL_ADC_ConfigChannel+0x244>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b09      	cmp	r3, #9
 8002426:	d925      	bls.n	8002474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68d9      	ldr	r1, [r3, #12]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	3b1e      	subs	r3, #30
 800243e:	2207      	movs	r2, #7
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43da      	mvns	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	400a      	ands	r2, r1
 800244c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68d9      	ldr	r1, [r3, #12]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	4603      	mov	r3, r0
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4403      	add	r3, r0
 8002466:	3b1e      	subs	r3, #30
 8002468:	409a      	lsls	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	e022      	b.n	80024ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	2207      	movs	r2, #7
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	400a      	ands	r2, r1
 8002496:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4403      	add	r3, r0
 80024b0:	409a      	lsls	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d824      	bhi.n	800250c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b05      	subs	r3, #5
 80024d4:	221f      	movs	r2, #31
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	400a      	ands	r2, r1
 80024e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	4618      	mov	r0, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b05      	subs	r3, #5
 80024fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34
 800250a:	e04c      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d824      	bhi.n	800255e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b23      	subs	r3, #35	@ 0x23
 8002526:	221f      	movs	r2, #31
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43da      	mvns	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	400a      	ands	r2, r1
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b23      	subs	r3, #35	@ 0x23
 8002550:	fa00 f203 	lsl.w	r2, r0, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
 800255c:	e023      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b41      	subs	r3, #65	@ 0x41
 8002570:	221f      	movs	r2, #31
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	400a      	ands	r2, r1
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b41      	subs	r3, #65	@ 0x41
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a6:	4b29      	ldr	r3, [pc, #164]	@ (800264c <HAL_ADC_ConfigChannel+0x250>)
 80025a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a28      	ldr	r2, [pc, #160]	@ (8002650 <HAL_ADC_ConfigChannel+0x254>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10f      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1d8>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d10b      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002650 <HAL_ADC_ConfigChannel+0x254>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d12b      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x23a>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <HAL_ADC_ConfigChannel+0x258>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x1f4>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b11      	cmp	r3, #17
 80025ee:	d122      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <HAL_ADC_ConfigChannel+0x258>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d111      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_ADC_ConfigChannel+0x25c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <HAL_ADC_ConfigChannel+0x260>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9a      	lsrs	r2, r3, #18
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002628:	e002      	b.n	8002630 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012300 	.word	0x40012300
 8002650:	40012000 	.word	0x40012000
 8002654:	10000012 	.word	0x10000012
 8002658:	20000004 	.word	0x20000004
 800265c:	431bde83 	.word	0x431bde83

08002660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002668:	4b79      	ldr	r3, [pc, #484]	@ (8002850 <ADC_Init+0x1f0>)
 800266a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	021a      	lsls	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	4a58      	ldr	r2, [pc, #352]	@ (8002854 <ADC_Init+0x1f4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d022      	beq.n	800273e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e00f      	b.n	800275e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800274c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800275c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0202 	bic.w	r2, r2, #2
 800276c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e1b      	ldrb	r3, [r3, #24]
 8002778:	005a      	lsls	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800279a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	3b01      	subs	r3, #1
 80027b8:	035a      	lsls	r2, r3, #13
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	e007      	b.n	80027d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80027e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	051a      	lsls	r2, r3, #20
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6899      	ldr	r1, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002816:	025a      	lsls	r2, r3, #9
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800282e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	029a      	lsls	r2, r3, #10
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40012300 	.word	0x40012300
 8002854:	0f000001 	.word	0x0f000001

08002858 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800286e:	2b00      	cmp	r3, #0
 8002870:	d13c      	bne.n	80028ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d12b      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d127      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d119      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0220 	bic.w	r2, r2, #32
 80028be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7fe fffb 	bl	80018e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028ea:	e00e      	b.n	800290a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fd75 	bl	80023e8 <HAL_ADC_ErrorCallback>
}
 80028fe:	e004      	b.n	800290a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff fd4d 	bl	80023c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2240      	movs	r2, #64	@ 0x40
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fd4a 	bl	80023e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800299c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4907      	ldr	r1, [pc, #28]	@ (8002a0c <__NVIC_EnableIRQ+0x38>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100

08002a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	@ (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	@ (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	@ 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
         );
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002adc:	d301      	bcc.n	8002ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <SysTick_Config+0x40>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aea:	210f      	movs	r1, #15
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f7ff ff8e 	bl	8002a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <SysTick_Config+0x40>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <SysTick_Config+0x40>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff29 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff3e 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff8e 	bl	8002a64 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5d 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff31 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffa2 	bl	8002acc <SysTick_Config>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff f99a 	bl	8001ed8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e099      	b.n	8002ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd0:	e00f      	b.n	8002bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd2:	f7ff f981 	bl	8001ed8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d908      	bls.n	8002bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2203      	movs	r2, #3
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e078      	b.n	8002ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e8      	bne.n	8002bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4b38      	ldr	r3, [pc, #224]	@ (8002cec <HAL_DMA_Init+0x158>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	4313      	orrs	r3, r2
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0307 	bic.w	r3, r3, #7
 8002c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d117      	bne.n	8002cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fa6f 	bl	800317c <DMA_CheckFifoParam>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2240      	movs	r2, #64	@ 0x40
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e016      	b.n	8002ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa26 	bl	8003110 <DMA_CalcBaseAndBitshift>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	223f      	movs	r2, #63	@ 0x3f
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	f010803f 	.word	0xf010803f

08002cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_DMA_Start_IT+0x26>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e040      	b.n	8002d98 <HAL_DMA_Start_IT+0xa8>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d12f      	bne.n	8002d8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f9b8 	bl	80030b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	223f      	movs	r2, #63	@ 0x3f
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0216 	orr.w	r2, r2, #22
 8002d5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0208 	orr.w	r2, r2, #8
 8002d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e005      	b.n	8002d96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
 8002d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dac:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe8 <HAL_DMA_IRQHandler+0x248>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a8e      	ldr	r2, [pc, #568]	@ (8002fec <HAL_DMA_IRQHandler+0x24c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	2208      	movs	r2, #8
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0204 	bic.w	r2, r2, #4
 8002df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	2208      	movs	r2, #8
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	2201      	movs	r2, #1
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	2204      	movs	r2, #4
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d043      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03c      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d024      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
 8002ece:	e01f      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0208 	bic.w	r2, r2, #8
 8002efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	2220      	movs	r2, #32
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808f 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8087 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	2220      	movs	r2, #32
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d136      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x1da>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8e:	223f      	movs	r2, #63	@ 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d07e      	beq.n	80030ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
        }
        return;
 8002fb6:	e079      	b.n	80030ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d031      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e02c      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002fe6:	bf00      	nop
 8002fe8:	20000004 	.word	0x20000004
 8002fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e01e      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10f      	bne.n	8003030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0210 	bic.w	r2, r2, #16
 800301e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	2b00      	cmp	r3, #0
 8003046:	d032      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d022      	beq.n	800309a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2205      	movs	r2, #5
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d307      	bcc.n	8003088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f2      	bne.n	800306c <HAL_DMA_IRQHandler+0x2cc>
 8003086:	e000      	b.n	800308a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e000      	b.n	80030ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80030ac:	bf00      	nop
    }
  }
}
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b40      	cmp	r3, #64	@ 0x40
 80030e0:	d108      	bne.n	80030f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030f2:	e007      	b.n	8003104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	3b10      	subs	r3, #16
 8003120:	4a14      	ldr	r2, [pc, #80]	@ (8003174 <DMA_CalcBaseAndBitshift+0x64>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800312a:	4a13      	ldr	r2, [pc, #76]	@ (8003178 <DMA_CalcBaseAndBitshift+0x68>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d909      	bls.n	8003152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003150:	e007      	b.n	8003162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	aaaaaaab 	.word	0xaaaaaaab
 8003178:	0800a3fc 	.word	0x0800a3fc

0800317c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11f      	bne.n	80031d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d856      	bhi.n	800324a <DMA_CheckFifoParam+0xce>
 800319c:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <DMA_CheckFifoParam+0x28>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031c7 	.word	0x080031c7
 80031ac:	080031b5 	.word	0x080031b5
 80031b0:	0800324b 	.word	0x0800324b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d046      	beq.n	800324e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c4:	e043      	b.n	800324e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031ce:	d140      	bne.n	8003252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d4:	e03d      	b.n	8003252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031de:	d121      	bne.n	8003224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d837      	bhi.n	8003256 <DMA_CheckFifoParam+0xda>
 80031e6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <DMA_CheckFifoParam+0x70>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003203 	.word	0x08003203
 80031f4:	080031fd 	.word	0x080031fd
 80031f8:	08003215 	.word	0x08003215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003200:	e030      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d025      	beq.n	800325a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003212:	e022      	b.n	800325a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800321c:	d11f      	bne.n	800325e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003222:	e01c      	b.n	800325e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d903      	bls.n	8003232 <DMA_CheckFifoParam+0xb6>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d003      	beq.n	8003238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003230:	e018      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
      break;
 8003236:	e015      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      break;
 8003248:	e00b      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;
 800324a:	bf00      	nop
 800324c:	e00a      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
 8003250:	e008      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 8003252:	bf00      	nop
 8003254:	e006      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 8003256:	bf00      	nop
 8003258:	e004      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 800325a:	bf00      	nop
 800325c:	e002      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;   
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 8003262:	bf00      	nop
    }
  } 
  
  return status; 
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	@ 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e165      	b.n	800355c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	f040 8154 	bne.w	8003556 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d005      	beq.n	80032c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d130      	bne.n	8003328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	2203      	movs	r2, #3
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 0201 	and.w	r2, r3, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b03      	cmp	r3, #3
 8003332:	d017      	beq.n	8003364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d123      	bne.n	80033b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	69b9      	ldr	r1, [r7, #24]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80ae 	beq.w	8003556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003574 <HAL_GPIO_Init+0x300>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	4a5c      	ldr	r2, [pc, #368]	@ (8003574 <HAL_GPIO_Init+0x300>)
 8003404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003408:	6453      	str	r3, [r2, #68]	@ 0x44
 800340a:	4b5a      	ldr	r3, [pc, #360]	@ (8003574 <HAL_GPIO_Init+0x300>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003416:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <HAL_GPIO_Init+0x304>)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4f      	ldr	r2, [pc, #316]	@ (800357c <HAL_GPIO_Init+0x308>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d025      	beq.n	800348e <HAL_GPIO_Init+0x21a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4e      	ldr	r2, [pc, #312]	@ (8003580 <HAL_GPIO_Init+0x30c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01f      	beq.n	800348a <HAL_GPIO_Init+0x216>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4d      	ldr	r2, [pc, #308]	@ (8003584 <HAL_GPIO_Init+0x310>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d019      	beq.n	8003486 <HAL_GPIO_Init+0x212>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4c      	ldr	r2, [pc, #304]	@ (8003588 <HAL_GPIO_Init+0x314>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_GPIO_Init+0x20e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a4b      	ldr	r2, [pc, #300]	@ (800358c <HAL_GPIO_Init+0x318>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00d      	beq.n	800347e <HAL_GPIO_Init+0x20a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4a      	ldr	r2, [pc, #296]	@ (8003590 <HAL_GPIO_Init+0x31c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <HAL_GPIO_Init+0x206>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a49      	ldr	r2, [pc, #292]	@ (8003594 <HAL_GPIO_Init+0x320>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_GPIO_Init+0x202>
 8003472:	2306      	movs	r3, #6
 8003474:	e00c      	b.n	8003490 <HAL_GPIO_Init+0x21c>
 8003476:	2307      	movs	r3, #7
 8003478:	e00a      	b.n	8003490 <HAL_GPIO_Init+0x21c>
 800347a:	2305      	movs	r3, #5
 800347c:	e008      	b.n	8003490 <HAL_GPIO_Init+0x21c>
 800347e:	2304      	movs	r3, #4
 8003480:	e006      	b.n	8003490 <HAL_GPIO_Init+0x21c>
 8003482:	2303      	movs	r3, #3
 8003484:	e004      	b.n	8003490 <HAL_GPIO_Init+0x21c>
 8003486:	2302      	movs	r3, #2
 8003488:	e002      	b.n	8003490 <HAL_GPIO_Init+0x21c>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_GPIO_Init+0x21c>
 800348e:	2300      	movs	r3, #0
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	f002 0203 	and.w	r2, r2, #3
 8003496:	0092      	lsls	r2, r2, #2
 8003498:	4093      	lsls	r3, r2
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a0:	4935      	ldr	r1, [pc, #212]	@ (8003578 <HAL_GPIO_Init+0x304>)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003598 <HAL_GPIO_Init+0x324>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d2:	4a31      	ldr	r2, [pc, #196]	@ (8003598 <HAL_GPIO_Init+0x324>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003598 <HAL_GPIO_Init+0x324>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034fc:	4a26      	ldr	r2, [pc, #152]	@ (8003598 <HAL_GPIO_Init+0x324>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003502:	4b25      	ldr	r3, [pc, #148]	@ (8003598 <HAL_GPIO_Init+0x324>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003526:	4a1c      	ldr	r2, [pc, #112]	@ (8003598 <HAL_GPIO_Init+0x324>)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800352c:	4b1a      	ldr	r3, [pc, #104]	@ (8003598 <HAL_GPIO_Init+0x324>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003550:	4a11      	ldr	r2, [pc, #68]	@ (8003598 <HAL_GPIO_Init+0x324>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b0f      	cmp	r3, #15
 8003560:	f67f ae96 	bls.w	8003290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3724      	adds	r7, #36	@ 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	40013800 	.word	0x40013800
 800357c:	40020000 	.word	0x40020000
 8003580:	40020400 	.word	0x40020400
 8003584:	40020800 	.word	0x40020800
 8003588:	40020c00 	.word	0x40020c00
 800358c:	40021000 	.word	0x40021000
 8003590:	40021400 	.word	0x40021400
 8003594:	40021800 	.word	0x40021800
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e001      	b.n	80035be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e8:	e003      	b.n	80035f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	041a      	lsls	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	619a      	str	r2, [r3, #24]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_PWREx_EnableOverDrive+0x90>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <HAL_PWREx_EnableOverDrive+0x90>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	@ 0x40
 800361a:	4b1d      	ldr	r3, [pc, #116]	@ (8003690 <HAL_PWREx_EnableOverDrive+0x90>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003626:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_PWREx_EnableOverDrive+0x94>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800362c:	f7fe fc54 	bl	8001ed8 <HAL_GetTick>
 8003630:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003632:	e009      	b.n	8003648 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003634:	f7fe fc50 	bl	8001ed8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003642:	d901      	bls.n	8003648 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e01f      	b.n	8003688 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <HAL_PWREx_EnableOverDrive+0x98>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003654:	d1ee      	bne.n	8003634 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003656:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800365c:	f7fe fc3c 	bl	8001ed8 <HAL_GetTick>
 8003660:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003662:	e009      	b.n	8003678 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003664:	f7fe fc38 	bl	8001ed8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003672:	d901      	bls.n	8003678 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e007      	b.n	8003688 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <HAL_PWREx_EnableOverDrive+0x98>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003684:	d1ee      	bne.n	8003664 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	420e0040 	.word	0x420e0040
 8003698:	40007000 	.word	0x40007000
 800369c:	420e0044 	.word	0x420e0044

080036a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cc      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b68      	ldr	r3, [pc, #416]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90c      	bls.n	80036dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b65      	ldr	r3, [pc, #404]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b63      	ldr	r3, [pc, #396]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0b8      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f4:	4b59      	ldr	r3, [pc, #356]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a58      	ldr	r2, [pc, #352]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800370c:	4b53      	ldr	r3, [pc, #332]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a52      	ldr	r2, [pc, #328]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b50      	ldr	r3, [pc, #320]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	494d      	ldr	r1, [pc, #308]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d119      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e067      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b37      	ldr	r3, [pc, #220]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4934      	ldr	r1, [pc, #208]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7fe fba2 	bl	8001ed8 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fe fb9e 	bl	8001ed8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e04f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b25      	ldr	r3, [pc, #148]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d20c      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b22      	ldr	r3, [pc, #136]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b19      	ldr	r3, [pc, #100]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4916      	ldr	r1, [pc, #88]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490e      	ldr	r1, [pc, #56]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003826:	f000 f855 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 800382a:	4602      	mov	r2, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	490a      	ldr	r1, [pc, #40]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	5ccb      	ldrb	r3, [r1, r3]
 800383a:	fa22 f303 	lsr.w	r3, r2, r3
 800383e:	4a09      	ldr	r2, [pc, #36]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fb02 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00
 800385c:	40023800 	.word	0x40023800
 8003860:	0800a3e4 	.word	0x0800a3e4
 8003864:	20000004 	.word	0x20000004
 8003868:	20000008 	.word	0x20000008

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <HAL_RCC_GetHCLKFreq+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003888:	f7ff fff0 	bl	800386c <HAL_RCC_GetHCLKFreq>
 800388c:	4602      	mov	r2, r0
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	0a9b      	lsrs	r3, r3, #10
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	4903      	ldr	r1, [pc, #12]	@ (80038a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800389a:	5ccb      	ldrb	r3, [r1, r3]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40023800 	.word	0x40023800
 80038a8:	0800a3f4 	.word	0x0800a3f4

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038b0:	f7ff ffdc 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0b5b      	lsrs	r3, r3, #13
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	@ (80038d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	0800a3f4 	.word	0x0800a3f4

080038d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0ae      	sub	sp, #184	@ 0xb8
 80038da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fa:	4bcb      	ldr	r3, [pc, #812]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b0c      	cmp	r3, #12
 8003904:	f200 8206 	bhi.w	8003d14 <HAL_RCC_GetSysClockFreq+0x440>
 8003908:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <HAL_RCC_GetSysClockFreq+0x3c>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003945 	.word	0x08003945
 8003914:	08003d15 	.word	0x08003d15
 8003918:	08003d15 	.word	0x08003d15
 800391c:	08003d15 	.word	0x08003d15
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003d15 	.word	0x08003d15
 8003928:	08003d15 	.word	0x08003d15
 800392c:	08003d15 	.word	0x08003d15
 8003930:	08003955 	.word	0x08003955
 8003934:	08003d15 	.word	0x08003d15
 8003938:	08003d15 	.word	0x08003d15
 800393c:	08003d15 	.word	0x08003d15
 8003940:	08003b45 	.word	0x08003b45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4bb9      	ldr	r3, [pc, #740]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x358>)
 8003946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800394a:	e1e7      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394c:	4bb8      	ldr	r3, [pc, #736]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003952:	e1e3      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4bb4      	ldr	r3, [pc, #720]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003960:	4bb1      	ldr	r3, [pc, #708]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d071      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4bae      	ldr	r3, [pc, #696]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003978:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800397c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800398e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	0159      	lsls	r1, r3, #5
 80039a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a4:	0150      	lsls	r0, r2, #5
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4621      	mov	r1, r4
 80039ac:	1a51      	subs	r1, r2, r1
 80039ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80039b0:	4629      	mov	r1, r5
 80039b2:	eb63 0301 	sbc.w	r3, r3, r1
 80039b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80039c4:	4649      	mov	r1, r9
 80039c6:	018b      	lsls	r3, r1, #6
 80039c8:	4641      	mov	r1, r8
 80039ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ce:	4641      	mov	r1, r8
 80039d0:	018a      	lsls	r2, r1, #6
 80039d2:	4641      	mov	r1, r8
 80039d4:	1a51      	subs	r1, r2, r1
 80039d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039d8:	4649      	mov	r1, r9
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039ec:	4649      	mov	r1, r9
 80039ee:	00cb      	lsls	r3, r1, #3
 80039f0:	4641      	mov	r1, r8
 80039f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f6:	4641      	mov	r1, r8
 80039f8:	00ca      	lsls	r2, r1, #3
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	4622      	mov	r2, r4
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a06:	462b      	mov	r3, r5
 8003a08:	460a      	mov	r2, r1
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	024b      	lsls	r3, r1, #9
 8003a20:	4621      	mov	r1, r4
 8003a22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a26:	4621      	mov	r1, r4
 8003a28:	024a      	lsls	r2, r1, #9
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a40:	f7fd f922 	bl	8000c88 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a4e:	e067      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a50:	4b75      	ldr	r3, [pc, #468]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a72:	4622      	mov	r2, r4
 8003a74:	462b      	mov	r3, r5
 8003a76:	f04f 0000 	mov.w	r0, #0
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	0159      	lsls	r1, r3, #5
 8003a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a84:	0150      	lsls	r0, r2, #5
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	1a51      	subs	r1, r2, r1
 8003a8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb63 0301 	sbc.w	r3, r3, r1
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	018b      	lsls	r3, r1, #6
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aae:	4641      	mov	r1, r8
 8003ab0:	018a      	lsls	r2, r1, #6
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab8:	4649      	mov	r1, r9
 8003aba:	eb63 0b01 	sbc.w	fp, r3, r1
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad2:	4692      	mov	sl, r2
 8003ad4:	469b      	mov	fp, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	eb1a 0303 	adds.w	r3, sl, r3
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	462b      	mov	r3, r5
 8003ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003af2:	4629      	mov	r1, r5
 8003af4:	028b      	lsls	r3, r1, #10
 8003af6:	4621      	mov	r1, r4
 8003af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003afc:	4621      	mov	r1, r4
 8003afe:	028a      	lsls	r2, r1, #10
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b08:	2200      	movs	r2, #0
 8003b0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b12:	f7fd f8b9 	bl	8000c88 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b20:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b42:	e0eb      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4b38      	ldr	r3, [pc, #224]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b50:	4b35      	ldr	r3, [pc, #212]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d06b      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4b32      	ldr	r3, [pc, #200]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b70:	2300      	movs	r3, #0
 8003b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	f04f 0000 	mov.w	r0, #0
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	0159      	lsls	r1, r3, #5
 8003b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8a:	0150      	lsls	r0, r2, #5
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4621      	mov	r1, r4
 8003b92:	1a51      	subs	r1, r2, r1
 8003b94:	61b9      	str	r1, [r7, #24]
 8003b96:	4629      	mov	r1, r5
 8003b98:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003baa:	4659      	mov	r1, fp
 8003bac:	018b      	lsls	r3, r1, #6
 8003bae:	4651      	mov	r1, sl
 8003bb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	018a      	lsls	r2, r1, #6
 8003bb8:	4651      	mov	r1, sl
 8003bba:	ebb2 0801 	subs.w	r8, r2, r1
 8003bbe:	4659      	mov	r1, fp
 8003bc0:	eb63 0901 	sbc.w	r9, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd8:	4690      	mov	r8, r2
 8003bda:	4699      	mov	r9, r3
 8003bdc:	4623      	mov	r3, r4
 8003bde:	eb18 0303 	adds.w	r3, r8, r3
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	462b      	mov	r3, r5
 8003be6:	eb49 0303 	adc.w	r3, r9, r3
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	024b      	lsls	r3, r1, #9
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c02:	4621      	mov	r1, r4
 8003c04:	024a      	lsls	r2, r1, #9
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c0e:	2200      	movs	r2, #0
 8003c10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c18:	f7fd f836 	bl	8000c88 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c26:	e065      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x420>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c34:	4b3d      	ldr	r3, [pc, #244]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	4611      	mov	r1, r2
 8003c40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c46:	2300      	movs	r3, #0
 8003c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c4e:	4642      	mov	r2, r8
 8003c50:	464b      	mov	r3, r9
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c60:	0150      	lsls	r0, r2, #5
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4641      	mov	r1, r8
 8003c68:	1a51      	subs	r1, r2, r1
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c80:	4659      	mov	r1, fp
 8003c82:	018b      	lsls	r3, r1, #6
 8003c84:	4651      	mov	r1, sl
 8003c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	018a      	lsls	r2, r1, #6
 8003c8e:	4651      	mov	r1, sl
 8003c90:	1a54      	subs	r4, r2, r1
 8003c92:	4659      	mov	r1, fp
 8003c94:	eb63 0501 	sbc.w	r5, r3, r1
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	00eb      	lsls	r3, r5, #3
 8003ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca6:	00e2      	lsls	r2, r4, #3
 8003ca8:	4614      	mov	r4, r2
 8003caa:	461d      	mov	r5, r3
 8003cac:	4643      	mov	r3, r8
 8003cae:	18e3      	adds	r3, r4, r3
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	eb45 0303 	adc.w	r3, r5, r3
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	028b      	lsls	r3, r1, #10
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	028a      	lsls	r2, r1, #10
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cdc:	2200      	movs	r2, #0
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ce2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ce6:	f7fc ffcf 	bl	8000c88 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4613      	mov	r3, r2
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0f1b      	lsrs	r3, r3, #28
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d12:	e003      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	37b8      	adds	r7, #184	@ 0xb8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e28d      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8083 	beq.w	8003e5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d54:	4b94      	ldr	r3, [pc, #592]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d019      	beq.n	8003d94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d60:	4b91      	ldr	r3, [pc, #580]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d6c:	4b8e      	ldr	r3, [pc, #568]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d78:	d00c      	beq.n	8003d94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4b88      	ldr	r3, [pc, #544]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d92:	d10b      	bne.n	8003dac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	4b84      	ldr	r3, [pc, #528]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x124>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d157      	bne.n	8003e58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e25a      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x90>
 8003db6:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7b      	ldr	r2, [pc, #492]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xcc>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0xb4>
 8003dce:	4b76      	ldr	r3, [pc, #472]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a75      	ldr	r2, [pc, #468]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b73      	ldr	r3, [pc, #460]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a72      	ldr	r2, [pc, #456]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xcc>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f866 	bl	8001ed8 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fe f862 	bl	8001ed8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e21f      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b61      	ldr	r3, [pc, #388]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xdc>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe f852 	bl	8001ed8 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe f84e 	bl	8001ed8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e20b      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b57      	ldr	r3, [pc, #348]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x104>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d06f      	beq.n	8003f46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e66:	4b50      	ldr	r3, [pc, #320]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d017      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e72:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8a:	4b47      	ldr	r3, [pc, #284]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e96:	4b44      	ldr	r3, [pc, #272]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d116      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	4b41      	ldr	r3, [pc, #260]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_RCC_OscConfig+0x186>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1d3      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4937      	ldr	r1, [pc, #220]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	e03a      	b.n	8003f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed8:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <HAL_RCC_OscConfig+0x278>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd fffb 	bl	8001ed8 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fd fff7 	bl	8001ed8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1b4      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4925      	ldr	r1, [pc, #148]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <HAL_RCC_OscConfig+0x278>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd ffda 	bl	8001ed8 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f28:	f7fd ffd6 	bl	8001ed8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e193      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d036      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd ffba 	bl	8001ed8 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd ffb6 	bl	8001ed8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e173      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x234>
 8003f86:	e01b      	b.n	8003fc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fd ffa3 	bl	8001ed8 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	e00e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fd ff9f 	bl	8001ed8 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d907      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e15c      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	42470000 	.word	0x42470000
 8003fb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	4b8a      	ldr	r3, [pc, #552]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ea      	bne.n	8003f96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8097 	beq.w	80040fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b83      	ldr	r3, [pc, #524]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fee:	4b7c      	ldr	r3, [pc, #496]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	4b79      	ldr	r3, [pc, #484]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d118      	bne.n	800403c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400a:	4b76      	ldr	r3, [pc, #472]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a75      	ldr	r2, [pc, #468]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004016:	f7fd ff5f 	bl	8001ed8 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd ff5b 	bl	8001ed8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e118      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	4b6c      	ldr	r3, [pc, #432]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x31e>
 8004044:	4b66      	ldr	r3, [pc, #408]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a65      	ldr	r2, [pc, #404]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	e01c      	b.n	800408c <HAL_RCC_OscConfig+0x358>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x340>
 800405a:	4b61      	ldr	r3, [pc, #388]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405e:	4a60      	ldr	r2, [pc, #384]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6713      	str	r3, [r2, #112]	@ 0x70
 8004066:	4b5e      	ldr	r3, [pc, #376]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406a:	4a5d      	ldr	r2, [pc, #372]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6713      	str	r3, [r2, #112]	@ 0x70
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0x358>
 8004074:	4b5a      	ldr	r3, [pc, #360]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	4a59      	ldr	r2, [pc, #356]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004080:	4b57      	ldr	r3, [pc, #348]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004084:	4a56      	ldr	r2, [pc, #344]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd ff20 	bl	8001ed8 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd ff1c 	bl	8001ed8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0d7      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b2:	4b4b      	ldr	r3, [pc, #300]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ee      	beq.n	800409c <HAL_RCC_OscConfig+0x368>
 80040be:	e014      	b.n	80040ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fd ff0a 	bl	8001ed8 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fd ff06 	bl	8001ed8 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0c1      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040de:	4b40      	ldr	r3, [pc, #256]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ee      	bne.n	80040c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	4a3a      	ldr	r2, [pc, #232]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80ad 	beq.w	8004260 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004106:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b08      	cmp	r3, #8
 8004110:	d060      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d145      	bne.n	80041a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b33      	ldr	r3, [pc, #204]	@ (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd feda 	bl	8001ed8 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fd fed6 	bl	8001ed8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e093      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	4b29      	ldr	r3, [pc, #164]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	3b01      	subs	r3, #1
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	491b      	ldr	r1, [pc, #108]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fd feab 	bl	8001ed8 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004186:	f7fd fea7 	bl	8001ed8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e064      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x452>
 80041a4:	e05c      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fe94 	bl	8001ed8 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fe90 	bl	8001ed8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e04d      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x480>
 80041d2:	e045      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e040      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000
 80041e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ec:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <HAL_RCC_OscConfig+0x538>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d030      	beq.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d129      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d122      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004224:	4293      	cmp	r3, r2
 8004226:	d119      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	3b01      	subs	r3, #1
 8004236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d10f      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e042      	b.n	8004308 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd fbfe 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	@ 0x24
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f973 	bl	80045a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	@ 0x28
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b20      	cmp	r3, #32
 800432e:	d175      	bne.n	800441c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Transmit+0x2c>
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e06e      	b.n	800441e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2221      	movs	r2, #33	@ 0x21
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434e:	f7fd fdc3 	bl	8001ed8 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004368:	d108      	bne.n	800437c <HAL_UART_Transmit+0x6c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e003      	b.n	8004384 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004384:	e02e      	b.n	80043e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	@ 0x80
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f848 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e03a      	b.n	800441e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	3302      	adds	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e007      	b.n	80043d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1cb      	bne.n	8004386 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2140      	movs	r1, #64	@ 0x40
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f814 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e006      	b.n	800441e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	e03b      	b.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d037      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fd fd4a 	bl	8001ed8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <UART_WaitOnFlagUntilTimeout+0x30>
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e03a      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d020      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d01d      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b08      	cmp	r3, #8
 8004480:	d116      	bne.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f81d 	bl	80044d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2208      	movs	r2, #8
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e00f      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d0b4      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b095      	sub	sp, #84	@ 0x54
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004500:	643a      	str	r2, [r7, #64]	@ 0x40
 8004502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800450e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3314      	adds	r3, #20
 800451a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	61fb      	str	r3, [r7, #28]
   return(result);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3314      	adds	r3, #20
 8004532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800453a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	2b01      	cmp	r3, #1
 800454e:	d119      	bne.n	8004584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	647b      	str	r3, [r7, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004570:	61ba      	str	r2, [r7, #24]
 8004572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	613b      	str	r3, [r7, #16]
   return(result);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004592:	bf00      	nop
 8004594:	3754      	adds	r7, #84	@ 0x54
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b0c0      	sub	sp, #256	@ 0x100
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	68d9      	ldr	r1, [r3, #12]
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	ea40 0301 	orr.w	r3, r0, r1
 80045c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	431a      	orrs	r2, r3
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045f8:	f021 010c 	bic.w	r1, r1, #12
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004606:	430b      	orrs	r3, r1
 8004608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	6999      	ldr	r1, [r3, #24]
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	ea40 0301 	orr.w	r3, r0, r1
 8004626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b8f      	ldr	r3, [pc, #572]	@ (800486c <UART_SetConfig+0x2cc>)
 8004630:	429a      	cmp	r2, r3
 8004632:	d005      	beq.n	8004640 <UART_SetConfig+0xa0>
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b8d      	ldr	r3, [pc, #564]	@ (8004870 <UART_SetConfig+0x2d0>)
 800463c:	429a      	cmp	r2, r3
 800463e:	d104      	bne.n	800464a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7ff f934 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8004644:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004648:	e003      	b.n	8004652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800464a:	f7ff f91b 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 800464e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800465c:	f040 810c 	bne.w	8004878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800466a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800466e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	1891      	adds	r1, r2, r2
 8004678:	65b9      	str	r1, [r7, #88]	@ 0x58
 800467a:	415b      	adcs	r3, r3
 800467c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800467e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004682:	4621      	mov	r1, r4
 8004684:	eb12 0801 	adds.w	r8, r2, r1
 8004688:	4629      	mov	r1, r5
 800468a:	eb43 0901 	adc.w	r9, r3, r1
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800469e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a2:	4690      	mov	r8, r2
 80046a4:	4699      	mov	r9, r3
 80046a6:	4623      	mov	r3, r4
 80046a8:	eb18 0303 	adds.w	r3, r8, r3
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046b0:	462b      	mov	r3, r5
 80046b2:	eb49 0303 	adc.w	r3, r9, r3
 80046b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ce:	460b      	mov	r3, r1
 80046d0:	18db      	adds	r3, r3, r3
 80046d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d4:	4613      	mov	r3, r2
 80046d6:	eb42 0303 	adc.w	r3, r2, r3
 80046da:	657b      	str	r3, [r7, #84]	@ 0x54
 80046dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046e4:	f7fc fad0 	bl	8000c88 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b61      	ldr	r3, [pc, #388]	@ (8004874 <UART_SetConfig+0x2d4>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011c      	lsls	r4, r3, #4
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004700:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004710:	415b      	adcs	r3, r3
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004718:	4641      	mov	r1, r8
 800471a:	eb12 0a01 	adds.w	sl, r2, r1
 800471e:	4649      	mov	r1, r9
 8004720:	eb43 0b01 	adc.w	fp, r3, r1
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004738:	4692      	mov	sl, r2
 800473a:	469b      	mov	fp, r3
 800473c:	4643      	mov	r3, r8
 800473e:	eb1a 0303 	adds.w	r3, sl, r3
 8004742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004746:	464b      	mov	r3, r9
 8004748:	eb4b 0303 	adc.w	r3, fp, r3
 800474c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800475c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004764:	460b      	mov	r3, r1
 8004766:	18db      	adds	r3, r3, r3
 8004768:	643b      	str	r3, [r7, #64]	@ 0x40
 800476a:	4613      	mov	r3, r2
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	647b      	str	r3, [r7, #68]	@ 0x44
 8004772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800477a:	f7fc fa85 	bl	8000c88 <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4611      	mov	r1, r2
 8004784:	4b3b      	ldr	r3, [pc, #236]	@ (8004874 <UART_SetConfig+0x2d4>)
 8004786:	fba3 2301 	umull	r2, r3, r3, r1
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2264      	movs	r2, #100	@ 0x64
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	1acb      	subs	r3, r1, r3
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800479a:	4b36      	ldr	r3, [pc, #216]	@ (8004874 <UART_SetConfig+0x2d4>)
 800479c:	fba3 2302 	umull	r2, r3, r3, r2
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047a8:	441c      	add	r4, r3
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047bc:	4642      	mov	r2, r8
 80047be:	464b      	mov	r3, r9
 80047c0:	1891      	adds	r1, r2, r2
 80047c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047c4:	415b      	adcs	r3, r3
 80047c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047cc:	4641      	mov	r1, r8
 80047ce:	1851      	adds	r1, r2, r1
 80047d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80047d2:	4649      	mov	r1, r9
 80047d4:	414b      	adcs	r3, r1
 80047d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047e4:	4659      	mov	r1, fp
 80047e6:	00cb      	lsls	r3, r1, #3
 80047e8:	4651      	mov	r1, sl
 80047ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ee:	4651      	mov	r1, sl
 80047f0:	00ca      	lsls	r2, r1, #3
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	4642      	mov	r2, r8
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004800:	464b      	mov	r3, r9
 8004802:	460a      	mov	r2, r1
 8004804:	eb42 0303 	adc.w	r3, r2, r3
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004818:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800481c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004820:	460b      	mov	r3, r1
 8004822:	18db      	adds	r3, r3, r3
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004826:	4613      	mov	r3, r2
 8004828:	eb42 0303 	adc.w	r3, r2, r3
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004836:	f7fc fa27 	bl	8000c88 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4b0d      	ldr	r3, [pc, #52]	@ (8004874 <UART_SetConfig+0x2d4>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	@ 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	3332      	adds	r3, #50	@ 0x32
 8004852:	4a08      	ldr	r2, [pc, #32]	@ (8004874 <UART_SetConfig+0x2d4>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 0207 	and.w	r2, r3, #7
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4422      	add	r2, r4
 8004866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004868:	e106      	b.n	8004a78 <UART_SetConfig+0x4d8>
 800486a:	bf00      	nop
 800486c:	40011000 	.word	0x40011000
 8004870:	40011400 	.word	0x40011400
 8004874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004882:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800488a:	4642      	mov	r2, r8
 800488c:	464b      	mov	r3, r9
 800488e:	1891      	adds	r1, r2, r2
 8004890:	6239      	str	r1, [r7, #32]
 8004892:	415b      	adcs	r3, r3
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
 8004896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800489a:	4641      	mov	r1, r8
 800489c:	1854      	adds	r4, r2, r1
 800489e:	4649      	mov	r1, r9
 80048a0:	eb43 0501 	adc.w	r5, r3, r1
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	00eb      	lsls	r3, r5, #3
 80048ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b2:	00e2      	lsls	r2, r4, #3
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
 80048b8:	4643      	mov	r3, r8
 80048ba:	18e3      	adds	r3, r4, r3
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048c0:	464b      	mov	r3, r9
 80048c2:	eb45 0303 	adc.w	r3, r5, r3
 80048c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048e6:	4629      	mov	r1, r5
 80048e8:	008b      	lsls	r3, r1, #2
 80048ea:	4621      	mov	r1, r4
 80048ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f0:	4621      	mov	r1, r4
 80048f2:	008a      	lsls	r2, r1, #2
 80048f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048f8:	f7fc f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b60      	ldr	r3, [pc, #384]	@ (8004a84 <UART_SetConfig+0x4e4>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	011c      	lsls	r4, r3, #4
 800490a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004914:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	61b9      	str	r1, [r7, #24]
 8004924:	415b      	adcs	r3, r3
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492c:	4641      	mov	r1, r8
 800492e:	1851      	adds	r1, r2, r1
 8004930:	6139      	str	r1, [r7, #16]
 8004932:	4649      	mov	r1, r9
 8004934:	414b      	adcs	r3, r1
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004944:	4659      	mov	r1, fp
 8004946:	00cb      	lsls	r3, r1, #3
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494e:	4651      	mov	r1, sl
 8004950:	00ca      	lsls	r2, r1, #3
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	4603      	mov	r3, r0
 8004958:	4642      	mov	r2, r8
 800495a:	189b      	adds	r3, r3, r2
 800495c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004960:	464b      	mov	r3, r9
 8004962:	460a      	mov	r2, r1
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004976:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004984:	4649      	mov	r1, r9
 8004986:	008b      	lsls	r3, r1, #2
 8004988:	4641      	mov	r1, r8
 800498a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498e:	4641      	mov	r1, r8
 8004990:	008a      	lsls	r2, r1, #2
 8004992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004996:	f7fc f977 	bl	8000c88 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	4b38      	ldr	r3, [pc, #224]	@ (8004a84 <UART_SetConfig+0x4e4>)
 80049a2:	fba3 2301 	umull	r2, r3, r3, r1
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2264      	movs	r2, #100	@ 0x64
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	3332      	adds	r3, #50	@ 0x32
 80049b4:	4a33      	ldr	r2, [pc, #204]	@ (8004a84 <UART_SetConfig+0x4e4>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049c0:	441c      	add	r4, r3
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80049cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	415b      	adcs	r3, r3
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e0:	4641      	mov	r1, r8
 80049e2:	1851      	adds	r1, r2, r1
 80049e4:	6039      	str	r1, [r7, #0]
 80049e6:	4649      	mov	r1, r9
 80049e8:	414b      	adcs	r3, r1
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f8:	4659      	mov	r1, fp
 80049fa:	00cb      	lsls	r3, r1, #3
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a02:	4651      	mov	r1, sl
 8004a04:	00ca      	lsls	r2, r1, #3
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a12:	464b      	mov	r3, r9
 8004a14:	460a      	mov	r2, r1
 8004a16:	eb42 0303 	adc.w	r3, r2, r3
 8004a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a34:	4649      	mov	r1, r9
 8004a36:	008b      	lsls	r3, r1, #2
 8004a38:	4641      	mov	r1, r8
 8004a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3e:	4641      	mov	r1, r8
 8004a40:	008a      	lsls	r2, r1, #2
 8004a42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a46:	f7fc f91f 	bl	8000c88 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <UART_SetConfig+0x4e4>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	@ 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	3332      	adds	r3, #50	@ 0x32
 8004a62:	4a08      	ldr	r2, [pc, #32]	@ (8004a84 <UART_SetConfig+0x4e4>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4422      	add	r2, r4
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a84:	51eb851f 	.word	0x51eb851f

08004a88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a8e:	f3ef 8305 	mrs	r3, IPSR
 8004a92:	603b      	str	r3, [r7, #0]
  return(result);
 8004a94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a9a:	f06f 0305 	mvn.w	r3, #5
 8004a9e:	607b      	str	r3, [r7, #4]
 8004aa0:	e00c      	b.n	8004abc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <osKernelInitialize+0x44>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <osKernelInitialize+0x44>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	e002      	b.n	8004abc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004abc:	687b      	ldr	r3, [r7, #4]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	200004e4 	.word	0x200004e4

08004ad0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad8:	f3ef 8305 	mrs	r3, IPSR
 8004adc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ade:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <osDelay+0x1c>
    stat = osErrorISR;
 8004ae4:	f06f 0305 	mvn.w	r3, #5
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e007      	b.n	8004afc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <osDelay+0x2c>
      vTaskDelay(ticks);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 ffca 	bl	8005a90 <vTaskDelay>
    }
  }

  return (stat);
 8004afc:	68fb      	ldr	r3, [r7, #12]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a07      	ldr	r2, [pc, #28]	@ (8004b34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a06      	ldr	r2, [pc, #24]	@ (8004b38 <vApplicationGetIdleTaskMemory+0x30>)
 8004b1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2280      	movs	r2, #128	@ 0x80
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	200004e8 	.word	0x200004e8
 8004b38:	20000544 	.word	0x20000544

08004b3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a07      	ldr	r2, [pc, #28]	@ (8004b68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4a06      	ldr	r2, [pc, #24]	@ (8004b6c <vApplicationGetTimerTaskMemory+0x30>)
 8004b52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b5a:	601a      	str	r2, [r3, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	20000744 	.word	0x20000744
 8004b6c:	200007a0 	.word	0x200007a0

08004b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f103 0208 	add.w	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295
 8004b88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f103 0208 	add.w	r2, r3, #8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f103 0208 	add.w	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	601a      	str	r2, [r3, #0]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d103      	bne.n	8004c32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e00c      	b.n	8004c4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3308      	adds	r3, #8
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e002      	b.n	8004c40 <vListInsert+0x2e>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d2f6      	bcs.n	8004c3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d103      	bne.n	8004cb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	1e5a      	subs	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d04:	f002 f8b8 	bl	8006e78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	68f9      	ldr	r1, [r7, #12]
 8004d12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	441a      	add	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d34:	3b01      	subs	r3, #1
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	22ff      	movs	r2, #255	@ 0xff
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	22ff      	movs	r2, #255	@ 0xff
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d114      	bne.n	8004d84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01a      	beq.n	8004d98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3310      	adds	r3, #16
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f956 	bl	8006018 <xTaskRemoveFromEventList>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d012      	beq.n	8004d98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <xQueueGenericReset+0xd0>)
 8004d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	e009      	b.n	8004d98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3310      	adds	r3, #16
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fef1 	bl	8004b70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3324      	adds	r3, #36	@ 0x24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff feec 	bl	8004b70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d98:	f002 f8a0 	bl	8006edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d9c:	2301      	movs	r3, #1
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	@ 0x38
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	e7fd      	b.n	8004df2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <xQueueGenericCreateStatic+0x56>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <xQueueGenericCreateStatic+0x5a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueGenericCreateStatic+0x5c>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <xQueueGenericCreateStatic+0x84>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueGenericCreateStatic+0x88>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueGenericCreateStatic+0x8a>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61fb      	str	r3, [r7, #28]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e52:	2350      	movs	r3, #80	@ 0x50
 8004e54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b50      	cmp	r3, #80	@ 0x50
 8004e5a:	d00b      	beq.n	8004e74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	61bb      	str	r3, [r7, #24]
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f840 	bl	8004f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3730      	adds	r7, #48	@ 0x30
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b08a      	sub	sp, #40	@ 0x28
 8004eaa:	af02      	add	r7, sp, #8
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	613b      	str	r3, [r7, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	3350      	adds	r3, #80	@ 0x50
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f002 f8eb 	bl	80070bc <pvPortMalloc>
 8004ee6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d011      	beq.n	8004f12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3350      	adds	r3, #80	@ 0x50
 8004ef6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f805 	bl	8004f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f12:	69bb      	ldr	r3, [r7, #24]
	}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e002      	b.n	8004f3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	69b8      	ldr	r0, [r7, #24]
 8004f4e:	f7ff fec3 	bl	8004cd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08e      	sub	sp, #56	@ 0x38
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f72:	2300      	movs	r3, #0
 8004f74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <xQueueGenericSend+0x34>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <xQueueGenericSend+0x42>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <xQueueGenericSend+0x46>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <xQueueGenericSend+0x48>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <xQueueGenericSend+0x64>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d103      	bne.n	8004fd6 <xQueueGenericSend+0x72>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <xQueueGenericSend+0x76>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <xQueueGenericSend+0x78>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <xQueueGenericSend+0x94>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	623b      	str	r3, [r7, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff8:	f001 f9ce 	bl	8006398 <xTaskGetSchedulerState>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <xQueueGenericSend+0xa4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <xQueueGenericSend+0xa8>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <xQueueGenericSend+0xaa>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10b      	bne.n	800502a <xQueueGenericSend+0xc6>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	61fb      	str	r3, [r7, #28]
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	e7fd      	b.n	8005026 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800502a:	f001 ff25 	bl	8006e78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <xQueueGenericSend+0xdc>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d129      	bne.n	8005094 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005046:	f000 fa0f 	bl	8005468 <prvCopyDataToQueue>
 800504a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d010      	beq.n	8005076 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	3324      	adds	r3, #36	@ 0x24
 8005058:	4618      	mov	r0, r3
 800505a:	f000 ffdd 	bl	8006018 <xTaskRemoveFromEventList>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005064:	4b3f      	ldr	r3, [pc, #252]	@ (8005164 <xQueueGenericSend+0x200>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	e00a      	b.n	800508c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800507c:	4b39      	ldr	r3, [pc, #228]	@ (8005164 <xQueueGenericSend+0x200>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800508c:	f001 ff26 	bl	8006edc <vPortExitCritical>
				return pdPASS;
 8005090:	2301      	movs	r3, #1
 8005092:	e063      	b.n	800515c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800509a:	f001 ff1f 	bl	8006edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	e05c      	b.n	800515c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 f817 	bl	80060e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050b6:	f001 ff11 	bl	8006edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ba:	f000 fd87 	bl	8005bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050be:	f001 fedb 	bl	8006e78 <vPortEnterCritical>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050c8:	b25b      	sxtb	r3, r3
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d103      	bne.n	80050d8 <xQueueGenericSend+0x174>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050de:	b25b      	sxtb	r3, r3
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d103      	bne.n	80050ee <xQueueGenericSend+0x18a>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ee:	f001 fef5 	bl	8006edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050f2:	1d3a      	adds	r2, r7, #4
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f806 	bl	800610c <xTaskCheckForTimeOut>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d124      	bne.n	8005150 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005106:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005108:	f000 faa6 	bl	8005658 <prvIsQueueFull>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d018      	beq.n	8005144 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005114:	3310      	adds	r3, #16
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 ff2a 	bl	8005f74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005122:	f000 fa31 	bl	8005588 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005126:	f000 fd5f 	bl	8005be8 <xTaskResumeAll>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	f47f af7c 	bne.w	800502a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005132:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <xQueueGenericSend+0x200>)
 8005134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	e772      	b.n	800502a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005146:	f000 fa1f 	bl	8005588 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800514a:	f000 fd4d 	bl	8005be8 <xTaskResumeAll>
 800514e:	e76c      	b.n	800502a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005152:	f000 fa19 	bl	8005588 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005156:	f000 fd47 	bl	8005be8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800515a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800515c:	4618      	mov	r0, r3
 800515e:	3738      	adds	r7, #56	@ 0x38
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b090      	sub	sp, #64	@ 0x40
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800517a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <xQueueGenericSendFromISR+0x3e>
 800519e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xQueueGenericSendFromISR+0x42>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueGenericSendFromISR+0x44>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d103      	bne.n	80051d6 <xQueueGenericSendFromISR+0x6e>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <xQueueGenericSendFromISR+0x72>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueGenericSendFromISR+0x74>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	623b      	str	r3, [r7, #32]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051f8:	f001 ff1e 	bl	8007038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	61fa      	str	r2, [r7, #28]
 8005212:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005214:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800521c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	429a      	cmp	r2, r3
 8005222:	d302      	bcc.n	800522a <xQueueGenericSendFromISR+0xc2>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d12f      	bne.n	800528a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800522a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005230:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005240:	f000 f912 	bl	8005468 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005244:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d112      	bne.n	8005274 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	3324      	adds	r3, #36	@ 0x24
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fedc 	bl	8006018 <xTaskRemoveFromEventList>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00e      	beq.n	8005284 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e007      	b.n	8005284 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005274:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005278:	3301      	adds	r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	b25a      	sxtb	r2, r3
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005284:	2301      	movs	r3, #1
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005288:	e001      	b.n	800528e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800528a:	2300      	movs	r3, #0
 800528c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800528e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005290:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005298:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800529a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800529c:	4618      	mov	r0, r3
 800529e:	3740      	adds	r7, #64	@ 0x40
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	@ 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10b      	bne.n	80052d6 <xQueueReceive+0x32>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	623b      	str	r3, [r7, #32]
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	e7fd      	b.n	80052d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <xQueueReceive+0x40>
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <xQueueReceive+0x44>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <xQueueReceive+0x46>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <xQueueReceive+0x62>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	61fb      	str	r3, [r7, #28]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005306:	f001 f847 	bl	8006398 <xTaskGetSchedulerState>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d102      	bne.n	8005316 <xQueueReceive+0x72>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <xQueueReceive+0x76>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <xQueueReceive+0x78>
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <xQueueReceive+0x94>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	61bb      	str	r3, [r7, #24]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005338:	f001 fd9e 	bl	8006e78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01f      	beq.n	8005388 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800534c:	f000 f8f6 	bl	800553c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00f      	beq.n	8005380 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	3310      	adds	r3, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fe57 	bl	8006018 <xTaskRemoveFromEventList>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005370:	4b3c      	ldr	r3, [pc, #240]	@ (8005464 <xQueueReceive+0x1c0>)
 8005372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005380:	f001 fdac 	bl	8006edc <vPortExitCritical>
				return pdPASS;
 8005384:	2301      	movs	r3, #1
 8005386:	e069      	b.n	800545c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800538e:	f001 fda5 	bl	8006edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005392:	2300      	movs	r3, #0
 8005394:	e062      	b.n	800545c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800539c:	f107 0310 	add.w	r3, r7, #16
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fe9d 	bl	80060e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053a6:	2301      	movs	r3, #1
 80053a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053aa:	f001 fd97 	bl	8006edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ae:	f000 fc0d 	bl	8005bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053b2:	f001 fd61 	bl	8006e78 <vPortEnterCritical>
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d103      	bne.n	80053cc <xQueueReceive+0x128>
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d103      	bne.n	80053e2 <xQueueReceive+0x13e>
 80053da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053e2:	f001 fd7b 	bl	8006edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053e6:	1d3a      	adds	r2, r7, #4
 80053e8:	f107 0310 	add.w	r3, r7, #16
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fe8c 	bl	800610c <xTaskCheckForTimeOut>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d123      	bne.n	8005442 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053fc:	f000 f916 	bl	800562c <prvIsQueueEmpty>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d017      	beq.n	8005436 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	3324      	adds	r3, #36	@ 0x24
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fdb0 	bl	8005f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005416:	f000 f8b7 	bl	8005588 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800541a:	f000 fbe5 	bl	8005be8 <xTaskResumeAll>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d189      	bne.n	8005338 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005424:	4b0f      	ldr	r3, [pc, #60]	@ (8005464 <xQueueReceive+0x1c0>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	e780      	b.n	8005338 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005438:	f000 f8a6 	bl	8005588 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800543c:	f000 fbd4 	bl	8005be8 <xTaskResumeAll>
 8005440:	e77a      	b.n	8005338 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005444:	f000 f8a0 	bl	8005588 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005448:	f000 fbce 	bl	8005be8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800544c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800544e:	f000 f8ed 	bl	800562c <prvIsQueueEmpty>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	f43f af6f 	beq.w	8005338 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800545a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	@ 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d14d      	bne.n	800552a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ff9e 	bl	80063d4 <xTaskPriorityDisinherit>
 8005498:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	e043      	b.n	800552a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d119      	bne.n	80054dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6858      	ldr	r0, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b0:	461a      	mov	r2, r3
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	f002 fe45 	bl	8008142 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d32b      	bcc.n	800552a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	e026      	b.n	800552a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68d8      	ldr	r0, [r3, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e4:	461a      	mov	r2, r3
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	f002 fe2b 	bl	8008142 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	425b      	negs	r3, r3
 80054f6:	441a      	add	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d207      	bcs.n	8005518 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	425b      	negs	r3, r3
 8005512:	441a      	add	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d105      	bne.n	800552a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	3b01      	subs	r3, #1
 8005528:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005532:	697b      	ldr	r3, [r7, #20]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d018      	beq.n	8005580 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	441a      	add	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	429a      	cmp	r2, r3
 8005566:	d303      	bcc.n	8005570 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68d9      	ldr	r1, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	461a      	mov	r2, r3
 800557a:	6838      	ldr	r0, [r7, #0]
 800557c:	f002 fde1 	bl	8008142 <memcpy>
	}
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005590:	f001 fc72 	bl	8006e78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800559a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800559c:	e011      	b.n	80055c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d012      	beq.n	80055cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3324      	adds	r3, #36	@ 0x24
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fd34 	bl	8006018 <xTaskRemoveFromEventList>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055b6:	f000 fe0d 	bl	80061d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	3b01      	subs	r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	dce9      	bgt.n	800559e <prvUnlockQueue+0x16>
 80055ca:	e000      	b.n	80055ce <prvUnlockQueue+0x46>
					break;
 80055cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	22ff      	movs	r2, #255	@ 0xff
 80055d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055d6:	f001 fc81 	bl	8006edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055da:	f001 fc4d 	bl	8006e78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055e6:	e011      	b.n	800560c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d012      	beq.n	8005616 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3310      	adds	r3, #16
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fd0f 	bl	8006018 <xTaskRemoveFromEventList>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005600:	f000 fde8 	bl	80061d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	3b01      	subs	r3, #1
 8005608:	b2db      	uxtb	r3, r3
 800560a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800560c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005610:	2b00      	cmp	r3, #0
 8005612:	dce9      	bgt.n	80055e8 <prvUnlockQueue+0x60>
 8005614:	e000      	b.n	8005618 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005616:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	22ff      	movs	r2, #255	@ 0xff
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005620:	f001 fc5c 	bl	8006edc <vPortExitCritical>
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005634:	f001 fc20 	bl	8006e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e001      	b.n	800564a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800564a:	f001 fc47 	bl	8006edc <vPortExitCritical>

	return xReturn;
 800564e:	68fb      	ldr	r3, [r7, #12]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005660:	f001 fc0a 	bl	8006e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566c:	429a      	cmp	r2, r3
 800566e:	d102      	bne.n	8005676 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e001      	b.n	800567a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800567a:	f001 fc2f 	bl	8006edc <vPortExitCritical>

	return xReturn;
 800567e:	68fb      	ldr	r3, [r7, #12]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e014      	b.n	80056c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005698:	4a0f      	ldr	r2, [pc, #60]	@ (80056d8 <vQueueAddToRegistry+0x50>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056a4:	490c      	ldr	r1, [pc, #48]	@ (80056d8 <vQueueAddToRegistry+0x50>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056ae:	4a0a      	ldr	r2, [pc, #40]	@ (80056d8 <vQueueAddToRegistry+0x50>)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056ba:	e006      	b.n	80056ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b07      	cmp	r3, #7
 80056c6:	d9e7      	bls.n	8005698 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000ba0 	.word	0x20000ba0

080056dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056ec:	f001 fbc4 	bl	8006e78 <vPortEnterCritical>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056f6:	b25b      	sxtb	r3, r3
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d103      	bne.n	8005706 <vQueueWaitForMessageRestricted+0x2a>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800570c:	b25b      	sxtb	r3, r3
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d103      	bne.n	800571c <vQueueWaitForMessageRestricted+0x40>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800571c:	f001 fbde 	bl	8006edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	3324      	adds	r3, #36	@ 0x24
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fc45 	bl	8005fc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005736:	6978      	ldr	r0, [r7, #20]
 8005738:	f7ff ff26 	bl	8005588 <prvUnlockQueue>
	}
 800573c:	bf00      	nop
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	@ 0x38
 8005748:	af04      	add	r7, sp, #16
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	623b      	str	r3, [r7, #32]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	61fb      	str	r3, [r7, #28]
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	e7fd      	b.n	800578a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800578e:	235c      	movs	r3, #92	@ 0x5c
 8005790:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b5c      	cmp	r3, #92	@ 0x5c
 8005796:	d00b      	beq.n	80057b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	61bb      	str	r3, [r7, #24]
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01e      	beq.n	80057f6 <xTaskCreateStatic+0xb2>
 80057b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01b      	beq.n	80057f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057d0:	2300      	movs	r3, #0
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f850 	bl	800588e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057f0:	f000 f8de 	bl	80059b0 <prvAddNewTaskToReadyList>
 80057f4:	e001      	b.n	80057fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057fa:	697b      	ldr	r3, [r7, #20]
	}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3728      	adds	r7, #40	@ 0x28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	@ 0x30
 8005808:	af04      	add	r7, sp, #16
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	4613      	mov	r3, r2
 8005812:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4618      	mov	r0, r3
 800581a:	f001 fc4f 	bl	80070bc <pvPortMalloc>
 800581e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005826:	205c      	movs	r0, #92	@ 0x5c
 8005828:	f001 fc48 	bl	80070bc <pvPortMalloc>
 800582c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
 800583a:	e005      	b.n	8005848 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800583c:	6978      	ldr	r0, [r7, #20]
 800583e:	f001 fd0b 	bl	8007258 <vPortFree>
 8005842:	e001      	b.n	8005848 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d017      	beq.n	800587e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	2300      	movs	r3, #0
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f80e 	bl	800588e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005872:	69f8      	ldr	r0, [r7, #28]
 8005874:	f000 f89c 	bl	80059b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005878:	2301      	movs	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e002      	b.n	8005884 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005884:	69bb      	ldr	r3, [r7, #24]
	}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b088      	sub	sp, #32
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	461a      	mov	r2, r3
 80058a6:	21a5      	movs	r1, #165	@ 0xa5
 80058a8:	f002 fbcc 	bl	8008044 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058b6:	3b01      	subs	r3, #1
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00b      	beq.n	80058e8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	617b      	str	r3, [r7, #20]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01f      	beq.n	800592e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058ee:	2300      	movs	r3, #0
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	e012      	b.n	800591a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	7819      	ldrb	r1, [r3, #0]
 80058fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	3334      	adds	r3, #52	@ 0x34
 8005904:	460a      	mov	r2, r1
 8005906:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	3301      	adds	r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d9e9      	bls.n	80058f4 <prvInitialiseNewTask+0x66>
 8005920:	e000      	b.n	8005924 <prvInitialiseNewTask+0x96>
			{
				break;
 8005922:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800592c:	e003      	b.n	8005936 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005938:	2b37      	cmp	r3, #55	@ 0x37
 800593a:	d901      	bls.n	8005940 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800593c:	2337      	movs	r3, #55	@ 0x37
 800593e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005944:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800594a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	2200      	movs	r2, #0
 8005950:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff f92a 	bl	8004bb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	3318      	adds	r3, #24
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff f925 	bl	8004bb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	2200      	movs	r2, #0
 8005980:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	68f9      	ldr	r1, [r7, #12]
 800598e:	69b8      	ldr	r0, [r7, #24]
 8005990:	f001 f93e 	bl	8006c10 <pxPortInitialiseStack>
 8005994:	4602      	mov	r2, r0
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059a6:	bf00      	nop
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059b8:	f001 fa5e 	bl	8006e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005a74 <prvAddNewTaskToReadyList+0xc4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a74 <prvAddNewTaskToReadyList+0xc4>)
 80059c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005a78 <prvAddNewTaskToReadyList+0xc8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005a78 <prvAddNewTaskToReadyList+0xc8>)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d4:	4b27      	ldr	r3, [pc, #156]	@ (8005a74 <prvAddNewTaskToReadyList+0xc4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d110      	bne.n	80059fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059dc:	f000 fc1e 	bl	800621c <prvInitialiseTaskLists>
 80059e0:	e00d      	b.n	80059fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059e2:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <prvAddNewTaskToReadyList+0xcc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d109      	bne.n	80059fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ea:	4b23      	ldr	r3, [pc, #140]	@ (8005a78 <prvAddNewTaskToReadyList+0xc8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d802      	bhi.n	80059fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <prvAddNewTaskToReadyList+0xc8>)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059fe:	4b20      	ldr	r3, [pc, #128]	@ (8005a80 <prvAddNewTaskToReadyList+0xd0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a1e      	ldr	r2, [pc, #120]	@ (8005a80 <prvAddNewTaskToReadyList+0xd0>)
 8005a06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a08:	4b1d      	ldr	r3, [pc, #116]	@ (8005a80 <prvAddNewTaskToReadyList+0xd0>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a14:	4b1b      	ldr	r3, [pc, #108]	@ (8005a84 <prvAddNewTaskToReadyList+0xd4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d903      	bls.n	8005a24 <prvAddNewTaskToReadyList+0x74>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <prvAddNewTaskToReadyList+0xd4>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4a15      	ldr	r2, [pc, #84]	@ (8005a88 <prvAddNewTaskToReadyList+0xd8>)
 8005a32:	441a      	add	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f7ff f8c5 	bl	8004bca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a40:	f001 fa4c 	bl	8006edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a44:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <prvAddNewTaskToReadyList+0xcc>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00e      	beq.n	8005a6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <prvAddNewTaskToReadyList+0xc8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d207      	bcs.n	8005a6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <prvAddNewTaskToReadyList+0xdc>)
 8005a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	200010b4 	.word	0x200010b4
 8005a78:	20000be0 	.word	0x20000be0
 8005a7c:	200010c0 	.word	0x200010c0
 8005a80:	200010d0 	.word	0x200010d0
 8005a84:	200010bc 	.word	0x200010bc
 8005a88:	20000be4 	.word	0x20000be4
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d018      	beq.n	8005ad4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aa2:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <vTaskDelay+0x64>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <vTaskDelay+0x32>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60bb      	str	r3, [r7, #8]
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	e7fd      	b.n	8005abe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ac2:	f000 f883 	bl	8005bcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fcf3 	bl	80064b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ace:	f000 f88b 	bl	8005be8 <xTaskResumeAll>
 8005ad2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d107      	bne.n	8005aea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005ada:	4b07      	ldr	r3, [pc, #28]	@ (8005af8 <vTaskDelay+0x68>)
 8005adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200010dc 	.word	0x200010dc
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	@ 0x28
 8005b00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	1d39      	adds	r1, r7, #4
 8005b0e:	f107 0308 	add.w	r3, r7, #8
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fff8 	bl	8004b08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	9202      	str	r2, [sp, #8]
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	460a      	mov	r2, r1
 8005b2a:	4922      	ldr	r1, [pc, #136]	@ (8005bb4 <vTaskStartScheduler+0xb8>)
 8005b2c:	4822      	ldr	r0, [pc, #136]	@ (8005bb8 <vTaskStartScheduler+0xbc>)
 8005b2e:	f7ff fe09 	bl	8005744 <xTaskCreateStatic>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4a21      	ldr	r2, [pc, #132]	@ (8005bbc <vTaskStartScheduler+0xc0>)
 8005b36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b38:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <vTaskStartScheduler+0xc0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e001      	b.n	8005b4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d102      	bne.n	8005b56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b50:	f000 fd04 	bl	800655c <xTimerCreateTimerTask>
 8005b54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d116      	bne.n	8005b8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	613b      	str	r3, [r7, #16]
}
 8005b6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b70:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <vTaskStartScheduler+0xc4>)
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b78:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <vTaskStartScheduler+0xc8>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b7e:	4b12      	ldr	r3, [pc, #72]	@ (8005bc8 <vTaskStartScheduler+0xcc>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b84:	f001 f8d4 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b88:	e00f      	b.n	8005baa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d10b      	bne.n	8005baa <vTaskStartScheduler+0xae>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	60fb      	str	r3, [r7, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <vTaskStartScheduler+0xaa>
}
 8005baa:	bf00      	nop
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	0800a3cc 	.word	0x0800a3cc
 8005bb8:	080061ed 	.word	0x080061ed
 8005bbc:	200010d8 	.word	0x200010d8
 8005bc0:	200010d4 	.word	0x200010d4
 8005bc4:	200010c0 	.word	0x200010c0
 8005bc8:	200010b8 	.word	0x200010b8

08005bcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bd0:	4b04      	ldr	r3, [pc, #16]	@ (8005be4 <vTaskSuspendAll+0x18>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	4a03      	ldr	r2, [pc, #12]	@ (8005be4 <vTaskSuspendAll+0x18>)
 8005bd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	200010dc 	.word	0x200010dc

08005be8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bf6:	4b42      	ldr	r3, [pc, #264]	@ (8005d00 <xTaskResumeAll+0x118>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <xTaskResumeAll+0x2e>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	603b      	str	r3, [r7, #0]
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	e7fd      	b.n	8005c12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c16:	f001 f92f 	bl	8006e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c1a:	4b39      	ldr	r3, [pc, #228]	@ (8005d00 <xTaskResumeAll+0x118>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a37      	ldr	r2, [pc, #220]	@ (8005d00 <xTaskResumeAll+0x118>)
 8005c22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c24:	4b36      	ldr	r3, [pc, #216]	@ (8005d00 <xTaskResumeAll+0x118>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d162      	bne.n	8005cf2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c2c:	4b35      	ldr	r3, [pc, #212]	@ (8005d04 <xTaskResumeAll+0x11c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d05e      	beq.n	8005cf2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c34:	e02f      	b.n	8005c96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c36:	4b34      	ldr	r3, [pc, #208]	@ (8005d08 <xTaskResumeAll+0x120>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3318      	adds	r3, #24
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f81e 	bl	8004c84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff f819 	bl	8004c84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c56:	4b2d      	ldr	r3, [pc, #180]	@ (8005d0c <xTaskResumeAll+0x124>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d903      	bls.n	8005c66 <xTaskResumeAll+0x7e>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c62:	4a2a      	ldr	r2, [pc, #168]	@ (8005d0c <xTaskResumeAll+0x124>)
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4a27      	ldr	r2, [pc, #156]	@ (8005d10 <xTaskResumeAll+0x128>)
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f7fe ffa4 	bl	8004bca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c86:	4b23      	ldr	r3, [pc, #140]	@ (8005d14 <xTaskResumeAll+0x12c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005c90:	4b21      	ldr	r3, [pc, #132]	@ (8005d18 <xTaskResumeAll+0x130>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c96:	4b1c      	ldr	r3, [pc, #112]	@ (8005d08 <xTaskResumeAll+0x120>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1cb      	bne.n	8005c36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ca4:	f000 fb58 	bl	8006358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d1c <xTaskResumeAll+0x134>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cb4:	f000 f846 	bl	8005d44 <xTaskIncrementTick>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005cbe:	4b16      	ldr	r3, [pc, #88]	@ (8005d18 <xTaskResumeAll+0x130>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f1      	bne.n	8005cb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005cd0:	4b12      	ldr	r3, [pc, #72]	@ (8005d1c <xTaskResumeAll+0x134>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cd6:	4b10      	ldr	r3, [pc, #64]	@ (8005d18 <xTaskResumeAll+0x130>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d20 <xTaskResumeAll+0x138>)
 8005ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cf2:	f001 f8f3 	bl	8006edc <vPortExitCritical>

	return xAlreadyYielded;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	200010dc 	.word	0x200010dc
 8005d04:	200010b4 	.word	0x200010b4
 8005d08:	20001074 	.word	0x20001074
 8005d0c:	200010bc 	.word	0x200010bc
 8005d10:	20000be4 	.word	0x20000be4
 8005d14:	20000be0 	.word	0x20000be0
 8005d18:	200010c8 	.word	0x200010c8
 8005d1c:	200010c4 	.word	0x200010c4
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d2a:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <xTaskGetTickCount+0x1c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d30:	687b      	ldr	r3, [r7, #4]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	200010b8 	.word	0x200010b8

08005d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8005e8c <xTaskIncrementTick+0x148>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 8090 	bne.w	8005e78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d58:	4b4d      	ldr	r3, [pc, #308]	@ (8005e90 <xTaskIncrementTick+0x14c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d60:	4a4b      	ldr	r2, [pc, #300]	@ (8005e90 <xTaskIncrementTick+0x14c>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d121      	bne.n	8005db0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d6c:	4b49      	ldr	r3, [pc, #292]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	603b      	str	r3, [r7, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <xTaskIncrementTick+0x46>
 8005d8e:	4b41      	ldr	r3, [pc, #260]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	4b40      	ldr	r3, [pc, #256]	@ (8005e98 <xTaskIncrementTick+0x154>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a3e      	ldr	r2, [pc, #248]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e98 <xTaskIncrementTick+0x154>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	4b3e      	ldr	r3, [pc, #248]	@ (8005e9c <xTaskIncrementTick+0x158>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	4a3c      	ldr	r2, [pc, #240]	@ (8005e9c <xTaskIncrementTick+0x158>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	f000 fad4 	bl	8006358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005db0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea0 <xTaskIncrementTick+0x15c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d349      	bcc.n	8005e4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dba:	4b36      	ldr	r3, [pc, #216]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc4:	4b36      	ldr	r3, [pc, #216]	@ (8005ea0 <xTaskIncrementTick+0x15c>)
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dca:	601a      	str	r2, [r3, #0]
					break;
 8005dcc:	e03f      	b.n	8005e4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dce:	4b31      	ldr	r3, [pc, #196]	@ (8005e94 <xTaskIncrementTick+0x150>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d203      	bcs.n	8005dee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005de6:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea0 <xTaskIncrementTick+0x15c>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dec:	e02f      	b.n	8005e4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe ff46 	bl	8004c84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	3318      	adds	r3, #24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe ff3d 	bl	8004c84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0e:	4b25      	ldr	r3, [pc, #148]	@ (8005ea4 <xTaskIncrementTick+0x160>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d903      	bls.n	8005e1e <xTaskIncrementTick+0xda>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4a22      	ldr	r2, [pc, #136]	@ (8005ea4 <xTaskIncrementTick+0x160>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea8 <xTaskIncrementTick+0x164>)
 8005e2c:	441a      	add	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fe fec8 	bl	8004bca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <xTaskIncrementTick+0x168>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d3b8      	bcc.n	8005dba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4c:	e7b5      	b.n	8005dba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e4e:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <xTaskIncrementTick+0x168>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e54:	4914      	ldr	r1, [pc, #80]	@ (8005ea8 <xTaskIncrementTick+0x164>)
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d901      	bls.n	8005e6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e6a:	4b11      	ldr	r3, [pc, #68]	@ (8005eb0 <xTaskIncrementTick+0x16c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e004      	b.n	8005e82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e78:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb4 <xTaskIncrementTick+0x170>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb4 <xTaskIncrementTick+0x170>)
 8005e80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e82:	697b      	ldr	r3, [r7, #20]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	200010dc 	.word	0x200010dc
 8005e90:	200010b8 	.word	0x200010b8
 8005e94:	2000106c 	.word	0x2000106c
 8005e98:	20001070 	.word	0x20001070
 8005e9c:	200010cc 	.word	0x200010cc
 8005ea0:	200010d4 	.word	0x200010d4
 8005ea4:	200010bc 	.word	0x200010bc
 8005ea8:	20000be4 	.word	0x20000be4
 8005eac:	20000be0 	.word	0x20000be0
 8005eb0:	200010c8 	.word	0x200010c8
 8005eb4:	200010c4 	.word	0x200010c4

08005eb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ebe:	4b28      	ldr	r3, [pc, #160]	@ (8005f60 <vTaskSwitchContext+0xa8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ec6:	4b27      	ldr	r3, [pc, #156]	@ (8005f64 <vTaskSwitchContext+0xac>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ecc:	e042      	b.n	8005f54 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005ece:	4b25      	ldr	r3, [pc, #148]	@ (8005f64 <vTaskSwitchContext+0xac>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed4:	4b24      	ldr	r3, [pc, #144]	@ (8005f68 <vTaskSwitchContext+0xb0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e011      	b.n	8005f00 <vTaskSwitchContext+0x48>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <vTaskSwitchContext+0x42>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	607b      	str	r3, [r7, #4]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <vTaskSwitchContext+0x3e>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	491a      	ldr	r1, [pc, #104]	@ (8005f6c <vTaskSwitchContext+0xb4>)
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0e3      	beq.n	8005edc <vTaskSwitchContext+0x24>
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4a13      	ldr	r2, [pc, #76]	@ (8005f6c <vTaskSwitchContext+0xb4>)
 8005f20:	4413      	add	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	3308      	adds	r3, #8
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d104      	bne.n	8005f44 <vTaskSwitchContext+0x8c>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	4a09      	ldr	r2, [pc, #36]	@ (8005f70 <vTaskSwitchContext+0xb8>)
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4a06      	ldr	r2, [pc, #24]	@ (8005f68 <vTaskSwitchContext+0xb0>)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	200010dc 	.word	0x200010dc
 8005f64:	200010c8 	.word	0x200010c8
 8005f68:	200010bc 	.word	0x200010bc
 8005f6c:	20000be4 	.word	0x20000be4
 8005f70:	20000be0 	.word	0x20000be0

08005f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60fb      	str	r3, [r7, #12]
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f9c:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <vTaskPlaceOnEventList+0x48>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fe fe34 	bl	8004c12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005faa:	2101      	movs	r1, #1
 8005fac:	6838      	ldr	r0, [r7, #0]
 8005fae:	f000 fa81 	bl	80064b4 <prvAddCurrentTaskToDelayedList>
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000be0 	.word	0x20000be0

08005fc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	617b      	str	r3, [r7, #20]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3318      	adds	r3, #24
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7fe fde9 	bl	8004bca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f000 fa54 	bl	80064b4 <prvAddCurrentTaskToDelayedList>
	}
 800600c:	bf00      	nop
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000be0 	.word	0x20000be0

08006018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60fb      	str	r3, [r7, #12]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3318      	adds	r3, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fe1a 	bl	8004c84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006050:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <xTaskRemoveFromEventList+0xb0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11d      	bne.n	8006094 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe fe11 	bl	8004c84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006066:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <xTaskRemoveFromEventList+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d903      	bls.n	8006076 <xTaskRemoveFromEventList+0x5e>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006072:	4a16      	ldr	r2, [pc, #88]	@ (80060cc <xTaskRemoveFromEventList+0xb4>)
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <xTaskRemoveFromEventList+0xb8>)
 8006084:	441a      	add	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3304      	adds	r3, #4
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f7fe fd9c 	bl	8004bca <vListInsertEnd>
 8006092:	e005      	b.n	80060a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	3318      	adds	r3, #24
 8006098:	4619      	mov	r1, r3
 800609a:	480e      	ldr	r0, [pc, #56]	@ (80060d4 <xTaskRemoveFromEventList+0xbc>)
 800609c:	f7fe fd95 	bl	8004bca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a4:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <xTaskRemoveFromEventList+0xc0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d905      	bls.n	80060ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060ae:	2301      	movs	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <xTaskRemoveFromEventList+0xc4>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e001      	b.n	80060be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060be:	697b      	ldr	r3, [r7, #20]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200010dc 	.word	0x200010dc
 80060cc:	200010bc 	.word	0x200010bc
 80060d0:	20000be4 	.word	0x20000be4
 80060d4:	20001074 	.word	0x20001074
 80060d8:	20000be0 	.word	0x20000be0
 80060dc:	200010c8 	.word	0x200010c8

080060e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060e8:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <vTaskInternalSetTimeOutState+0x24>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <vTaskInternalSetTimeOutState+0x28>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	605a      	str	r2, [r3, #4]
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	200010cc 	.word	0x200010cc
 8006108:	200010b8 	.word	0x200010b8

0800610c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	613b      	str	r3, [r7, #16]
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	60fb      	str	r3, [r7, #12]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006152:	f000 fe91 	bl	8006e78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006156:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <xTaskCheckForTimeOut+0xc0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d102      	bne.n	8006176 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	e023      	b.n	80061be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <xTaskCheckForTimeOut+0xc4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d007      	beq.n	8006192 <xTaskCheckForTimeOut+0x86>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800618c:	2301      	movs	r3, #1
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	e015      	b.n	80061be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	429a      	cmp	r2, r3
 800619a:	d20b      	bcs.n	80061b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff ff99 	bl	80060e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e004      	b.n	80061be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061ba:	2301      	movs	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061be:	f000 fe8d 	bl	8006edc <vPortExitCritical>

	return xReturn;
 80061c2:	69fb      	ldr	r3, [r7, #28]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	200010b8 	.word	0x200010b8
 80061d0:	200010cc 	.word	0x200010cc

080061d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061d8:	4b03      	ldr	r3, [pc, #12]	@ (80061e8 <vTaskMissedYield+0x14>)
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	200010c8 	.word	0x200010c8

080061ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061f4:	f000 f852 	bl	800629c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <prvIdleTask+0x28>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d9f9      	bls.n	80061f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <prvIdleTask+0x2c>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006210:	e7f0      	b.n	80061f4 <prvIdleTask+0x8>
 8006212:	bf00      	nop
 8006214:	20000be4 	.word	0x20000be4
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006222:	2300      	movs	r3, #0
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	e00c      	b.n	8006242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a12      	ldr	r2, [pc, #72]	@ (800627c <prvInitialiseTaskLists+0x60>)
 8006234:	4413      	add	r3, r2
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fc9a 	bl	8004b70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3301      	adds	r3, #1
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b37      	cmp	r3, #55	@ 0x37
 8006246:	d9ef      	bls.n	8006228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006248:	480d      	ldr	r0, [pc, #52]	@ (8006280 <prvInitialiseTaskLists+0x64>)
 800624a:	f7fe fc91 	bl	8004b70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800624e:	480d      	ldr	r0, [pc, #52]	@ (8006284 <prvInitialiseTaskLists+0x68>)
 8006250:	f7fe fc8e 	bl	8004b70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006254:	480c      	ldr	r0, [pc, #48]	@ (8006288 <prvInitialiseTaskLists+0x6c>)
 8006256:	f7fe fc8b 	bl	8004b70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800625a:	480c      	ldr	r0, [pc, #48]	@ (800628c <prvInitialiseTaskLists+0x70>)
 800625c:	f7fe fc88 	bl	8004b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006260:	480b      	ldr	r0, [pc, #44]	@ (8006290 <prvInitialiseTaskLists+0x74>)
 8006262:	f7fe fc85 	bl	8004b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006266:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <prvInitialiseTaskLists+0x78>)
 8006268:	4a05      	ldr	r2, [pc, #20]	@ (8006280 <prvInitialiseTaskLists+0x64>)
 800626a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800626c:	4b0a      	ldr	r3, [pc, #40]	@ (8006298 <prvInitialiseTaskLists+0x7c>)
 800626e:	4a05      	ldr	r2, [pc, #20]	@ (8006284 <prvInitialiseTaskLists+0x68>)
 8006270:	601a      	str	r2, [r3, #0]
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000be4 	.word	0x20000be4
 8006280:	20001044 	.word	0x20001044
 8006284:	20001058 	.word	0x20001058
 8006288:	20001074 	.word	0x20001074
 800628c:	20001088 	.word	0x20001088
 8006290:	200010a0 	.word	0x200010a0
 8006294:	2000106c 	.word	0x2000106c
 8006298:	20001070 	.word	0x20001070

0800629c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062a2:	e019      	b.n	80062d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062a4:	f000 fde8 	bl	8006e78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a8:	4b10      	ldr	r3, [pc, #64]	@ (80062ec <prvCheckTasksWaitingTermination+0x50>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe fce5 	bl	8004c84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <prvCheckTasksWaitingTermination+0x54>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3b01      	subs	r3, #1
 80062c0:	4a0b      	ldr	r2, [pc, #44]	@ (80062f0 <prvCheckTasksWaitingTermination+0x54>)
 80062c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062c4:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <prvCheckTasksWaitingTermination+0x58>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	4a0a      	ldr	r2, [pc, #40]	@ (80062f4 <prvCheckTasksWaitingTermination+0x58>)
 80062cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062ce:	f000 fe05 	bl	8006edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f810 	bl	80062f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062d8:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <prvCheckTasksWaitingTermination+0x58>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e1      	bne.n	80062a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20001088 	.word	0x20001088
 80062f0:	200010b4 	.word	0x200010b4
 80062f4:	2000109c 	.word	0x2000109c

080062f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006306:	2b00      	cmp	r3, #0
 8006308:	d108      	bne.n	800631c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630e:	4618      	mov	r0, r3
 8006310:	f000 ffa2 	bl	8007258 <vPortFree>
				vPortFree( pxTCB );
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 ff9f 	bl	8007258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800631a:	e019      	b.n	8006350 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006322:	2b01      	cmp	r3, #1
 8006324:	d103      	bne.n	800632e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 ff96 	bl	8007258 <vPortFree>
	}
 800632c:	e010      	b.n	8006350 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006334:	2b02      	cmp	r3, #2
 8006336:	d00b      	beq.n	8006350 <prvDeleteTCB+0x58>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	60fb      	str	r3, [r7, #12]
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <prvDeleteTCB+0x54>
	}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800635e:	4b0c      	ldr	r3, [pc, #48]	@ (8006390 <prvResetNextTaskUnblockTime+0x38>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d104      	bne.n	8006372 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006368:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <prvResetNextTaskUnblockTime+0x3c>)
 800636a:	f04f 32ff 	mov.w	r2, #4294967295
 800636e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006370:	e008      	b.n	8006384 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006372:	4b07      	ldr	r3, [pc, #28]	@ (8006390 <prvResetNextTaskUnblockTime+0x38>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a04      	ldr	r2, [pc, #16]	@ (8006394 <prvResetNextTaskUnblockTime+0x3c>)
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	2000106c 	.word	0x2000106c
 8006394:	200010d4 	.word	0x200010d4

08006398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800639e:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <xTaskGetSchedulerState+0x34>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063a6:	2301      	movs	r3, #1
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	e008      	b.n	80063be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ac:	4b08      	ldr	r3, [pc, #32]	@ (80063d0 <xTaskGetSchedulerState+0x38>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063b4:	2302      	movs	r3, #2
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	e001      	b.n	80063be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063ba:	2300      	movs	r3, #0
 80063bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063be:	687b      	ldr	r3, [r7, #4]
	}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	200010c0 	.word	0x200010c0
 80063d0:	200010dc 	.word	0x200010dc

080063d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d058      	beq.n	800649c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063ea:	4b2f      	ldr	r3, [pc, #188]	@ (80064a8 <xTaskPriorityDisinherit+0xd4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d00b      	beq.n	800640c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	60fb      	str	r3, [r7, #12]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60bb      	str	r3, [r7, #8]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643e:	429a      	cmp	r2, r3
 8006440:	d02c      	beq.n	800649c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006446:	2b00      	cmp	r3, #0
 8006448:	d128      	bne.n	800649c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3304      	adds	r3, #4
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fc18 	bl	8004c84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646c:	4b0f      	ldr	r3, [pc, #60]	@ (80064ac <xTaskPriorityDisinherit+0xd8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d903      	bls.n	800647c <xTaskPriorityDisinherit+0xa8>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	4a0c      	ldr	r2, [pc, #48]	@ (80064ac <xTaskPriorityDisinherit+0xd8>)
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <xTaskPriorityDisinherit+0xdc>)
 800648a:	441a      	add	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f7fe fb99 	bl	8004bca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800649c:	697b      	ldr	r3, [r7, #20]
	}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000be0 	.word	0x20000be0
 80064ac:	200010bc 	.word	0x200010bc
 80064b0:	20000be4 	.word	0x20000be4

080064b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064be:	4b21      	ldr	r3, [pc, #132]	@ (8006544 <prvAddCurrentTaskToDelayedList+0x90>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c4:	4b20      	ldr	r3, [pc, #128]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fbda 	bl	8004c84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d10a      	bne.n	80064ee <prvAddCurrentTaskToDelayedList+0x3a>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064de:	4b1a      	ldr	r3, [pc, #104]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4819      	ldr	r0, [pc, #100]	@ (800654c <prvAddCurrentTaskToDelayedList+0x98>)
 80064e8:	f7fe fb6f 	bl	8004bca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064ec:	e026      	b.n	800653c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4413      	add	r3, r2
 80064f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064f6:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	429a      	cmp	r2, r3
 8006504:	d209      	bcs.n	800651a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006506:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f7fe fb7d 	bl	8004c12 <vListInsert>
}
 8006518:	e010      	b.n	800653c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800651a:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fe fb73 	bl	8004c12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	d202      	bcs.n	800653c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006536:	4a08      	ldr	r2, [pc, #32]	@ (8006558 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6013      	str	r3, [r2, #0]
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	200010b8 	.word	0x200010b8
 8006548:	20000be0 	.word	0x20000be0
 800654c:	200010a0 	.word	0x200010a0
 8006550:	20001070 	.word	0x20001070
 8006554:	2000106c 	.word	0x2000106c
 8006558:	200010d4 	.word	0x200010d4

0800655c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	@ 0x28
 8006560:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006566:	f000 fb13 	bl	8006b90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800656a:	4b1d      	ldr	r3, [pc, #116]	@ (80065e0 <xTimerCreateTimerTask+0x84>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d021      	beq.n	80065b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800657a:	1d3a      	adds	r2, r7, #4
 800657c:	f107 0108 	add.w	r1, r7, #8
 8006580:	f107 030c 	add.w	r3, r7, #12
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe fad9 	bl	8004b3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	9202      	str	r2, [sp, #8]
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	2302      	movs	r3, #2
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2300      	movs	r3, #0
 800659a:	460a      	mov	r2, r1
 800659c:	4911      	ldr	r1, [pc, #68]	@ (80065e4 <xTimerCreateTimerTask+0x88>)
 800659e:	4812      	ldr	r0, [pc, #72]	@ (80065e8 <xTimerCreateTimerTask+0x8c>)
 80065a0:	f7ff f8d0 	bl	8005744 <xTaskCreateStatic>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4a11      	ldr	r2, [pc, #68]	@ (80065ec <xTimerCreateTimerTask+0x90>)
 80065a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065aa:	4b10      	ldr	r3, [pc, #64]	@ (80065ec <xTimerCreateTimerTask+0x90>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065b2:	2301      	movs	r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	613b      	str	r3, [r7, #16]
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	e7fd      	b.n	80065d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80065d4:	697b      	ldr	r3, [r7, #20]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20001110 	.word	0x20001110
 80065e4:	0800a3d4 	.word	0x0800a3d4
 80065e8:	08006729 	.word	0x08006729
 80065ec:	20001114 	.word	0x20001114

080065f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	@ 0x28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <xTimerGenericCommand+0x30>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	623b      	str	r3, [r7, #32]
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	e7fd      	b.n	800661c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006620:	4b19      	ldr	r3, [pc, #100]	@ (8006688 <xTimerGenericCommand+0x98>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02a      	beq.n	800667e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b05      	cmp	r3, #5
 8006638:	dc18      	bgt.n	800666c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800663a:	f7ff fead 	bl	8006398 <xTaskGetSchedulerState>
 800663e:	4603      	mov	r3, r0
 8006640:	2b02      	cmp	r3, #2
 8006642:	d109      	bne.n	8006658 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006644:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <xTimerGenericCommand+0x98>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	f107 0110 	add.w	r1, r7, #16
 800664c:	2300      	movs	r3, #0
 800664e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006650:	f7fe fc88 	bl	8004f64 <xQueueGenericSend>
 8006654:	6278      	str	r0, [r7, #36]	@ 0x24
 8006656:	e012      	b.n	800667e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006658:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <xTimerGenericCommand+0x98>)
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	f107 0110 	add.w	r1, r7, #16
 8006660:	2300      	movs	r3, #0
 8006662:	2200      	movs	r2, #0
 8006664:	f7fe fc7e 	bl	8004f64 <xQueueGenericSend>
 8006668:	6278      	str	r0, [r7, #36]	@ 0x24
 800666a:	e008      	b.n	800667e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800666c:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <xTimerGenericCommand+0x98>)
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	f107 0110 	add.w	r1, r7, #16
 8006674:	2300      	movs	r3, #0
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	f7fe fd76 	bl	8005168 <xQueueGenericSendFromISR>
 800667c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006680:	4618      	mov	r0, r3
 8006682:	3728      	adds	r7, #40	@ 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20001110 	.word	0x20001110

0800668c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006696:	4b23      	ldr	r3, [pc, #140]	@ (8006724 <prvProcessExpiredTimer+0x98>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe faed 	bl	8004c84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d023      	beq.n	8006700 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	18d1      	adds	r1, r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	6978      	ldr	r0, [r7, #20]
 80066c6:	f000 f8d5 	bl	8006874 <prvInsertTimerInActiveList>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d020      	beq.n	8006712 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066d0:	2300      	movs	r3, #0
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2300      	movs	r3, #0
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	2100      	movs	r1, #0
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f7ff ff88 	bl	80065f0 <xTimerGenericCommand>
 80066e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d114      	bne.n	8006712 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	60fb      	str	r3, [r7, #12]
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	e7fd      	b.n	80066fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	6978      	ldr	r0, [r7, #20]
 8006718:	4798      	blx	r3
}
 800671a:	bf00      	nop
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20001108 	.word	0x20001108

08006728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006730:	f107 0308 	add.w	r3, r7, #8
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f859 	bl	80067ec <prvGetNextExpireTime>
 800673a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4619      	mov	r1, r3
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f805 	bl	8006750 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006746:	f000 f8d7 	bl	80068f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800674a:	bf00      	nop
 800674c:	e7f0      	b.n	8006730 <prvTimerTask+0x8>
	...

08006750 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800675a:	f7ff fa37 	bl	8005bcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f866 	bl	8006834 <prvSampleTimeNow>
 8006768:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d130      	bne.n	80067d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <prvProcessTimerOrBlockTask+0x3c>
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	429a      	cmp	r2, r3
 800677c:	d806      	bhi.n	800678c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800677e:	f7ff fa33 	bl	8005be8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff81 	bl	800668c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800678a:	e024      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006792:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <prvProcessTimerOrBlockTask+0x90>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <prvProcessTimerOrBlockTask+0x50>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <prvProcessTimerOrBlockTask+0x52>
 80067a0:	2300      	movs	r3, #0
 80067a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067a4:	4b0f      	ldr	r3, [pc, #60]	@ (80067e4 <prvProcessTimerOrBlockTask+0x94>)
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	f7fe ff93 	bl	80056dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067b6:	f7ff fa17 	bl	8005be8 <xTaskResumeAll>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067c0:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <prvProcessTimerOrBlockTask+0x98>)
 80067c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
}
 80067d0:	e001      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067d2:	f7ff fa09 	bl	8005be8 <xTaskResumeAll>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	2000110c 	.word	0x2000110c
 80067e4:	20001110 	.word	0x20001110
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006830 <prvGetNextExpireTime+0x44>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <prvGetNextExpireTime+0x16>
 80067fe:	2201      	movs	r2, #1
 8006800:	e000      	b.n	8006804 <prvGetNextExpireTime+0x18>
 8006802:	2200      	movs	r2, #0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006810:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <prvGetNextExpireTime+0x44>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e001      	b.n	8006820 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006820:	68fb      	ldr	r3, [r7, #12]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20001108 	.word	0x20001108

08006834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800683c:	f7ff fa72 	bl	8005d24 <xTaskGetTickCount>
 8006840:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006842:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <prvSampleTimeNow+0x3c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	429a      	cmp	r2, r3
 800684a:	d205      	bcs.n	8006858 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800684c:	f000 f93a 	bl	8006ac4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e002      	b.n	800685e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800685e:	4a04      	ldr	r2, [pc, #16]	@ (8006870 <prvSampleTimeNow+0x3c>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20001118 	.word	0x20001118

08006874 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d812      	bhi.n	80068c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e01b      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ae:	4b10      	ldr	r3, [pc, #64]	@ (80068f0 <prvInsertTimerInActiveList+0x7c>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7fe f9aa 	bl	8004c12 <vListInsert>
 80068be:	e012      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d206      	bcs.n	80068d6 <prvInsertTimerInActiveList+0x62>
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e007      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068d6:	4b07      	ldr	r3, [pc, #28]	@ (80068f4 <prvInsertTimerInActiveList+0x80>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe f996 	bl	8004c12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068e6:	697b      	ldr	r3, [r7, #20]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	2000110c 	.word	0x2000110c
 80068f4:	20001108 	.word	0x20001108

080068f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	@ 0x38
 80068fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068fe:	e0ce      	b.n	8006a9e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	da19      	bge.n	800693a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	3304      	adds	r3, #4
 800690a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10b      	bne.n	800692a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	61fb      	str	r3, [r7, #28]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800692a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006930:	6850      	ldr	r0, [r2, #4]
 8006932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006934:	6892      	ldr	r2, [r2, #8]
 8006936:	4611      	mov	r1, r2
 8006938:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f2c0 80ae 	blt.w	8006a9e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	3304      	adds	r3, #4
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe f996 	bl	8004c84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006958:	463b      	mov	r3, r7
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff ff6a 	bl	8006834 <prvSampleTimeNow>
 8006960:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b09      	cmp	r3, #9
 8006966:	f200 8097 	bhi.w	8006a98 <prvProcessReceivedCommands+0x1a0>
 800696a:	a201      	add	r2, pc, #4	@ (adr r2, 8006970 <prvProcessReceivedCommands+0x78>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	08006999 	.word	0x08006999
 8006974:	08006999 	.word	0x08006999
 8006978:	08006999 	.word	0x08006999
 800697c:	08006a0f 	.word	0x08006a0f
 8006980:	08006a23 	.word	0x08006a23
 8006984:	08006a6f 	.word	0x08006a6f
 8006988:	08006999 	.word	0x08006999
 800698c:	08006999 	.word	0x08006999
 8006990:	08006a0f 	.word	0x08006a0f
 8006994:	08006a23 	.word	0x08006a23
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	18d1      	adds	r1, r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069b8:	f7ff ff5c 	bl	8006874 <prvInsertTimerInActiveList>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d06c      	beq.n	8006a9c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d061      	beq.n	8006a9c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	441a      	add	r2, r3
 80069e0:	2300      	movs	r3, #0
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ea:	f7ff fe01 	bl	80065f0 <xTimerGenericCommand>
 80069ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d152      	bne.n	8006a9c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	61bb      	str	r3, [r7, #24]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a20:	e03d      	b.n	8006a9e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	617b      	str	r3, [r7, #20]
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	18d1      	adds	r1, r2, r3
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a68:	f7ff ff04 	bl	8006874 <prvInsertTimerInActiveList>
					break;
 8006a6c:	e017      	b.n	8006a9e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006a7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a7e:	f000 fbeb 	bl	8007258 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a82:	e00c      	b.n	8006a9e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a96:	e002      	b.n	8006a9e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006a98:	bf00      	nop
 8006a9a:	e000      	b.n	8006a9e <prvProcessReceivedCommands+0x1a6>
					break;
 8006a9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <prvProcessReceivedCommands+0x1c8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	1d39      	adds	r1, r7, #4
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fbfc 	bl	80052a4 <xQueueReceive>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f47f af26 	bne.w	8006900 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	3730      	adds	r7, #48	@ 0x30
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20001110 	.word	0x20001110

08006ac4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006aca:	e049      	b.n	8006b60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006acc:	4b2e      	ldr	r3, [pc, #184]	@ (8006b88 <prvSwitchTimerLists+0xc4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8006b88 <prvSwitchTimerLists+0xc4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe f8cd 	bl	8004c84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d02f      	beq.n	8006b60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d90e      	bls.n	8006b30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b88 <prvSwitchTimerLists+0xc4>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7fe f872 	bl	8004c12 <vListInsert>
 8006b2e:	e017      	b.n	8006b60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b30:	2300      	movs	r3, #0
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff fd58 	bl	80065f0 <xTimerGenericCommand>
 8006b40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	603b      	str	r3, [r7, #0]
}
 8006b5a:	bf00      	nop
 8006b5c:	bf00      	nop
 8006b5e:	e7fd      	b.n	8006b5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b60:	4b09      	ldr	r3, [pc, #36]	@ (8006b88 <prvSwitchTimerLists+0xc4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1b0      	bne.n	8006acc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b6a:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <prvSwitchTimerLists+0xc4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b70:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <prvSwitchTimerLists+0xc8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a04      	ldr	r2, [pc, #16]	@ (8006b88 <prvSwitchTimerLists+0xc4>)
 8006b76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b78:	4a04      	ldr	r2, [pc, #16]	@ (8006b8c <prvSwitchTimerLists+0xc8>)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	6013      	str	r3, [r2, #0]
}
 8006b7e:	bf00      	nop
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20001108 	.word	0x20001108
 8006b8c:	2000110c 	.word	0x2000110c

08006b90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b96:	f000 f96f 	bl	8006e78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b9a:	4b15      	ldr	r3, [pc, #84]	@ (8006bf0 <prvCheckForValidListAndQueue+0x60>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d120      	bne.n	8006be4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ba2:	4814      	ldr	r0, [pc, #80]	@ (8006bf4 <prvCheckForValidListAndQueue+0x64>)
 8006ba4:	f7fd ffe4 	bl	8004b70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ba8:	4813      	ldr	r0, [pc, #76]	@ (8006bf8 <prvCheckForValidListAndQueue+0x68>)
 8006baa:	f7fd ffe1 	bl	8004b70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bae:	4b13      	ldr	r3, [pc, #76]	@ (8006bfc <prvCheckForValidListAndQueue+0x6c>)
 8006bb0:	4a10      	ldr	r2, [pc, #64]	@ (8006bf4 <prvCheckForValidListAndQueue+0x64>)
 8006bb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bb4:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <prvCheckForValidListAndQueue+0x70>)
 8006bb6:	4a10      	ldr	r2, [pc, #64]	@ (8006bf8 <prvCheckForValidListAndQueue+0x68>)
 8006bb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <prvCheckForValidListAndQueue+0x74>)
 8006bc0:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <prvCheckForValidListAndQueue+0x78>)
 8006bc2:	2110      	movs	r1, #16
 8006bc4:	200a      	movs	r0, #10
 8006bc6:	f7fe f8f1 	bl	8004dac <xQueueGenericCreateStatic>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4a08      	ldr	r2, [pc, #32]	@ (8006bf0 <prvCheckForValidListAndQueue+0x60>)
 8006bce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bd0:	4b07      	ldr	r3, [pc, #28]	@ (8006bf0 <prvCheckForValidListAndQueue+0x60>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bd8:	4b05      	ldr	r3, [pc, #20]	@ (8006bf0 <prvCheckForValidListAndQueue+0x60>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	490b      	ldr	r1, [pc, #44]	@ (8006c0c <prvCheckForValidListAndQueue+0x7c>)
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fd52 	bl	8005688 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006be4:	f000 f97a 	bl	8006edc <vPortExitCritical>
}
 8006be8:	bf00      	nop
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20001110 	.word	0x20001110
 8006bf4:	200010e0 	.word	0x200010e0
 8006bf8:	200010f4 	.word	0x200010f4
 8006bfc:	20001108 	.word	0x20001108
 8006c00:	2000110c 	.word	0x2000110c
 8006c04:	200011bc 	.word	0x200011bc
 8006c08:	2000111c 	.word	0x2000111c
 8006c0c:	0800a3dc 	.word	0x0800a3dc

08006c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3b04      	subs	r3, #4
 8006c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f023 0201 	bic.w	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3b04      	subs	r3, #4
 8006c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c40:	4a0c      	ldr	r2, [pc, #48]	@ (8006c74 <pxPortInitialiseStack+0x64>)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3b14      	subs	r3, #20
 8006c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3b04      	subs	r3, #4
 8006c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f06f 0202 	mvn.w	r2, #2
 8006c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3b20      	subs	r3, #32
 8006c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c66:	68fb      	ldr	r3, [r7, #12]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	08006c79 	.word	0x08006c79

08006c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c82:	4b13      	ldr	r3, [pc, #76]	@ (8006cd0 <prvTaskExitError+0x58>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d00b      	beq.n	8006ca4 <prvTaskExitError+0x2c>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	60fb      	str	r3, [r7, #12]
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <prvTaskExitError+0x28>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60bb      	str	r3, [r7, #8]
}
 8006cb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cb8:	bf00      	nop
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0fc      	beq.n	8006cba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	20000010 	.word	0x20000010
	...

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	20000be0 	.word	0x20000be0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	@ (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d36:	4b47      	ldr	r3, [pc, #284]	@ (8006e54 <xPortStartScheduler+0x124>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a47      	ldr	r2, [pc, #284]	@ (8006e58 <xPortStartScheduler+0x128>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10b      	bne.n	8006d58 <xPortStartScheduler+0x28>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d58:	4b3e      	ldr	r3, [pc, #248]	@ (8006e54 <xPortStartScheduler+0x124>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e5c <xPortStartScheduler+0x12c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10b      	bne.n	8006d7a <xPortStartScheduler+0x4a>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	613b      	str	r3, [r7, #16]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d7a:	4b39      	ldr	r3, [pc, #228]	@ (8006e60 <xPortStartScheduler+0x130>)
 8006d7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	22ff      	movs	r2, #255	@ 0xff
 8006d8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	4b31      	ldr	r3, [pc, #196]	@ (8006e64 <xPortStartScheduler+0x134>)
 8006da0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006da2:	4b31      	ldr	r3, [pc, #196]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006da4:	2207      	movs	r2, #7
 8006da6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006da8:	e009      	b.n	8006dbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006daa:	4b2f      	ldr	r3, [pc, #188]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006db2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc6:	2b80      	cmp	r3, #128	@ 0x80
 8006dc8:	d0ef      	beq.n	8006daa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dca:	4b27      	ldr	r3, [pc, #156]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f1c3 0307 	rsb	r3, r3, #7
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d00b      	beq.n	8006dee <xPortStartScheduler+0xbe>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60bb      	str	r3, [r7, #8]
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	e7fd      	b.n	8006dea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dee:	4b1e      	ldr	r3, [pc, #120]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006df6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006df8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e00:	4a19      	ldr	r2, [pc, #100]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006e02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e0c:	4b17      	ldr	r3, [pc, #92]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e18:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a13      	ldr	r2, [pc, #76]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006e22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e24:	f000 f8da 	bl	8006fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e28:	4b11      	ldr	r3, [pc, #68]	@ (8006e70 <xPortStartScheduler+0x140>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e2e:	f000 f8f9 	bl	8007024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e32:	4b10      	ldr	r3, [pc, #64]	@ (8006e74 <xPortStartScheduler+0x144>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a0f      	ldr	r2, [pc, #60]	@ (8006e74 <xPortStartScheduler+0x144>)
 8006e38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e3e:	f7ff ff63 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e42:	f7ff f839 	bl	8005eb8 <vTaskSwitchContext>
	prvTaskExitError();
 8006e46:	f7ff ff17 	bl	8006c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	e000ed00 	.word	0xe000ed00
 8006e58:	410fc271 	.word	0x410fc271
 8006e5c:	410fc270 	.word	0x410fc270
 8006e60:	e000e400 	.word	0xe000e400
 8006e64:	2000120c 	.word	0x2000120c
 8006e68:	20001210 	.word	0x20001210
 8006e6c:	e000ed20 	.word	0xe000ed20
 8006e70:	20000010 	.word	0x20000010
 8006e74:	e000ef34 	.word	0xe000ef34

08006e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	607b      	str	r3, [r7, #4]
}
 8006e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e92:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <vPortEnterCritical+0x5c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3301      	adds	r3, #1
 8006e98:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed4 <vPortEnterCritical+0x5c>)
 8006e9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <vPortEnterCritical+0x5c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d110      	bne.n	8006ec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed8 <vPortEnterCritical+0x60>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	603b      	str	r3, [r7, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <vPortEnterCritical+0x4a>
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000010 	.word	0x20000010
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ee2:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <vPortExitCritical+0x50>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <vPortExitCritical+0x26>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	607b      	str	r3, [r7, #4]
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	e7fd      	b.n	8006efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f02:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <vPortExitCritical+0x50>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4a08      	ldr	r2, [pc, #32]	@ (8006f2c <vPortExitCritical+0x50>)
 8006f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <vPortExitCritical+0x50>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d105      	bne.n	8006f20 <vPortExitCritical+0x44>
 8006f14:	2300      	movs	r3, #0
 8006f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
}
 8006f1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	20000010 	.word	0x20000010

08006f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f30:	f3ef 8009 	mrs	r0, PSP
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4b15      	ldr	r3, [pc, #84]	@ (8006f90 <pxCurrentTCBConst>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f01e 0f10 	tst.w	lr, #16
 8006f40:	bf08      	it	eq
 8006f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f54:	f380 8811 	msr	BASEPRI, r0
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f7fe ffaa 	bl	8005eb8 <vTaskSwitchContext>
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f380 8811 	msr	BASEPRI, r0
 8006f6c:	bc09      	pop	{r0, r3}
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	6808      	ldr	r0, [r1, #0]
 8006f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f76:	f01e 0f10 	tst.w	lr, #16
 8006f7a:	bf08      	it	eq
 8006f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f80:	f380 8809 	msr	PSP, r0
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst>:
 8006f90:	20000be0 	.word	0x20000be0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fb2:	f7fe fec7 	bl	8005d44 <xTaskIncrementTick>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fbc:	4b06      	ldr	r3, [pc, #24]	@ (8006fd8 <xPortSysTickHandler+0x40>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <vPortSetupTimerInterrupt+0x34>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <vPortSetupTimerInterrupt+0x38>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <vPortSetupTimerInterrupt+0x3c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800701c <vPortSetupTimerInterrupt+0x40>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	4a09      	ldr	r2, [pc, #36]	@ (8007020 <vPortSetupTimerInterrupt+0x44>)
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ffe:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <vPortSetupTimerInterrupt+0x34>)
 8007000:	2207      	movs	r2, #7
 8007002:	601a      	str	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e010 	.word	0xe000e010
 8007014:	e000e018 	.word	0xe000e018
 8007018:	20000004 	.word	0x20000004
 800701c:	10624dd3 	.word	0x10624dd3
 8007020:	e000e014 	.word	0xe000e014

08007024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007034 <vPortEnableVFP+0x10>
 8007028:	6801      	ldr	r1, [r0, #0]
 800702a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800702e:	6001      	str	r1, [r0, #0]
 8007030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007032:	bf00      	nop
 8007034:	e000ed88 	.word	0xe000ed88

08007038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800703e:	f3ef 8305 	mrs	r3, IPSR
 8007042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d915      	bls.n	8007076 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704a:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <vPortValidateInterruptPriority+0x74>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007054:	4b16      	ldr	r3, [pc, #88]	@ (80070b0 <vPortValidateInterruptPriority+0x78>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	7afa      	ldrb	r2, [r7, #11]
 800705a:	429a      	cmp	r2, r3
 800705c:	d20b      	bcs.n	8007076 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007076:	4b0f      	ldr	r3, [pc, #60]	@ (80070b4 <vPortValidateInterruptPriority+0x7c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800707e:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <vPortValidateInterruptPriority+0x80>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d90b      	bls.n	800709e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	603b      	str	r3, [r7, #0]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <vPortValidateInterruptPriority+0x62>
	}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	e000e3f0 	.word	0xe000e3f0
 80070b0:	2000120c 	.word	0x2000120c
 80070b4:	e000ed0c 	.word	0xe000ed0c
 80070b8:	20001210 	.word	0x20001210

080070bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	@ 0x28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070c8:	f7fe fd80 	bl	8005bcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007240 <pvPortMalloc+0x184>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070d4:	f000 f924 	bl	8007320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007244 <pvPortMalloc+0x188>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4013      	ands	r3, r2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f040 8095 	bne.w	8007210 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01e      	beq.n	800712a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80070ec:	2208      	movs	r2, #8
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d015      	beq.n	800712a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	3308      	adds	r3, #8
 8007106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <pvPortMalloc+0x6e>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	617b      	str	r3, [r7, #20]
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d06f      	beq.n	8007210 <pvPortMalloc+0x154>
 8007130:	4b45      	ldr	r3, [pc, #276]	@ (8007248 <pvPortMalloc+0x18c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d86a      	bhi.n	8007210 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800713a:	4b44      	ldr	r3, [pc, #272]	@ (800724c <pvPortMalloc+0x190>)
 800713c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800713e:	4b43      	ldr	r3, [pc, #268]	@ (800724c <pvPortMalloc+0x190>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007144:	e004      	b.n	8007150 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	429a      	cmp	r2, r3
 8007158:	d903      	bls.n	8007162 <pvPortMalloc+0xa6>
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f1      	bne.n	8007146 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007162:	4b37      	ldr	r3, [pc, #220]	@ (8007240 <pvPortMalloc+0x184>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007168:	429a      	cmp	r2, r3
 800716a:	d051      	beq.n	8007210 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2208      	movs	r2, #8
 8007172:	4413      	add	r3, r2
 8007174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	1ad2      	subs	r2, r2, r3
 8007186:	2308      	movs	r3, #8
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	429a      	cmp	r2, r3
 800718c:	d920      	bls.n	80071d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800718e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <pvPortMalloc+0xfc>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	613b      	str	r3, [r7, #16]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ca:	69b8      	ldr	r0, [r7, #24]
 80071cc:	f000 f90a 	bl	80073e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007248 <pvPortMalloc+0x18c>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	4a1b      	ldr	r2, [pc, #108]	@ (8007248 <pvPortMalloc+0x18c>)
 80071dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071de:	4b1a      	ldr	r3, [pc, #104]	@ (8007248 <pvPortMalloc+0x18c>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <pvPortMalloc+0x194>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d203      	bcs.n	80071f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071ea:	4b17      	ldr	r3, [pc, #92]	@ (8007248 <pvPortMalloc+0x18c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a18      	ldr	r2, [pc, #96]	@ (8007250 <pvPortMalloc+0x194>)
 80071f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <pvPortMalloc+0x188>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <pvPortMalloc+0x198>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3301      	adds	r3, #1
 800720c:	4a11      	ldr	r2, [pc, #68]	@ (8007254 <pvPortMalloc+0x198>)
 800720e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007210:	f7fe fcea 	bl	8005be8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <pvPortMalloc+0x17a>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60fb      	str	r3, [r7, #12]
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	e7fd      	b.n	8007232 <pvPortMalloc+0x176>
	return pvReturn;
 8007236:	69fb      	ldr	r3, [r7, #28]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3728      	adds	r7, #40	@ 0x28
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20004e1c 	.word	0x20004e1c
 8007244:	20004e30 	.word	0x20004e30
 8007248:	20004e20 	.word	0x20004e20
 800724c:	20004e14 	.word	0x20004e14
 8007250:	20004e24 	.word	0x20004e24
 8007254:	20004e28 	.word	0x20004e28

08007258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d04f      	beq.n	800730a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800726a:	2308      	movs	r3, #8
 800726c:	425b      	negs	r3, r3
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <vPortFree+0xbc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4013      	ands	r3, r2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10b      	bne.n	800729e <vPortFree+0x46>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60fb      	str	r3, [r7, #12]
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	e7fd      	b.n	800729a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <vPortFree+0x66>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <vPortFree+0xbc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01e      	beq.n	800730a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11a      	bne.n	800730a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007314 <vPortFree+0xbc>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072e4:	f7fe fc72 	bl	8005bcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007318 <vPortFree+0xc0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4413      	add	r3, r2
 80072f2:	4a09      	ldr	r2, [pc, #36]	@ (8007318 <vPortFree+0xc0>)
 80072f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072f6:	6938      	ldr	r0, [r7, #16]
 80072f8:	f000 f874 	bl	80073e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072fc:	4b07      	ldr	r3, [pc, #28]	@ (800731c <vPortFree+0xc4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	4a06      	ldr	r2, [pc, #24]	@ (800731c <vPortFree+0xc4>)
 8007304:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007306:	f7fe fc6f 	bl	8005be8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800730a:	bf00      	nop
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20004e30 	.word	0x20004e30
 8007318:	20004e20 	.word	0x20004e20
 800731c:	20004e2c 	.word	0x20004e2c

08007320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007326:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800732a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800732c:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <prvHeapInit+0xac>)
 800732e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00c      	beq.n	8007354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	4a1f      	ldr	r2, [pc, #124]	@ (80073cc <prvHeapInit+0xac>)
 8007350:	4413      	add	r3, r2
 8007352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <prvHeapInit+0xb0>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800735e:	4b1c      	ldr	r3, [pc, #112]	@ (80073d0 <prvHeapInit+0xb0>)
 8007360:	2200      	movs	r2, #0
 8007362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4413      	add	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800736c:	2208      	movs	r2, #8
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1a9b      	subs	r3, r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a15      	ldr	r2, [pc, #84]	@ (80073d4 <prvHeapInit+0xb4>)
 8007380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007382:	4b14      	ldr	r3, [pc, #80]	@ (80073d4 <prvHeapInit+0xb4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800738a:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <prvHeapInit+0xb4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073a0:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <prvHeapInit+0xb4>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4a0a      	ldr	r2, [pc, #40]	@ (80073d8 <prvHeapInit+0xb8>)
 80073ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	4a09      	ldr	r2, [pc, #36]	@ (80073dc <prvHeapInit+0xbc>)
 80073b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073b8:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <prvHeapInit+0xc0>)
 80073ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80073be:	601a      	str	r2, [r3, #0]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20001214 	.word	0x20001214
 80073d0:	20004e14 	.word	0x20004e14
 80073d4:	20004e1c 	.word	0x20004e1c
 80073d8:	20004e24 	.word	0x20004e24
 80073dc:	20004e20 	.word	0x20004e20
 80073e0:	20004e30 	.word	0x20004e30

080073e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073ec:	4b28      	ldr	r3, [pc, #160]	@ (8007490 <prvInsertBlockIntoFreeList+0xac>)
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e002      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x14>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d8f7      	bhi.n	80073f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	4413      	add	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d108      	bne.n	8007426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	441a      	add	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d118      	bne.n	800746c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b15      	ldr	r3, [pc, #84]	@ (8007494 <prvInsertBlockIntoFreeList+0xb0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d00d      	beq.n	8007462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	441a      	add	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e008      	b.n	8007474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007462:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <prvInsertBlockIntoFreeList+0xb0>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e003      	b.n	8007474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	d002      	beq.n	8007482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20004e14 	.word	0x20004e14
 8007494:	20004e1c 	.word	0x20004e1c

08007498 <rand>:
 8007498:	4b16      	ldr	r3, [pc, #88]	@ (80074f4 <rand+0x5c>)
 800749a:	b510      	push	{r4, lr}
 800749c:	681c      	ldr	r4, [r3, #0]
 800749e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80074a0:	b9b3      	cbnz	r3, 80074d0 <rand+0x38>
 80074a2:	2018      	movs	r0, #24
 80074a4:	f001 fd1e 	bl	8008ee4 <malloc>
 80074a8:	4602      	mov	r2, r0
 80074aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80074ac:	b920      	cbnz	r0, 80074b8 <rand+0x20>
 80074ae:	4b12      	ldr	r3, [pc, #72]	@ (80074f8 <rand+0x60>)
 80074b0:	4812      	ldr	r0, [pc, #72]	@ (80074fc <rand+0x64>)
 80074b2:	2152      	movs	r1, #82	@ 0x52
 80074b4:	f000 fe54 	bl	8008160 <__assert_func>
 80074b8:	4911      	ldr	r1, [pc, #68]	@ (8007500 <rand+0x68>)
 80074ba:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <rand+0x6c>)
 80074bc:	e9c0 1300 	strd	r1, r3, [r0]
 80074c0:	4b11      	ldr	r3, [pc, #68]	@ (8007508 <rand+0x70>)
 80074c2:	6083      	str	r3, [r0, #8]
 80074c4:	230b      	movs	r3, #11
 80074c6:	8183      	strh	r3, [r0, #12]
 80074c8:	2100      	movs	r1, #0
 80074ca:	2001      	movs	r0, #1
 80074cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80074d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80074d2:	480e      	ldr	r0, [pc, #56]	@ (800750c <rand+0x74>)
 80074d4:	690b      	ldr	r3, [r1, #16]
 80074d6:	694c      	ldr	r4, [r1, #20]
 80074d8:	4a0d      	ldr	r2, [pc, #52]	@ (8007510 <rand+0x78>)
 80074da:	4358      	muls	r0, r3
 80074dc:	fb02 0004 	mla	r0, r2, r4, r0
 80074e0:	fba3 3202 	umull	r3, r2, r3, r2
 80074e4:	3301      	adds	r3, #1
 80074e6:	eb40 0002 	adc.w	r0, r0, r2
 80074ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80074ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80074f2:	bd10      	pop	{r4, pc}
 80074f4:	20000020 	.word	0x20000020
 80074f8:	0800a404 	.word	0x0800a404
 80074fc:	0800a41b 	.word	0x0800a41b
 8007500:	abcd330e 	.word	0xabcd330e
 8007504:	e66d1234 	.word	0xe66d1234
 8007508:	0005deec 	.word	0x0005deec
 800750c:	5851f42d 	.word	0x5851f42d
 8007510:	4c957f2d 	.word	0x4c957f2d

08007514 <__cvt>:
 8007514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007518:	ec57 6b10 	vmov	r6, r7, d0
 800751c:	2f00      	cmp	r7, #0
 800751e:	460c      	mov	r4, r1
 8007520:	4619      	mov	r1, r3
 8007522:	463b      	mov	r3, r7
 8007524:	bfbb      	ittet	lt
 8007526:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800752a:	461f      	movlt	r7, r3
 800752c:	2300      	movge	r3, #0
 800752e:	232d      	movlt	r3, #45	@ 0x2d
 8007530:	700b      	strb	r3, [r1, #0]
 8007532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007534:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007538:	4691      	mov	r9, r2
 800753a:	f023 0820 	bic.w	r8, r3, #32
 800753e:	bfbc      	itt	lt
 8007540:	4632      	movlt	r2, r6
 8007542:	4616      	movlt	r6, r2
 8007544:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007548:	d005      	beq.n	8007556 <__cvt+0x42>
 800754a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800754e:	d100      	bne.n	8007552 <__cvt+0x3e>
 8007550:	3401      	adds	r4, #1
 8007552:	2102      	movs	r1, #2
 8007554:	e000      	b.n	8007558 <__cvt+0x44>
 8007556:	2103      	movs	r1, #3
 8007558:	ab03      	add	r3, sp, #12
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	ab02      	add	r3, sp, #8
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	ec47 6b10 	vmov	d0, r6, r7
 8007564:	4653      	mov	r3, sl
 8007566:	4622      	mov	r2, r4
 8007568:	f000 fea2 	bl	80082b0 <_dtoa_r>
 800756c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007570:	4605      	mov	r5, r0
 8007572:	d119      	bne.n	80075a8 <__cvt+0x94>
 8007574:	f019 0f01 	tst.w	r9, #1
 8007578:	d00e      	beq.n	8007598 <__cvt+0x84>
 800757a:	eb00 0904 	add.w	r9, r0, r4
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	4630      	mov	r0, r6
 8007584:	4639      	mov	r1, r7
 8007586:	f7f9 fabf 	bl	8000b08 <__aeabi_dcmpeq>
 800758a:	b108      	cbz	r0, 8007590 <__cvt+0x7c>
 800758c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007590:	2230      	movs	r2, #48	@ 0x30
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	454b      	cmp	r3, r9
 8007596:	d31e      	bcc.n	80075d6 <__cvt+0xc2>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800759c:	1b5b      	subs	r3, r3, r5
 800759e:	4628      	mov	r0, r5
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	b004      	add	sp, #16
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075ac:	eb00 0904 	add.w	r9, r0, r4
 80075b0:	d1e5      	bne.n	800757e <__cvt+0x6a>
 80075b2:	7803      	ldrb	r3, [r0, #0]
 80075b4:	2b30      	cmp	r3, #48	@ 0x30
 80075b6:	d10a      	bne.n	80075ce <__cvt+0xba>
 80075b8:	2200      	movs	r2, #0
 80075ba:	2300      	movs	r3, #0
 80075bc:	4630      	mov	r0, r6
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f9 faa2 	bl	8000b08 <__aeabi_dcmpeq>
 80075c4:	b918      	cbnz	r0, 80075ce <__cvt+0xba>
 80075c6:	f1c4 0401 	rsb	r4, r4, #1
 80075ca:	f8ca 4000 	str.w	r4, [sl]
 80075ce:	f8da 3000 	ldr.w	r3, [sl]
 80075d2:	4499      	add	r9, r3
 80075d4:	e7d3      	b.n	800757e <__cvt+0x6a>
 80075d6:	1c59      	adds	r1, r3, #1
 80075d8:	9103      	str	r1, [sp, #12]
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	e7d9      	b.n	8007592 <__cvt+0x7e>

080075de <__exponent>:
 80075de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075e0:	2900      	cmp	r1, #0
 80075e2:	bfba      	itte	lt
 80075e4:	4249      	neglt	r1, r1
 80075e6:	232d      	movlt	r3, #45	@ 0x2d
 80075e8:	232b      	movge	r3, #43	@ 0x2b
 80075ea:	2909      	cmp	r1, #9
 80075ec:	7002      	strb	r2, [r0, #0]
 80075ee:	7043      	strb	r3, [r0, #1]
 80075f0:	dd29      	ble.n	8007646 <__exponent+0x68>
 80075f2:	f10d 0307 	add.w	r3, sp, #7
 80075f6:	461d      	mov	r5, r3
 80075f8:	270a      	movs	r7, #10
 80075fa:	461a      	mov	r2, r3
 80075fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007600:	fb07 1416 	mls	r4, r7, r6, r1
 8007604:	3430      	adds	r4, #48	@ 0x30
 8007606:	f802 4c01 	strb.w	r4, [r2, #-1]
 800760a:	460c      	mov	r4, r1
 800760c:	2c63      	cmp	r4, #99	@ 0x63
 800760e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007612:	4631      	mov	r1, r6
 8007614:	dcf1      	bgt.n	80075fa <__exponent+0x1c>
 8007616:	3130      	adds	r1, #48	@ 0x30
 8007618:	1e94      	subs	r4, r2, #2
 800761a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800761e:	1c41      	adds	r1, r0, #1
 8007620:	4623      	mov	r3, r4
 8007622:	42ab      	cmp	r3, r5
 8007624:	d30a      	bcc.n	800763c <__exponent+0x5e>
 8007626:	f10d 0309 	add.w	r3, sp, #9
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	42ac      	cmp	r4, r5
 800762e:	bf88      	it	hi
 8007630:	2300      	movhi	r3, #0
 8007632:	3302      	adds	r3, #2
 8007634:	4403      	add	r3, r0
 8007636:	1a18      	subs	r0, r3, r0
 8007638:	b003      	add	sp, #12
 800763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007640:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007644:	e7ed      	b.n	8007622 <__exponent+0x44>
 8007646:	2330      	movs	r3, #48	@ 0x30
 8007648:	3130      	adds	r1, #48	@ 0x30
 800764a:	7083      	strb	r3, [r0, #2]
 800764c:	70c1      	strb	r1, [r0, #3]
 800764e:	1d03      	adds	r3, r0, #4
 8007650:	e7f1      	b.n	8007636 <__exponent+0x58>
	...

08007654 <_printf_float>:
 8007654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	b08d      	sub	sp, #52	@ 0x34
 800765a:	460c      	mov	r4, r1
 800765c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007660:	4616      	mov	r6, r2
 8007662:	461f      	mov	r7, r3
 8007664:	4605      	mov	r5, r0
 8007666:	f000 fcf5 	bl	8008054 <_localeconv_r>
 800766a:	6803      	ldr	r3, [r0, #0]
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	4618      	mov	r0, r3
 8007670:	f7f8 fe1e 	bl	80002b0 <strlen>
 8007674:	2300      	movs	r3, #0
 8007676:	930a      	str	r3, [sp, #40]	@ 0x28
 8007678:	f8d8 3000 	ldr.w	r3, [r8]
 800767c:	9005      	str	r0, [sp, #20]
 800767e:	3307      	adds	r3, #7
 8007680:	f023 0307 	bic.w	r3, r3, #7
 8007684:	f103 0208 	add.w	r2, r3, #8
 8007688:	f894 a018 	ldrb.w	sl, [r4, #24]
 800768c:	f8d4 b000 	ldr.w	fp, [r4]
 8007690:	f8c8 2000 	str.w	r2, [r8]
 8007694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007698:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800769c:	9307      	str	r3, [sp, #28]
 800769e:	f8cd 8018 	str.w	r8, [sp, #24]
 80076a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80076a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076aa:	4b9c      	ldr	r3, [pc, #624]	@ (800791c <_printf_float+0x2c8>)
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295
 80076b0:	f7f9 fa5c 	bl	8000b6c <__aeabi_dcmpun>
 80076b4:	bb70      	cbnz	r0, 8007714 <_printf_float+0xc0>
 80076b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ba:	4b98      	ldr	r3, [pc, #608]	@ (800791c <_printf_float+0x2c8>)
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295
 80076c0:	f7f9 fa36 	bl	8000b30 <__aeabi_dcmple>
 80076c4:	bb30      	cbnz	r0, 8007714 <_printf_float+0xc0>
 80076c6:	2200      	movs	r2, #0
 80076c8:	2300      	movs	r3, #0
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f9 fa25 	bl	8000b1c <__aeabi_dcmplt>
 80076d2:	b110      	cbz	r0, 80076da <_printf_float+0x86>
 80076d4:	232d      	movs	r3, #45	@ 0x2d
 80076d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076da:	4a91      	ldr	r2, [pc, #580]	@ (8007920 <_printf_float+0x2cc>)
 80076dc:	4b91      	ldr	r3, [pc, #580]	@ (8007924 <_printf_float+0x2d0>)
 80076de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076e2:	bf8c      	ite	hi
 80076e4:	4690      	movhi	r8, r2
 80076e6:	4698      	movls	r8, r3
 80076e8:	2303      	movs	r3, #3
 80076ea:	6123      	str	r3, [r4, #16]
 80076ec:	f02b 0304 	bic.w	r3, fp, #4
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	f04f 0900 	mov.w	r9, #0
 80076f6:	9700      	str	r7, [sp, #0]
 80076f8:	4633      	mov	r3, r6
 80076fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076fc:	4621      	mov	r1, r4
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 f9d2 	bl	8007aa8 <_printf_common>
 8007704:	3001      	adds	r0, #1
 8007706:	f040 808d 	bne.w	8007824 <_printf_float+0x1d0>
 800770a:	f04f 30ff 	mov.w	r0, #4294967295
 800770e:	b00d      	add	sp, #52	@ 0x34
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f9 fa26 	bl	8000b6c <__aeabi_dcmpun>
 8007720:	b140      	cbz	r0, 8007734 <_printf_float+0xe0>
 8007722:	464b      	mov	r3, r9
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfbc      	itt	lt
 8007728:	232d      	movlt	r3, #45	@ 0x2d
 800772a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800772e:	4a7e      	ldr	r2, [pc, #504]	@ (8007928 <_printf_float+0x2d4>)
 8007730:	4b7e      	ldr	r3, [pc, #504]	@ (800792c <_printf_float+0x2d8>)
 8007732:	e7d4      	b.n	80076de <_printf_float+0x8a>
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800773a:	9206      	str	r2, [sp, #24]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	d13b      	bne.n	80077b8 <_printf_float+0x164>
 8007740:	2306      	movs	r3, #6
 8007742:	6063      	str	r3, [r4, #4]
 8007744:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007748:	2300      	movs	r3, #0
 800774a:	6022      	str	r2, [r4, #0]
 800774c:	9303      	str	r3, [sp, #12]
 800774e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007750:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007754:	ab09      	add	r3, sp, #36	@ 0x24
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	6861      	ldr	r1, [r4, #4]
 800775a:	ec49 8b10 	vmov	d0, r8, r9
 800775e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007762:	4628      	mov	r0, r5
 8007764:	f7ff fed6 	bl	8007514 <__cvt>
 8007768:	9b06      	ldr	r3, [sp, #24]
 800776a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800776c:	2b47      	cmp	r3, #71	@ 0x47
 800776e:	4680      	mov	r8, r0
 8007770:	d129      	bne.n	80077c6 <_printf_float+0x172>
 8007772:	1cc8      	adds	r0, r1, #3
 8007774:	db02      	blt.n	800777c <_printf_float+0x128>
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	4299      	cmp	r1, r3
 800777a:	dd41      	ble.n	8007800 <_printf_float+0x1ac>
 800777c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007780:	fa5f fa8a 	uxtb.w	sl, sl
 8007784:	3901      	subs	r1, #1
 8007786:	4652      	mov	r2, sl
 8007788:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800778c:	9109      	str	r1, [sp, #36]	@ 0x24
 800778e:	f7ff ff26 	bl	80075de <__exponent>
 8007792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007794:	1813      	adds	r3, r2, r0
 8007796:	2a01      	cmp	r2, #1
 8007798:	4681      	mov	r9, r0
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	dc02      	bgt.n	80077a4 <_printf_float+0x150>
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	07d2      	lsls	r2, r2, #31
 80077a2:	d501      	bpl.n	80077a8 <_printf_float+0x154>
 80077a4:	3301      	adds	r3, #1
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0a2      	beq.n	80076f6 <_printf_float+0xa2>
 80077b0:	232d      	movs	r3, #45	@ 0x2d
 80077b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077b6:	e79e      	b.n	80076f6 <_printf_float+0xa2>
 80077b8:	9a06      	ldr	r2, [sp, #24]
 80077ba:	2a47      	cmp	r2, #71	@ 0x47
 80077bc:	d1c2      	bne.n	8007744 <_printf_float+0xf0>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1c0      	bne.n	8007744 <_printf_float+0xf0>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e7bd      	b.n	8007742 <_printf_float+0xee>
 80077c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077ca:	d9db      	bls.n	8007784 <_printf_float+0x130>
 80077cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80077d0:	d118      	bne.n	8007804 <_printf_float+0x1b0>
 80077d2:	2900      	cmp	r1, #0
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	dd0b      	ble.n	80077f0 <_printf_float+0x19c>
 80077d8:	6121      	str	r1, [r4, #16]
 80077da:	b913      	cbnz	r3, 80077e2 <_printf_float+0x18e>
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	07d0      	lsls	r0, r2, #31
 80077e0:	d502      	bpl.n	80077e8 <_printf_float+0x194>
 80077e2:	3301      	adds	r3, #1
 80077e4:	440b      	add	r3, r1
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	e7db      	b.n	80077a8 <_printf_float+0x154>
 80077f0:	b913      	cbnz	r3, 80077f8 <_printf_float+0x1a4>
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	07d2      	lsls	r2, r2, #31
 80077f6:	d501      	bpl.n	80077fc <_printf_float+0x1a8>
 80077f8:	3302      	adds	r3, #2
 80077fa:	e7f4      	b.n	80077e6 <_printf_float+0x192>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e7f2      	b.n	80077e6 <_printf_float+0x192>
 8007800:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007806:	4299      	cmp	r1, r3
 8007808:	db05      	blt.n	8007816 <_printf_float+0x1c2>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	6121      	str	r1, [r4, #16]
 800780e:	07d8      	lsls	r0, r3, #31
 8007810:	d5ea      	bpl.n	80077e8 <_printf_float+0x194>
 8007812:	1c4b      	adds	r3, r1, #1
 8007814:	e7e7      	b.n	80077e6 <_printf_float+0x192>
 8007816:	2900      	cmp	r1, #0
 8007818:	bfd4      	ite	le
 800781a:	f1c1 0202 	rsble	r2, r1, #2
 800781e:	2201      	movgt	r2, #1
 8007820:	4413      	add	r3, r2
 8007822:	e7e0      	b.n	80077e6 <_printf_float+0x192>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	055a      	lsls	r2, r3, #21
 8007828:	d407      	bmi.n	800783a <_printf_float+0x1e6>
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	4642      	mov	r2, r8
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	d12b      	bne.n	8007890 <_printf_float+0x23c>
 8007838:	e767      	b.n	800770a <_printf_float+0xb6>
 800783a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800783e:	f240 80dd 	bls.w	80079fc <_printf_float+0x3a8>
 8007842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007846:	2200      	movs	r2, #0
 8007848:	2300      	movs	r3, #0
 800784a:	f7f9 f95d 	bl	8000b08 <__aeabi_dcmpeq>
 800784e:	2800      	cmp	r0, #0
 8007850:	d033      	beq.n	80078ba <_printf_float+0x266>
 8007852:	4a37      	ldr	r2, [pc, #220]	@ (8007930 <_printf_float+0x2dc>)
 8007854:	2301      	movs	r3, #1
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f af54 	beq.w	800770a <_printf_float+0xb6>
 8007862:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007866:	4543      	cmp	r3, r8
 8007868:	db02      	blt.n	8007870 <_printf_float+0x21c>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	07d8      	lsls	r0, r3, #31
 800786e:	d50f      	bpl.n	8007890 <_printf_float+0x23c>
 8007870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af45 	beq.w	800770a <_printf_float+0xb6>
 8007880:	f04f 0900 	mov.w	r9, #0
 8007884:	f108 38ff 	add.w	r8, r8, #4294967295
 8007888:	f104 0a1a 	add.w	sl, r4, #26
 800788c:	45c8      	cmp	r8, r9
 800788e:	dc09      	bgt.n	80078a4 <_printf_float+0x250>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	079b      	lsls	r3, r3, #30
 8007894:	f100 8103 	bmi.w	8007a9e <_printf_float+0x44a>
 8007898:	68e0      	ldr	r0, [r4, #12]
 800789a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800789c:	4298      	cmp	r0, r3
 800789e:	bfb8      	it	lt
 80078a0:	4618      	movlt	r0, r3
 80078a2:	e734      	b.n	800770e <_printf_float+0xba>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4652      	mov	r2, sl
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	f43f af2b 	beq.w	800770a <_printf_float+0xb6>
 80078b4:	f109 0901 	add.w	r9, r9, #1
 80078b8:	e7e8      	b.n	800788c <_printf_float+0x238>
 80078ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dc39      	bgt.n	8007934 <_printf_float+0x2e0>
 80078c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <_printf_float+0x2dc>)
 80078c2:	2301      	movs	r3, #1
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	f43f af1d 	beq.w	800770a <_printf_float+0xb6>
 80078d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80078d4:	ea59 0303 	orrs.w	r3, r9, r3
 80078d8:	d102      	bne.n	80078e0 <_printf_float+0x28c>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	07d9      	lsls	r1, r3, #31
 80078de:	d5d7      	bpl.n	8007890 <_printf_float+0x23c>
 80078e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	f43f af0d 	beq.w	800770a <_printf_float+0xb6>
 80078f0:	f04f 0a00 	mov.w	sl, #0
 80078f4:	f104 0b1a 	add.w	fp, r4, #26
 80078f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fa:	425b      	negs	r3, r3
 80078fc:	4553      	cmp	r3, sl
 80078fe:	dc01      	bgt.n	8007904 <_printf_float+0x2b0>
 8007900:	464b      	mov	r3, r9
 8007902:	e793      	b.n	800782c <_printf_float+0x1d8>
 8007904:	2301      	movs	r3, #1
 8007906:	465a      	mov	r2, fp
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f aefb 	beq.w	800770a <_printf_float+0xb6>
 8007914:	f10a 0a01 	add.w	sl, sl, #1
 8007918:	e7ee      	b.n	80078f8 <_printf_float+0x2a4>
 800791a:	bf00      	nop
 800791c:	7fefffff 	.word	0x7fefffff
 8007920:	0800a477 	.word	0x0800a477
 8007924:	0800a473 	.word	0x0800a473
 8007928:	0800a47f 	.word	0x0800a47f
 800792c:	0800a47b 	.word	0x0800a47b
 8007930:	0800a483 	.word	0x0800a483
 8007934:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007936:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800793a:	4553      	cmp	r3, sl
 800793c:	bfa8      	it	ge
 800793e:	4653      	movge	r3, sl
 8007940:	2b00      	cmp	r3, #0
 8007942:	4699      	mov	r9, r3
 8007944:	dc36      	bgt.n	80079b4 <_printf_float+0x360>
 8007946:	f04f 0b00 	mov.w	fp, #0
 800794a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800794e:	f104 021a 	add.w	r2, r4, #26
 8007952:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007954:	9306      	str	r3, [sp, #24]
 8007956:	eba3 0309 	sub.w	r3, r3, r9
 800795a:	455b      	cmp	r3, fp
 800795c:	dc31      	bgt.n	80079c2 <_printf_float+0x36e>
 800795e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007960:	459a      	cmp	sl, r3
 8007962:	dc3a      	bgt.n	80079da <_printf_float+0x386>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	07da      	lsls	r2, r3, #31
 8007968:	d437      	bmi.n	80079da <_printf_float+0x386>
 800796a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800796c:	ebaa 0903 	sub.w	r9, sl, r3
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	ebaa 0303 	sub.w	r3, sl, r3
 8007976:	4599      	cmp	r9, r3
 8007978:	bfa8      	it	ge
 800797a:	4699      	movge	r9, r3
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	dc33      	bgt.n	80079ea <_printf_float+0x396>
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800798a:	f104 0b1a 	add.w	fp, r4, #26
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	ebaa 0303 	sub.w	r3, sl, r3
 8007994:	eba3 0309 	sub.w	r3, r3, r9
 8007998:	4543      	cmp	r3, r8
 800799a:	f77f af79 	ble.w	8007890 <_printf_float+0x23c>
 800799e:	2301      	movs	r3, #1
 80079a0:	465a      	mov	r2, fp
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f aeae 	beq.w	800770a <_printf_float+0xb6>
 80079ae:	f108 0801 	add.w	r8, r8, #1
 80079b2:	e7ec      	b.n	800798e <_printf_float+0x33a>
 80079b4:	4642      	mov	r2, r8
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	d1c2      	bne.n	8007946 <_printf_float+0x2f2>
 80079c0:	e6a3      	b.n	800770a <_printf_float+0xb6>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	9206      	str	r2, [sp, #24]
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	f43f ae9c 	beq.w	800770a <_printf_float+0xb6>
 80079d2:	9a06      	ldr	r2, [sp, #24]
 80079d4:	f10b 0b01 	add.w	fp, fp, #1
 80079d8:	e7bb      	b.n	8007952 <_printf_float+0x2fe>
 80079da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b8      	blx	r7
 80079e4:	3001      	adds	r0, #1
 80079e6:	d1c0      	bne.n	800796a <_printf_float+0x316>
 80079e8:	e68f      	b.n	800770a <_printf_float+0xb6>
 80079ea:	9a06      	ldr	r2, [sp, #24]
 80079ec:	464b      	mov	r3, r9
 80079ee:	4442      	add	r2, r8
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1c3      	bne.n	8007982 <_printf_float+0x32e>
 80079fa:	e686      	b.n	800770a <_printf_float+0xb6>
 80079fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a00:	f1ba 0f01 	cmp.w	sl, #1
 8007a04:	dc01      	bgt.n	8007a0a <_printf_float+0x3b6>
 8007a06:	07db      	lsls	r3, r3, #31
 8007a08:	d536      	bpl.n	8007a78 <_printf_float+0x424>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	f43f ae78 	beq.w	800770a <_printf_float+0xb6>
 8007a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b8      	blx	r7
 8007a24:	3001      	adds	r0, #1
 8007a26:	f43f ae70 	beq.w	800770a <_printf_float+0xb6>
 8007a2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2300      	movs	r3, #0
 8007a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a36:	f7f9 f867 	bl	8000b08 <__aeabi_dcmpeq>
 8007a3a:	b9c0      	cbnz	r0, 8007a6e <_printf_float+0x41a>
 8007a3c:	4653      	mov	r3, sl
 8007a3e:	f108 0201 	add.w	r2, r8, #1
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b8      	blx	r7
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d10c      	bne.n	8007a66 <_printf_float+0x412>
 8007a4c:	e65d      	b.n	800770a <_printf_float+0xb6>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	465a      	mov	r2, fp
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f43f ae56 	beq.w	800770a <_printf_float+0xb6>
 8007a5e:	f108 0801 	add.w	r8, r8, #1
 8007a62:	45d0      	cmp	r8, sl
 8007a64:	dbf3      	blt.n	8007a4e <_printf_float+0x3fa>
 8007a66:	464b      	mov	r3, r9
 8007a68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a6c:	e6df      	b.n	800782e <_printf_float+0x1da>
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	f104 0b1a 	add.w	fp, r4, #26
 8007a76:	e7f4      	b.n	8007a62 <_printf_float+0x40e>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	e7e1      	b.n	8007a42 <_printf_float+0x3ee>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	464a      	mov	r2, r9
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae3e 	beq.w	800770a <_printf_float+0xb6>
 8007a8e:	f108 0801 	add.w	r8, r8, #1
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a96:	1a5b      	subs	r3, r3, r1
 8007a98:	4543      	cmp	r3, r8
 8007a9a:	dcf0      	bgt.n	8007a7e <_printf_float+0x42a>
 8007a9c:	e6fc      	b.n	8007898 <_printf_float+0x244>
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	f104 0919 	add.w	r9, r4, #25
 8007aa6:	e7f4      	b.n	8007a92 <_printf_float+0x43e>

08007aa8 <_printf_common>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	4616      	mov	r6, r2
 8007aae:	4698      	mov	r8, r3
 8007ab0:	688a      	ldr	r2, [r1, #8]
 8007ab2:	690b      	ldr	r3, [r1, #16]
 8007ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	bfb8      	it	lt
 8007abc:	4613      	movlt	r3, r2
 8007abe:	6033      	str	r3, [r6, #0]
 8007ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b10a      	cbz	r2, 8007ace <_printf_common+0x26>
 8007aca:	3301      	adds	r3, #1
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	0699      	lsls	r1, r3, #26
 8007ad2:	bf42      	ittt	mi
 8007ad4:	6833      	ldrmi	r3, [r6, #0]
 8007ad6:	3302      	addmi	r3, #2
 8007ad8:	6033      	strmi	r3, [r6, #0]
 8007ada:	6825      	ldr	r5, [r4, #0]
 8007adc:	f015 0506 	ands.w	r5, r5, #6
 8007ae0:	d106      	bne.n	8007af0 <_printf_common+0x48>
 8007ae2:	f104 0a19 	add.w	sl, r4, #25
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	6832      	ldr	r2, [r6, #0]
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	42ab      	cmp	r3, r5
 8007aee:	dc26      	bgt.n	8007b3e <_printf_common+0x96>
 8007af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007af4:	6822      	ldr	r2, [r4, #0]
 8007af6:	3b00      	subs	r3, #0
 8007af8:	bf18      	it	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	0692      	lsls	r2, r2, #26
 8007afe:	d42b      	bmi.n	8007b58 <_printf_common+0xb0>
 8007b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b04:	4641      	mov	r1, r8
 8007b06:	4638      	mov	r0, r7
 8007b08:	47c8      	blx	r9
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d01e      	beq.n	8007b4c <_printf_common+0xa4>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	f003 0306 	and.w	r3, r3, #6
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	bf02      	ittt	eq
 8007b1a:	68e5      	ldreq	r5, [r4, #12]
 8007b1c:	6833      	ldreq	r3, [r6, #0]
 8007b1e:	1aed      	subeq	r5, r5, r3
 8007b20:	68a3      	ldr	r3, [r4, #8]
 8007b22:	bf0c      	ite	eq
 8007b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b28:	2500      	movne	r5, #0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	bfc4      	itt	gt
 8007b2e:	1a9b      	subgt	r3, r3, r2
 8007b30:	18ed      	addgt	r5, r5, r3
 8007b32:	2600      	movs	r6, #0
 8007b34:	341a      	adds	r4, #26
 8007b36:	42b5      	cmp	r5, r6
 8007b38:	d11a      	bne.n	8007b70 <_printf_common+0xc8>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e008      	b.n	8007b50 <_printf_common+0xa8>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4652      	mov	r2, sl
 8007b42:	4641      	mov	r1, r8
 8007b44:	4638      	mov	r0, r7
 8007b46:	47c8      	blx	r9
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d103      	bne.n	8007b54 <_printf_common+0xac>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b54:	3501      	adds	r5, #1
 8007b56:	e7c6      	b.n	8007ae6 <_printf_common+0x3e>
 8007b58:	18e1      	adds	r1, r4, r3
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	2030      	movs	r0, #48	@ 0x30
 8007b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b62:	4422      	add	r2, r4
 8007b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	e7c7      	b.n	8007b00 <_printf_common+0x58>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4622      	mov	r2, r4
 8007b74:	4641      	mov	r1, r8
 8007b76:	4638      	mov	r0, r7
 8007b78:	47c8      	blx	r9
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d0e6      	beq.n	8007b4c <_printf_common+0xa4>
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7d9      	b.n	8007b36 <_printf_common+0x8e>
	...

08007b84 <_printf_i>:
 8007b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	7e0f      	ldrb	r7, [r1, #24]
 8007b8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b8c:	2f78      	cmp	r7, #120	@ 0x78
 8007b8e:	4691      	mov	r9, r2
 8007b90:	4680      	mov	r8, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	469a      	mov	sl, r3
 8007b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b9a:	d807      	bhi.n	8007bac <_printf_i+0x28>
 8007b9c:	2f62      	cmp	r7, #98	@ 0x62
 8007b9e:	d80a      	bhi.n	8007bb6 <_printf_i+0x32>
 8007ba0:	2f00      	cmp	r7, #0
 8007ba2:	f000 80d1 	beq.w	8007d48 <_printf_i+0x1c4>
 8007ba6:	2f58      	cmp	r7, #88	@ 0x58
 8007ba8:	f000 80b8 	beq.w	8007d1c <_printf_i+0x198>
 8007bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bb4:	e03a      	b.n	8007c2c <_printf_i+0xa8>
 8007bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bba:	2b15      	cmp	r3, #21
 8007bbc:	d8f6      	bhi.n	8007bac <_printf_i+0x28>
 8007bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8007bc4 <_printf_i+0x40>)
 8007bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c31 	.word	0x08007c31
 8007bcc:	08007bad 	.word	0x08007bad
 8007bd0:	08007bad 	.word	0x08007bad
 8007bd4:	08007bad 	.word	0x08007bad
 8007bd8:	08007bad 	.word	0x08007bad
 8007bdc:	08007c31 	.word	0x08007c31
 8007be0:	08007bad 	.word	0x08007bad
 8007be4:	08007bad 	.word	0x08007bad
 8007be8:	08007bad 	.word	0x08007bad
 8007bec:	08007bad 	.word	0x08007bad
 8007bf0:	08007d2f 	.word	0x08007d2f
 8007bf4:	08007c5b 	.word	0x08007c5b
 8007bf8:	08007ce9 	.word	0x08007ce9
 8007bfc:	08007bad 	.word	0x08007bad
 8007c00:	08007bad 	.word	0x08007bad
 8007c04:	08007d51 	.word	0x08007d51
 8007c08:	08007bad 	.word	0x08007bad
 8007c0c:	08007c5b 	.word	0x08007c5b
 8007c10:	08007bad 	.word	0x08007bad
 8007c14:	08007bad 	.word	0x08007bad
 8007c18:	08007cf1 	.word	0x08007cf1
 8007c1c:	6833      	ldr	r3, [r6, #0]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6032      	str	r2, [r6, #0]
 8007c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e09c      	b.n	8007d6a <_printf_i+0x1e6>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	1d19      	adds	r1, r3, #4
 8007c36:	6031      	str	r1, [r6, #0]
 8007c38:	0606      	lsls	r6, r0, #24
 8007c3a:	d501      	bpl.n	8007c40 <_printf_i+0xbc>
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <_printf_i+0xc4>
 8007c40:	0645      	lsls	r5, r0, #25
 8007c42:	d5fb      	bpl.n	8007c3c <_printf_i+0xb8>
 8007c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	da03      	bge.n	8007c54 <_printf_i+0xd0>
 8007c4c:	232d      	movs	r3, #45	@ 0x2d
 8007c4e:	426d      	negs	r5, r5
 8007c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c54:	4858      	ldr	r0, [pc, #352]	@ (8007db8 <_printf_i+0x234>)
 8007c56:	230a      	movs	r3, #10
 8007c58:	e011      	b.n	8007c7e <_printf_i+0xfa>
 8007c5a:	6821      	ldr	r1, [r4, #0]
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	0608      	lsls	r0, r1, #24
 8007c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c64:	d402      	bmi.n	8007c6c <_printf_i+0xe8>
 8007c66:	0649      	lsls	r1, r1, #25
 8007c68:	bf48      	it	mi
 8007c6a:	b2ad      	uxthmi	r5, r5
 8007c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c6e:	4852      	ldr	r0, [pc, #328]	@ (8007db8 <_printf_i+0x234>)
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	bf14      	ite	ne
 8007c74:	230a      	movne	r3, #10
 8007c76:	2308      	moveq	r3, #8
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c7e:	6866      	ldr	r6, [r4, #4]
 8007c80:	60a6      	str	r6, [r4, #8]
 8007c82:	2e00      	cmp	r6, #0
 8007c84:	db05      	blt.n	8007c92 <_printf_i+0x10e>
 8007c86:	6821      	ldr	r1, [r4, #0]
 8007c88:	432e      	orrs	r6, r5
 8007c8a:	f021 0104 	bic.w	r1, r1, #4
 8007c8e:	6021      	str	r1, [r4, #0]
 8007c90:	d04b      	beq.n	8007d2a <_printf_i+0x1a6>
 8007c92:	4616      	mov	r6, r2
 8007c94:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c98:	fb03 5711 	mls	r7, r3, r1, r5
 8007c9c:	5dc7      	ldrb	r7, [r0, r7]
 8007c9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ca2:	462f      	mov	r7, r5
 8007ca4:	42bb      	cmp	r3, r7
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	d9f4      	bls.n	8007c94 <_printf_i+0x110>
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d10b      	bne.n	8007cc6 <_printf_i+0x142>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	07df      	lsls	r7, r3, #31
 8007cb2:	d508      	bpl.n	8007cc6 <_printf_i+0x142>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	6861      	ldr	r1, [r4, #4]
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	bfde      	ittt	le
 8007cbc:	2330      	movle	r3, #48	@ 0x30
 8007cbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cc6:	1b92      	subs	r2, r2, r6
 8007cc8:	6122      	str	r2, [r4, #16]
 8007cca:	f8cd a000 	str.w	sl, [sp]
 8007cce:	464b      	mov	r3, r9
 8007cd0:	aa03      	add	r2, sp, #12
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	f7ff fee7 	bl	8007aa8 <_printf_common>
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d14a      	bne.n	8007d74 <_printf_i+0x1f0>
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	b004      	add	sp, #16
 8007ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	f043 0320 	orr.w	r3, r3, #32
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	4832      	ldr	r0, [pc, #200]	@ (8007dbc <_printf_i+0x238>)
 8007cf2:	2778      	movs	r7, #120	@ 0x78
 8007cf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	6831      	ldr	r1, [r6, #0]
 8007cfc:	061f      	lsls	r7, r3, #24
 8007cfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d02:	d402      	bmi.n	8007d0a <_printf_i+0x186>
 8007d04:	065f      	lsls	r7, r3, #25
 8007d06:	bf48      	it	mi
 8007d08:	b2ad      	uxthmi	r5, r5
 8007d0a:	6031      	str	r1, [r6, #0]
 8007d0c:	07d9      	lsls	r1, r3, #31
 8007d0e:	bf44      	itt	mi
 8007d10:	f043 0320 	orrmi.w	r3, r3, #32
 8007d14:	6023      	strmi	r3, [r4, #0]
 8007d16:	b11d      	cbz	r5, 8007d20 <_printf_i+0x19c>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	e7ad      	b.n	8007c78 <_printf_i+0xf4>
 8007d1c:	4826      	ldr	r0, [pc, #152]	@ (8007db8 <_printf_i+0x234>)
 8007d1e:	e7e9      	b.n	8007cf4 <_printf_i+0x170>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	f023 0320 	bic.w	r3, r3, #32
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	e7f6      	b.n	8007d18 <_printf_i+0x194>
 8007d2a:	4616      	mov	r6, r2
 8007d2c:	e7bd      	b.n	8007caa <_printf_i+0x126>
 8007d2e:	6833      	ldr	r3, [r6, #0]
 8007d30:	6825      	ldr	r5, [r4, #0]
 8007d32:	6961      	ldr	r1, [r4, #20]
 8007d34:	1d18      	adds	r0, r3, #4
 8007d36:	6030      	str	r0, [r6, #0]
 8007d38:	062e      	lsls	r6, r5, #24
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	d501      	bpl.n	8007d42 <_printf_i+0x1be>
 8007d3e:	6019      	str	r1, [r3, #0]
 8007d40:	e002      	b.n	8007d48 <_printf_i+0x1c4>
 8007d42:	0668      	lsls	r0, r5, #25
 8007d44:	d5fb      	bpl.n	8007d3e <_printf_i+0x1ba>
 8007d46:	8019      	strh	r1, [r3, #0]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	e7bc      	b.n	8007cca <_printf_i+0x146>
 8007d50:	6833      	ldr	r3, [r6, #0]
 8007d52:	1d1a      	adds	r2, r3, #4
 8007d54:	6032      	str	r2, [r6, #0]
 8007d56:	681e      	ldr	r6, [r3, #0]
 8007d58:	6862      	ldr	r2, [r4, #4]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7f8 fa57 	bl	8000210 <memchr>
 8007d62:	b108      	cbz	r0, 8007d68 <_printf_i+0x1e4>
 8007d64:	1b80      	subs	r0, r0, r6
 8007d66:	6060      	str	r0, [r4, #4]
 8007d68:	6863      	ldr	r3, [r4, #4]
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d72:	e7aa      	b.n	8007cca <_printf_i+0x146>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	4632      	mov	r2, r6
 8007d78:	4649      	mov	r1, r9
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	47d0      	blx	sl
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d0ad      	beq.n	8007cde <_printf_i+0x15a>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	079b      	lsls	r3, r3, #30
 8007d86:	d413      	bmi.n	8007db0 <_printf_i+0x22c>
 8007d88:	68e0      	ldr	r0, [r4, #12]
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	4298      	cmp	r0, r3
 8007d8e:	bfb8      	it	lt
 8007d90:	4618      	movlt	r0, r3
 8007d92:	e7a6      	b.n	8007ce2 <_printf_i+0x15e>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4632      	mov	r2, r6
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	47d0      	blx	sl
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d09d      	beq.n	8007cde <_printf_i+0x15a>
 8007da2:	3501      	adds	r5, #1
 8007da4:	68e3      	ldr	r3, [r4, #12]
 8007da6:	9903      	ldr	r1, [sp, #12]
 8007da8:	1a5b      	subs	r3, r3, r1
 8007daa:	42ab      	cmp	r3, r5
 8007dac:	dcf2      	bgt.n	8007d94 <_printf_i+0x210>
 8007dae:	e7eb      	b.n	8007d88 <_printf_i+0x204>
 8007db0:	2500      	movs	r5, #0
 8007db2:	f104 0619 	add.w	r6, r4, #25
 8007db6:	e7f5      	b.n	8007da4 <_printf_i+0x220>
 8007db8:	0800a485 	.word	0x0800a485
 8007dbc:	0800a496 	.word	0x0800a496

08007dc0 <std>:
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dce:	6083      	str	r3, [r0, #8]
 8007dd0:	8181      	strh	r1, [r0, #12]
 8007dd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007dd4:	81c2      	strh	r2, [r0, #14]
 8007dd6:	6183      	str	r3, [r0, #24]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	2208      	movs	r2, #8
 8007ddc:	305c      	adds	r0, #92	@ 0x5c
 8007dde:	f000 f931 	bl	8008044 <memset>
 8007de2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <std+0x58>)
 8007de4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007de6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <std+0x5c>)
 8007de8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <std+0x60>)
 8007dec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dee:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <std+0x64>)
 8007df0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007df2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <std+0x68>)
 8007df4:	6224      	str	r4, [r4, #32]
 8007df6:	429c      	cmp	r4, r3
 8007df8:	d006      	beq.n	8007e08 <std+0x48>
 8007dfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dfe:	4294      	cmp	r4, r2
 8007e00:	d002      	beq.n	8007e08 <std+0x48>
 8007e02:	33d0      	adds	r3, #208	@ 0xd0
 8007e04:	429c      	cmp	r4, r3
 8007e06:	d105      	bne.n	8007e14 <std+0x54>
 8007e08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e10:	f000 b994 	b.w	800813c <__retarget_lock_init_recursive>
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	bf00      	nop
 8007e18:	08007f45 	.word	0x08007f45
 8007e1c:	08007f67 	.word	0x08007f67
 8007e20:	08007f9f 	.word	0x08007f9f
 8007e24:	08007fc3 	.word	0x08007fc3
 8007e28:	20004e34 	.word	0x20004e34

08007e2c <stdio_exit_handler>:
 8007e2c:	4a02      	ldr	r2, [pc, #8]	@ (8007e38 <stdio_exit_handler+0xc>)
 8007e2e:	4903      	ldr	r1, [pc, #12]	@ (8007e3c <stdio_exit_handler+0x10>)
 8007e30:	4803      	ldr	r0, [pc, #12]	@ (8007e40 <stdio_exit_handler+0x14>)
 8007e32:	f000 b869 	b.w	8007f08 <_fwalk_sglue>
 8007e36:	bf00      	nop
 8007e38:	20000014 	.word	0x20000014
 8007e3c:	08009afd 	.word	0x08009afd
 8007e40:	20000024 	.word	0x20000024

08007e44 <cleanup_stdio>:
 8007e44:	6841      	ldr	r1, [r0, #4]
 8007e46:	4b0c      	ldr	r3, [pc, #48]	@ (8007e78 <cleanup_stdio+0x34>)
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	d001      	beq.n	8007e54 <cleanup_stdio+0x10>
 8007e50:	f001 fe54 	bl	8009afc <_fflush_r>
 8007e54:	68a1      	ldr	r1, [r4, #8]
 8007e56:	4b09      	ldr	r3, [pc, #36]	@ (8007e7c <cleanup_stdio+0x38>)
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d002      	beq.n	8007e62 <cleanup_stdio+0x1e>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f001 fe4d 	bl	8009afc <_fflush_r>
 8007e62:	68e1      	ldr	r1, [r4, #12]
 8007e64:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <cleanup_stdio+0x3c>)
 8007e66:	4299      	cmp	r1, r3
 8007e68:	d004      	beq.n	8007e74 <cleanup_stdio+0x30>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e70:	f001 be44 	b.w	8009afc <_fflush_r>
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	bf00      	nop
 8007e78:	20004e34 	.word	0x20004e34
 8007e7c:	20004e9c 	.word	0x20004e9c
 8007e80:	20004f04 	.word	0x20004f04

08007e84 <global_stdio_init.part.0>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb4 <global_stdio_init.part.0+0x30>)
 8007e88:	4c0b      	ldr	r4, [pc, #44]	@ (8007eb8 <global_stdio_init.part.0+0x34>)
 8007e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8007ebc <global_stdio_init.part.0+0x38>)
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	4620      	mov	r0, r4
 8007e90:	2200      	movs	r2, #0
 8007e92:	2104      	movs	r1, #4
 8007e94:	f7ff ff94 	bl	8007dc0 <std>
 8007e98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	2109      	movs	r1, #9
 8007ea0:	f7ff ff8e 	bl	8007dc0 <std>
 8007ea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eae:	2112      	movs	r1, #18
 8007eb0:	f7ff bf86 	b.w	8007dc0 <std>
 8007eb4:	20004f6c 	.word	0x20004f6c
 8007eb8:	20004e34 	.word	0x20004e34
 8007ebc:	08007e2d 	.word	0x08007e2d

08007ec0 <__sfp_lock_acquire>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	@ (8007ec8 <__sfp_lock_acquire+0x8>)
 8007ec2:	f000 b93c 	b.w	800813e <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20004f75 	.word	0x20004f75

08007ecc <__sfp_lock_release>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	@ (8007ed4 <__sfp_lock_release+0x8>)
 8007ece:	f000 b937 	b.w	8008140 <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20004f75 	.word	0x20004f75

08007ed8 <__sinit>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	f7ff fff0 	bl	8007ec0 <__sfp_lock_acquire>
 8007ee0:	6a23      	ldr	r3, [r4, #32]
 8007ee2:	b11b      	cbz	r3, 8007eec <__sinit+0x14>
 8007ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee8:	f7ff bff0 	b.w	8007ecc <__sfp_lock_release>
 8007eec:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <__sinit+0x28>)
 8007eee:	6223      	str	r3, [r4, #32]
 8007ef0:	4b04      	ldr	r3, [pc, #16]	@ (8007f04 <__sinit+0x2c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <__sinit+0xc>
 8007ef8:	f7ff ffc4 	bl	8007e84 <global_stdio_init.part.0>
 8007efc:	e7f2      	b.n	8007ee4 <__sinit+0xc>
 8007efe:	bf00      	nop
 8007f00:	08007e45 	.word	0x08007e45
 8007f04:	20004f6c 	.word	0x20004f6c

08007f08 <_fwalk_sglue>:
 8007f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	4688      	mov	r8, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	2600      	movs	r6, #0
 8007f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f18:	f1b9 0901 	subs.w	r9, r9, #1
 8007f1c:	d505      	bpl.n	8007f2a <_fwalk_sglue+0x22>
 8007f1e:	6824      	ldr	r4, [r4, #0]
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	d1f7      	bne.n	8007f14 <_fwalk_sglue+0xc>
 8007f24:	4630      	mov	r0, r6
 8007f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f2a:	89ab      	ldrh	r3, [r5, #12]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d907      	bls.n	8007f40 <_fwalk_sglue+0x38>
 8007f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f34:	3301      	adds	r3, #1
 8007f36:	d003      	beq.n	8007f40 <_fwalk_sglue+0x38>
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	47c0      	blx	r8
 8007f3e:	4306      	orrs	r6, r0
 8007f40:	3568      	adds	r5, #104	@ 0x68
 8007f42:	e7e9      	b.n	8007f18 <_fwalk_sglue+0x10>

08007f44 <__sread>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	460c      	mov	r4, r1
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	f000 f8a8 	bl	80080a0 <_read_r>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	bfab      	itete	ge
 8007f54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f56:	89a3      	ldrhlt	r3, [r4, #12]
 8007f58:	181b      	addge	r3, r3, r0
 8007f5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f5e:	bfac      	ite	ge
 8007f60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f62:	81a3      	strhlt	r3, [r4, #12]
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <__swrite>:
 8007f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	898b      	ldrh	r3, [r1, #12]
 8007f6e:	05db      	lsls	r3, r3, #23
 8007f70:	4605      	mov	r5, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4616      	mov	r6, r2
 8007f76:	d505      	bpl.n	8007f84 <__swrite+0x1e>
 8007f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f000 f87c 	bl	800807c <_lseek_r>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	4632      	mov	r2, r6
 8007f92:	463b      	mov	r3, r7
 8007f94:	4628      	mov	r0, r5
 8007f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9a:	f000 b893 	b.w	80080c4 <_write_r>

08007f9e <__sseek>:
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa6:	f000 f869 	bl	800807c <_lseek_r>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	bf15      	itete	ne
 8007fb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fba:	81a3      	strheq	r3, [r4, #12]
 8007fbc:	bf18      	it	ne
 8007fbe:	81a3      	strhne	r3, [r4, #12]
 8007fc0:	bd10      	pop	{r4, pc}

08007fc2 <__sclose>:
 8007fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc6:	f000 b849 	b.w	800805c <_close_r>

08007fca <_vsniprintf_r>:
 8007fca:	b530      	push	{r4, r5, lr}
 8007fcc:	4614      	mov	r4, r2
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	b09b      	sub	sp, #108	@ 0x6c
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	da05      	bge.n	8007fe4 <_vsniprintf_r+0x1a>
 8007fd8:	238b      	movs	r3, #139	@ 0x8b
 8007fda:	6003      	str	r3, [r0, #0]
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	b01b      	add	sp, #108	@ 0x6c
 8007fe2:	bd30      	pop	{r4, r5, pc}
 8007fe4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fe8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ff2:	bf14      	ite	ne
 8007ff4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ff8:	4623      	moveq	r3, r4
 8007ffa:	9302      	str	r3, [sp, #8]
 8007ffc:	9305      	str	r3, [sp, #20]
 8007ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008002:	9100      	str	r1, [sp, #0]
 8008004:	9104      	str	r1, [sp, #16]
 8008006:	f8ad 300e 	strh.w	r3, [sp, #14]
 800800a:	4669      	mov	r1, sp
 800800c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800800e:	f001 fbf5 	bl	80097fc <_svfiprintf_r>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	bfbc      	itt	lt
 8008016:	238b      	movlt	r3, #139	@ 0x8b
 8008018:	602b      	strlt	r3, [r5, #0]
 800801a:	2c00      	cmp	r4, #0
 800801c:	d0e0      	beq.n	8007fe0 <_vsniprintf_r+0x16>
 800801e:	9b00      	ldr	r3, [sp, #0]
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e7dc      	b.n	8007fe0 <_vsniprintf_r+0x16>
	...

08008028 <vsniprintf>:
 8008028:	b507      	push	{r0, r1, r2, lr}
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	460a      	mov	r2, r1
 8008030:	4601      	mov	r1, r0
 8008032:	4803      	ldr	r0, [pc, #12]	@ (8008040 <vsniprintf+0x18>)
 8008034:	6800      	ldr	r0, [r0, #0]
 8008036:	f7ff ffc8 	bl	8007fca <_vsniprintf_r>
 800803a:	b003      	add	sp, #12
 800803c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008040:	20000020 	.word	0x20000020

08008044 <memset>:
 8008044:	4402      	add	r2, r0
 8008046:	4603      	mov	r3, r0
 8008048:	4293      	cmp	r3, r2
 800804a:	d100      	bne.n	800804e <memset+0xa>
 800804c:	4770      	bx	lr
 800804e:	f803 1b01 	strb.w	r1, [r3], #1
 8008052:	e7f9      	b.n	8008048 <memset+0x4>

08008054 <_localeconv_r>:
 8008054:	4800      	ldr	r0, [pc, #0]	@ (8008058 <_localeconv_r+0x4>)
 8008056:	4770      	bx	lr
 8008058:	20000160 	.word	0x20000160

0800805c <_close_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4d06      	ldr	r5, [pc, #24]	@ (8008078 <_close_r+0x1c>)
 8008060:	2300      	movs	r3, #0
 8008062:	4604      	mov	r4, r0
 8008064:	4608      	mov	r0, r1
 8008066:	602b      	str	r3, [r5, #0]
 8008068:	f7f9 fe2a 	bl	8001cc0 <_close>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_close_r+0x1a>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_close_r+0x1a>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	20004f70 	.word	0x20004f70

0800807c <_lseek_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4d07      	ldr	r5, [pc, #28]	@ (800809c <_lseek_r+0x20>)
 8008080:	4604      	mov	r4, r0
 8008082:	4608      	mov	r0, r1
 8008084:	4611      	mov	r1, r2
 8008086:	2200      	movs	r2, #0
 8008088:	602a      	str	r2, [r5, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	f7f9 fe3f 	bl	8001d0e <_lseek>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_lseek_r+0x1e>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_lseek_r+0x1e>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	20004f70 	.word	0x20004f70

080080a0 <_read_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d07      	ldr	r5, [pc, #28]	@ (80080c0 <_read_r+0x20>)
 80080a4:	4604      	mov	r4, r0
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	602a      	str	r2, [r5, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f7f9 fdcd 	bl	8001c4e <_read>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_read_r+0x1e>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_read_r+0x1e>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	20004f70 	.word	0x20004f70

080080c4 <_write_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d07      	ldr	r5, [pc, #28]	@ (80080e4 <_write_r+0x20>)
 80080c8:	4604      	mov	r4, r0
 80080ca:	4608      	mov	r0, r1
 80080cc:	4611      	mov	r1, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7f9 fdd8 	bl	8001c88 <_write>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_write_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_write_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	20004f70 	.word	0x20004f70

080080e8 <__errno>:
 80080e8:	4b01      	ldr	r3, [pc, #4]	@ (80080f0 <__errno+0x8>)
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000020 	.word	0x20000020

080080f4 <__libc_init_array>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4d0d      	ldr	r5, [pc, #52]	@ (800812c <__libc_init_array+0x38>)
 80080f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008130 <__libc_init_array+0x3c>)
 80080fa:	1b64      	subs	r4, r4, r5
 80080fc:	10a4      	asrs	r4, r4, #2
 80080fe:	2600      	movs	r6, #0
 8008100:	42a6      	cmp	r6, r4
 8008102:	d109      	bne.n	8008118 <__libc_init_array+0x24>
 8008104:	4d0b      	ldr	r5, [pc, #44]	@ (8008134 <__libc_init_array+0x40>)
 8008106:	4c0c      	ldr	r4, [pc, #48]	@ (8008138 <__libc_init_array+0x44>)
 8008108:	f002 f86a 	bl	800a1e0 <_init>
 800810c:	1b64      	subs	r4, r4, r5
 800810e:	10a4      	asrs	r4, r4, #2
 8008110:	2600      	movs	r6, #0
 8008112:	42a6      	cmp	r6, r4
 8008114:	d105      	bne.n	8008122 <__libc_init_array+0x2e>
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	f855 3b04 	ldr.w	r3, [r5], #4
 800811c:	4798      	blx	r3
 800811e:	3601      	adds	r6, #1
 8008120:	e7ee      	b.n	8008100 <__libc_init_array+0xc>
 8008122:	f855 3b04 	ldr.w	r3, [r5], #4
 8008126:	4798      	blx	r3
 8008128:	3601      	adds	r6, #1
 800812a:	e7f2      	b.n	8008112 <__libc_init_array+0x1e>
 800812c:	0800a7dc 	.word	0x0800a7dc
 8008130:	0800a7dc 	.word	0x0800a7dc
 8008134:	0800a7dc 	.word	0x0800a7dc
 8008138:	0800a7e0 	.word	0x0800a7e0

0800813c <__retarget_lock_init_recursive>:
 800813c:	4770      	bx	lr

0800813e <__retarget_lock_acquire_recursive>:
 800813e:	4770      	bx	lr

08008140 <__retarget_lock_release_recursive>:
 8008140:	4770      	bx	lr

08008142 <memcpy>:
 8008142:	440a      	add	r2, r1
 8008144:	4291      	cmp	r1, r2
 8008146:	f100 33ff 	add.w	r3, r0, #4294967295
 800814a:	d100      	bne.n	800814e <memcpy+0xc>
 800814c:	4770      	bx	lr
 800814e:	b510      	push	{r4, lr}
 8008150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008158:	4291      	cmp	r1, r2
 800815a:	d1f9      	bne.n	8008150 <memcpy+0xe>
 800815c:	bd10      	pop	{r4, pc}
	...

08008160 <__assert_func>:
 8008160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008162:	4614      	mov	r4, r2
 8008164:	461a      	mov	r2, r3
 8008166:	4b09      	ldr	r3, [pc, #36]	@ (800818c <__assert_func+0x2c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4605      	mov	r5, r0
 800816c:	68d8      	ldr	r0, [r3, #12]
 800816e:	b14c      	cbz	r4, 8008184 <__assert_func+0x24>
 8008170:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <__assert_func+0x30>)
 8008172:	9100      	str	r1, [sp, #0]
 8008174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008178:	4906      	ldr	r1, [pc, #24]	@ (8008194 <__assert_func+0x34>)
 800817a:	462b      	mov	r3, r5
 800817c:	f001 fce6 	bl	8009b4c <fiprintf>
 8008180:	f001 fd20 	bl	8009bc4 <abort>
 8008184:	4b04      	ldr	r3, [pc, #16]	@ (8008198 <__assert_func+0x38>)
 8008186:	461c      	mov	r4, r3
 8008188:	e7f3      	b.n	8008172 <__assert_func+0x12>
 800818a:	bf00      	nop
 800818c:	20000020 	.word	0x20000020
 8008190:	0800a4a7 	.word	0x0800a4a7
 8008194:	0800a4b4 	.word	0x0800a4b4
 8008198:	0800a4e2 	.word	0x0800a4e2

0800819c <quorem>:
 800819c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	6903      	ldr	r3, [r0, #16]
 80081a2:	690c      	ldr	r4, [r1, #16]
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	4607      	mov	r7, r0
 80081a8:	db7e      	blt.n	80082a8 <quorem+0x10c>
 80081aa:	3c01      	subs	r4, #1
 80081ac:	f101 0814 	add.w	r8, r1, #20
 80081b0:	00a3      	lsls	r3, r4, #2
 80081b2:	f100 0514 	add.w	r5, r0, #20
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081c6:	3301      	adds	r3, #1
 80081c8:	429a      	cmp	r2, r3
 80081ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80081d2:	d32e      	bcc.n	8008232 <quorem+0x96>
 80081d4:	f04f 0a00 	mov.w	sl, #0
 80081d8:	46c4      	mov	ip, r8
 80081da:	46ae      	mov	lr, r5
 80081dc:	46d3      	mov	fp, sl
 80081de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081e2:	b298      	uxth	r0, r3
 80081e4:	fb06 a000 	mla	r0, r6, r0, sl
 80081e8:	0c02      	lsrs	r2, r0, #16
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	fb06 2303 	mla	r3, r6, r3, r2
 80081f0:	f8de 2000 	ldr.w	r2, [lr]
 80081f4:	b280      	uxth	r0, r0
 80081f6:	b292      	uxth	r2, r2
 80081f8:	1a12      	subs	r2, r2, r0
 80081fa:	445a      	add	r2, fp
 80081fc:	f8de 0000 	ldr.w	r0, [lr]
 8008200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008204:	b29b      	uxth	r3, r3
 8008206:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800820a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800820e:	b292      	uxth	r2, r2
 8008210:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008214:	45e1      	cmp	r9, ip
 8008216:	f84e 2b04 	str.w	r2, [lr], #4
 800821a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800821e:	d2de      	bcs.n	80081de <quorem+0x42>
 8008220:	9b00      	ldr	r3, [sp, #0]
 8008222:	58eb      	ldr	r3, [r5, r3]
 8008224:	b92b      	cbnz	r3, 8008232 <quorem+0x96>
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	3b04      	subs	r3, #4
 800822a:	429d      	cmp	r5, r3
 800822c:	461a      	mov	r2, r3
 800822e:	d32f      	bcc.n	8008290 <quorem+0xf4>
 8008230:	613c      	str	r4, [r7, #16]
 8008232:	4638      	mov	r0, r7
 8008234:	f001 f97e 	bl	8009534 <__mcmp>
 8008238:	2800      	cmp	r0, #0
 800823a:	db25      	blt.n	8008288 <quorem+0xec>
 800823c:	4629      	mov	r1, r5
 800823e:	2000      	movs	r0, #0
 8008240:	f858 2b04 	ldr.w	r2, [r8], #4
 8008244:	f8d1 c000 	ldr.w	ip, [r1]
 8008248:	fa1f fe82 	uxth.w	lr, r2
 800824c:	fa1f f38c 	uxth.w	r3, ip
 8008250:	eba3 030e 	sub.w	r3, r3, lr
 8008254:	4403      	add	r3, r0
 8008256:	0c12      	lsrs	r2, r2, #16
 8008258:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800825c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008260:	b29b      	uxth	r3, r3
 8008262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008266:	45c1      	cmp	r9, r8
 8008268:	f841 3b04 	str.w	r3, [r1], #4
 800826c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008270:	d2e6      	bcs.n	8008240 <quorem+0xa4>
 8008272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800827a:	b922      	cbnz	r2, 8008286 <quorem+0xea>
 800827c:	3b04      	subs	r3, #4
 800827e:	429d      	cmp	r5, r3
 8008280:	461a      	mov	r2, r3
 8008282:	d30b      	bcc.n	800829c <quorem+0x100>
 8008284:	613c      	str	r4, [r7, #16]
 8008286:	3601      	adds	r6, #1
 8008288:	4630      	mov	r0, r6
 800828a:	b003      	add	sp, #12
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	3b04      	subs	r3, #4
 8008294:	2a00      	cmp	r2, #0
 8008296:	d1cb      	bne.n	8008230 <quorem+0x94>
 8008298:	3c01      	subs	r4, #1
 800829a:	e7c6      	b.n	800822a <quorem+0x8e>
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	3b04      	subs	r3, #4
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	d1ef      	bne.n	8008284 <quorem+0xe8>
 80082a4:	3c01      	subs	r4, #1
 80082a6:	e7ea      	b.n	800827e <quorem+0xe2>
 80082a8:	2000      	movs	r0, #0
 80082aa:	e7ee      	b.n	800828a <quorem+0xee>
 80082ac:	0000      	movs	r0, r0
	...

080082b0 <_dtoa_r>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	69c7      	ldr	r7, [r0, #28]
 80082b6:	b097      	sub	sp, #92	@ 0x5c
 80082b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80082bc:	ec55 4b10 	vmov	r4, r5, d0
 80082c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80082c2:	9107      	str	r1, [sp, #28]
 80082c4:	4681      	mov	r9, r0
 80082c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80082c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80082ca:	b97f      	cbnz	r7, 80082ec <_dtoa_r+0x3c>
 80082cc:	2010      	movs	r0, #16
 80082ce:	f000 fe09 	bl	8008ee4 <malloc>
 80082d2:	4602      	mov	r2, r0
 80082d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80082d8:	b920      	cbnz	r0, 80082e4 <_dtoa_r+0x34>
 80082da:	4ba9      	ldr	r3, [pc, #676]	@ (8008580 <_dtoa_r+0x2d0>)
 80082dc:	21ef      	movs	r1, #239	@ 0xef
 80082de:	48a9      	ldr	r0, [pc, #676]	@ (8008584 <_dtoa_r+0x2d4>)
 80082e0:	f7ff ff3e 	bl	8008160 <__assert_func>
 80082e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80082e8:	6007      	str	r7, [r0, #0]
 80082ea:	60c7      	str	r7, [r0, #12]
 80082ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80082f0:	6819      	ldr	r1, [r3, #0]
 80082f2:	b159      	cbz	r1, 800830c <_dtoa_r+0x5c>
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	604a      	str	r2, [r1, #4]
 80082f8:	2301      	movs	r3, #1
 80082fa:	4093      	lsls	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]
 80082fe:	4648      	mov	r0, r9
 8008300:	f000 fee6 	bl	80090d0 <_Bfree>
 8008304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	1e2b      	subs	r3, r5, #0
 800830e:	bfb9      	ittee	lt
 8008310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008314:	9305      	strlt	r3, [sp, #20]
 8008316:	2300      	movge	r3, #0
 8008318:	6033      	strge	r3, [r6, #0]
 800831a:	9f05      	ldr	r7, [sp, #20]
 800831c:	4b9a      	ldr	r3, [pc, #616]	@ (8008588 <_dtoa_r+0x2d8>)
 800831e:	bfbc      	itt	lt
 8008320:	2201      	movlt	r2, #1
 8008322:	6032      	strlt	r2, [r6, #0]
 8008324:	43bb      	bics	r3, r7
 8008326:	d112      	bne.n	800834e <_dtoa_r+0x9e>
 8008328:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800832a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008334:	4323      	orrs	r3, r4
 8008336:	f000 855a 	beq.w	8008dee <_dtoa_r+0xb3e>
 800833a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800833c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800859c <_dtoa_r+0x2ec>
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 855c 	beq.w	8008dfe <_dtoa_r+0xb4e>
 8008346:	f10a 0303 	add.w	r3, sl, #3
 800834a:	f000 bd56 	b.w	8008dfa <_dtoa_r+0xb4a>
 800834e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008352:	2200      	movs	r2, #0
 8008354:	ec51 0b17 	vmov	r0, r1, d7
 8008358:	2300      	movs	r3, #0
 800835a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800835e:	f7f8 fbd3 	bl	8000b08 <__aeabi_dcmpeq>
 8008362:	4680      	mov	r8, r0
 8008364:	b158      	cbz	r0, 800837e <_dtoa_r+0xce>
 8008366:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008368:	2301      	movs	r3, #1
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800836e:	b113      	cbz	r3, 8008376 <_dtoa_r+0xc6>
 8008370:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008372:	4b86      	ldr	r3, [pc, #536]	@ (800858c <_dtoa_r+0x2dc>)
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80085a0 <_dtoa_r+0x2f0>
 800837a:	f000 bd40 	b.w	8008dfe <_dtoa_r+0xb4e>
 800837e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008382:	aa14      	add	r2, sp, #80	@ 0x50
 8008384:	a915      	add	r1, sp, #84	@ 0x54
 8008386:	4648      	mov	r0, r9
 8008388:	f001 f984 	bl	8009694 <__d2b>
 800838c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008390:	9002      	str	r0, [sp, #8]
 8008392:	2e00      	cmp	r6, #0
 8008394:	d078      	beq.n	8008488 <_dtoa_r+0x1d8>
 8008396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008398:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800839c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80083a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80083ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80083b0:	4619      	mov	r1, r3
 80083b2:	2200      	movs	r2, #0
 80083b4:	4b76      	ldr	r3, [pc, #472]	@ (8008590 <_dtoa_r+0x2e0>)
 80083b6:	f7f7 ff87 	bl	80002c8 <__aeabi_dsub>
 80083ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8008568 <_dtoa_r+0x2b8>)
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f7f8 f93a 	bl	8000638 <__aeabi_dmul>
 80083c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008570 <_dtoa_r+0x2c0>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f7 ff7f 	bl	80002cc <__adddf3>
 80083ce:	4604      	mov	r4, r0
 80083d0:	4630      	mov	r0, r6
 80083d2:	460d      	mov	r5, r1
 80083d4:	f7f8 f8c6 	bl	8000564 <__aeabi_i2d>
 80083d8:	a367      	add	r3, pc, #412	@ (adr r3, 8008578 <_dtoa_r+0x2c8>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f8 f92b 	bl	8000638 <__aeabi_dmul>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f7 ff6f 	bl	80002cc <__adddf3>
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	f7f8 fbd1 	bl	8000b98 <__aeabi_d2iz>
 80083f6:	2200      	movs	r2, #0
 80083f8:	4607      	mov	r7, r0
 80083fa:	2300      	movs	r3, #0
 80083fc:	4620      	mov	r0, r4
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f8 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 8008404:	b140      	cbz	r0, 8008418 <_dtoa_r+0x168>
 8008406:	4638      	mov	r0, r7
 8008408:	f7f8 f8ac 	bl	8000564 <__aeabi_i2d>
 800840c:	4622      	mov	r2, r4
 800840e:	462b      	mov	r3, r5
 8008410:	f7f8 fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 8008414:	b900      	cbnz	r0, 8008418 <_dtoa_r+0x168>
 8008416:	3f01      	subs	r7, #1
 8008418:	2f16      	cmp	r7, #22
 800841a:	d852      	bhi.n	80084c2 <_dtoa_r+0x212>
 800841c:	4b5d      	ldr	r3, [pc, #372]	@ (8008594 <_dtoa_r+0x2e4>)
 800841e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800842a:	f7f8 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d049      	beq.n	80084c6 <_dtoa_r+0x216>
 8008432:	3f01      	subs	r7, #1
 8008434:	2300      	movs	r3, #0
 8008436:	9310      	str	r3, [sp, #64]	@ 0x40
 8008438:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800843a:	1b9b      	subs	r3, r3, r6
 800843c:	1e5a      	subs	r2, r3, #1
 800843e:	bf45      	ittet	mi
 8008440:	f1c3 0301 	rsbmi	r3, r3, #1
 8008444:	9300      	strmi	r3, [sp, #0]
 8008446:	2300      	movpl	r3, #0
 8008448:	2300      	movmi	r3, #0
 800844a:	9206      	str	r2, [sp, #24]
 800844c:	bf54      	ite	pl
 800844e:	9300      	strpl	r3, [sp, #0]
 8008450:	9306      	strmi	r3, [sp, #24]
 8008452:	2f00      	cmp	r7, #0
 8008454:	db39      	blt.n	80084ca <_dtoa_r+0x21a>
 8008456:	9b06      	ldr	r3, [sp, #24]
 8008458:	970d      	str	r7, [sp, #52]	@ 0x34
 800845a:	443b      	add	r3, r7
 800845c:	9306      	str	r3, [sp, #24]
 800845e:	2300      	movs	r3, #0
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	9b07      	ldr	r3, [sp, #28]
 8008464:	2b09      	cmp	r3, #9
 8008466:	d863      	bhi.n	8008530 <_dtoa_r+0x280>
 8008468:	2b05      	cmp	r3, #5
 800846a:	bfc4      	itt	gt
 800846c:	3b04      	subgt	r3, #4
 800846e:	9307      	strgt	r3, [sp, #28]
 8008470:	9b07      	ldr	r3, [sp, #28]
 8008472:	f1a3 0302 	sub.w	r3, r3, #2
 8008476:	bfcc      	ite	gt
 8008478:	2400      	movgt	r4, #0
 800847a:	2401      	movle	r4, #1
 800847c:	2b03      	cmp	r3, #3
 800847e:	d863      	bhi.n	8008548 <_dtoa_r+0x298>
 8008480:	e8df f003 	tbb	[pc, r3]
 8008484:	2b375452 	.word	0x2b375452
 8008488:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800848c:	441e      	add	r6, r3
 800848e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008492:	2b20      	cmp	r3, #32
 8008494:	bfc1      	itttt	gt
 8008496:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800849a:	409f      	lslgt	r7, r3
 800849c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80084a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80084a4:	bfd6      	itet	le
 80084a6:	f1c3 0320 	rsble	r3, r3, #32
 80084aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80084ae:	fa04 f003 	lslle.w	r0, r4, r3
 80084b2:	f7f8 f847 	bl	8000544 <__aeabi_ui2d>
 80084b6:	2201      	movs	r2, #1
 80084b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80084bc:	3e01      	subs	r6, #1
 80084be:	9212      	str	r2, [sp, #72]	@ 0x48
 80084c0:	e776      	b.n	80083b0 <_dtoa_r+0x100>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e7b7      	b.n	8008436 <_dtoa_r+0x186>
 80084c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80084c8:	e7b6      	b.n	8008438 <_dtoa_r+0x188>
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	1bdb      	subs	r3, r3, r7
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	427b      	negs	r3, r7
 80084d2:	9308      	str	r3, [sp, #32]
 80084d4:	2300      	movs	r3, #0
 80084d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80084d8:	e7c3      	b.n	8008462 <_dtoa_r+0x1b2>
 80084da:	2301      	movs	r3, #1
 80084dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80084de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084e0:	eb07 0b03 	add.w	fp, r7, r3
 80084e4:	f10b 0301 	add.w	r3, fp, #1
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	bfb8      	it	lt
 80084ee:	2301      	movlt	r3, #1
 80084f0:	e006      	b.n	8008500 <_dtoa_r+0x250>
 80084f2:	2301      	movs	r3, #1
 80084f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dd28      	ble.n	800854e <_dtoa_r+0x29e>
 80084fc:	469b      	mov	fp, r3
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008504:	2100      	movs	r1, #0
 8008506:	2204      	movs	r2, #4
 8008508:	f102 0514 	add.w	r5, r2, #20
 800850c:	429d      	cmp	r5, r3
 800850e:	d926      	bls.n	800855e <_dtoa_r+0x2ae>
 8008510:	6041      	str	r1, [r0, #4]
 8008512:	4648      	mov	r0, r9
 8008514:	f000 fd9c 	bl	8009050 <_Balloc>
 8008518:	4682      	mov	sl, r0
 800851a:	2800      	cmp	r0, #0
 800851c:	d142      	bne.n	80085a4 <_dtoa_r+0x2f4>
 800851e:	4b1e      	ldr	r3, [pc, #120]	@ (8008598 <_dtoa_r+0x2e8>)
 8008520:	4602      	mov	r2, r0
 8008522:	f240 11af 	movw	r1, #431	@ 0x1af
 8008526:	e6da      	b.n	80082de <_dtoa_r+0x2e>
 8008528:	2300      	movs	r3, #0
 800852a:	e7e3      	b.n	80084f4 <_dtoa_r+0x244>
 800852c:	2300      	movs	r3, #0
 800852e:	e7d5      	b.n	80084dc <_dtoa_r+0x22c>
 8008530:	2401      	movs	r4, #1
 8008532:	2300      	movs	r3, #0
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	9409      	str	r4, [sp, #36]	@ 0x24
 8008538:	f04f 3bff 	mov.w	fp, #4294967295
 800853c:	2200      	movs	r2, #0
 800853e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008542:	2312      	movs	r3, #18
 8008544:	920c      	str	r2, [sp, #48]	@ 0x30
 8008546:	e7db      	b.n	8008500 <_dtoa_r+0x250>
 8008548:	2301      	movs	r3, #1
 800854a:	9309      	str	r3, [sp, #36]	@ 0x24
 800854c:	e7f4      	b.n	8008538 <_dtoa_r+0x288>
 800854e:	f04f 0b01 	mov.w	fp, #1
 8008552:	f8cd b00c 	str.w	fp, [sp, #12]
 8008556:	465b      	mov	r3, fp
 8008558:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800855c:	e7d0      	b.n	8008500 <_dtoa_r+0x250>
 800855e:	3101      	adds	r1, #1
 8008560:	0052      	lsls	r2, r2, #1
 8008562:	e7d1      	b.n	8008508 <_dtoa_r+0x258>
 8008564:	f3af 8000 	nop.w
 8008568:	636f4361 	.word	0x636f4361
 800856c:	3fd287a7 	.word	0x3fd287a7
 8008570:	8b60c8b3 	.word	0x8b60c8b3
 8008574:	3fc68a28 	.word	0x3fc68a28
 8008578:	509f79fb 	.word	0x509f79fb
 800857c:	3fd34413 	.word	0x3fd34413
 8008580:	0800a404 	.word	0x0800a404
 8008584:	0800a4f0 	.word	0x0800a4f0
 8008588:	7ff00000 	.word	0x7ff00000
 800858c:	0800a484 	.word	0x0800a484
 8008590:	3ff80000 	.word	0x3ff80000
 8008594:	0800a608 	.word	0x0800a608
 8008598:	0800a548 	.word	0x0800a548
 800859c:	0800a4ec 	.word	0x0800a4ec
 80085a0:	0800a483 	.word	0x0800a483
 80085a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085a8:	6018      	str	r0, [r3, #0]
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	2b0e      	cmp	r3, #14
 80085ae:	f200 80a1 	bhi.w	80086f4 <_dtoa_r+0x444>
 80085b2:	2c00      	cmp	r4, #0
 80085b4:	f000 809e 	beq.w	80086f4 <_dtoa_r+0x444>
 80085b8:	2f00      	cmp	r7, #0
 80085ba:	dd33      	ble.n	8008624 <_dtoa_r+0x374>
 80085bc:	4b9c      	ldr	r3, [pc, #624]	@ (8008830 <_dtoa_r+0x580>)
 80085be:	f007 020f 	and.w	r2, r7, #15
 80085c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085c6:	ed93 7b00 	vldr	d7, [r3]
 80085ca:	05f8      	lsls	r0, r7, #23
 80085cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80085d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80085d4:	d516      	bpl.n	8008604 <_dtoa_r+0x354>
 80085d6:	4b97      	ldr	r3, [pc, #604]	@ (8008834 <_dtoa_r+0x584>)
 80085d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085e0:	f7f8 f954 	bl	800088c <__aeabi_ddiv>
 80085e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085e8:	f004 040f 	and.w	r4, r4, #15
 80085ec:	2603      	movs	r6, #3
 80085ee:	4d91      	ldr	r5, [pc, #580]	@ (8008834 <_dtoa_r+0x584>)
 80085f0:	b954      	cbnz	r4, 8008608 <_dtoa_r+0x358>
 80085f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085fa:	f7f8 f947 	bl	800088c <__aeabi_ddiv>
 80085fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008602:	e028      	b.n	8008656 <_dtoa_r+0x3a6>
 8008604:	2602      	movs	r6, #2
 8008606:	e7f2      	b.n	80085ee <_dtoa_r+0x33e>
 8008608:	07e1      	lsls	r1, r4, #31
 800860a:	d508      	bpl.n	800861e <_dtoa_r+0x36e>
 800860c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008614:	f7f8 f810 	bl	8000638 <__aeabi_dmul>
 8008618:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800861c:	3601      	adds	r6, #1
 800861e:	1064      	asrs	r4, r4, #1
 8008620:	3508      	adds	r5, #8
 8008622:	e7e5      	b.n	80085f0 <_dtoa_r+0x340>
 8008624:	f000 80af 	beq.w	8008786 <_dtoa_r+0x4d6>
 8008628:	427c      	negs	r4, r7
 800862a:	4b81      	ldr	r3, [pc, #516]	@ (8008830 <_dtoa_r+0x580>)
 800862c:	4d81      	ldr	r5, [pc, #516]	@ (8008834 <_dtoa_r+0x584>)
 800862e:	f004 020f 	and.w	r2, r4, #15
 8008632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800863e:	f7f7 fffb 	bl	8000638 <__aeabi_dmul>
 8008642:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008646:	1124      	asrs	r4, r4, #4
 8008648:	2300      	movs	r3, #0
 800864a:	2602      	movs	r6, #2
 800864c:	2c00      	cmp	r4, #0
 800864e:	f040 808f 	bne.w	8008770 <_dtoa_r+0x4c0>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1d3      	bne.n	80085fe <_dtoa_r+0x34e>
 8008656:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008658:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8094 	beq.w	800878a <_dtoa_r+0x4da>
 8008662:	4b75      	ldr	r3, [pc, #468]	@ (8008838 <_dtoa_r+0x588>)
 8008664:	2200      	movs	r2, #0
 8008666:	4620      	mov	r0, r4
 8008668:	4629      	mov	r1, r5
 800866a:	f7f8 fa57 	bl	8000b1c <__aeabi_dcmplt>
 800866e:	2800      	cmp	r0, #0
 8008670:	f000 808b 	beq.w	800878a <_dtoa_r+0x4da>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 8087 	beq.w	800878a <_dtoa_r+0x4da>
 800867c:	f1bb 0f00 	cmp.w	fp, #0
 8008680:	dd34      	ble.n	80086ec <_dtoa_r+0x43c>
 8008682:	4620      	mov	r0, r4
 8008684:	4b6d      	ldr	r3, [pc, #436]	@ (800883c <_dtoa_r+0x58c>)
 8008686:	2200      	movs	r2, #0
 8008688:	4629      	mov	r1, r5
 800868a:	f7f7 ffd5 	bl	8000638 <__aeabi_dmul>
 800868e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008692:	f107 38ff 	add.w	r8, r7, #4294967295
 8008696:	3601      	adds	r6, #1
 8008698:	465c      	mov	r4, fp
 800869a:	4630      	mov	r0, r6
 800869c:	f7f7 ff62 	bl	8000564 <__aeabi_i2d>
 80086a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a4:	f7f7 ffc8 	bl	8000638 <__aeabi_dmul>
 80086a8:	4b65      	ldr	r3, [pc, #404]	@ (8008840 <_dtoa_r+0x590>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	f7f7 fe0e 	bl	80002cc <__adddf3>
 80086b0:	4605      	mov	r5, r0
 80086b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d16a      	bne.n	8008790 <_dtoa_r+0x4e0>
 80086ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086be:	4b61      	ldr	r3, [pc, #388]	@ (8008844 <_dtoa_r+0x594>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	f7f7 fe01 	bl	80002c8 <__aeabi_dsub>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086ce:	462a      	mov	r2, r5
 80086d0:	4633      	mov	r3, r6
 80086d2:	f7f8 fa41 	bl	8000b58 <__aeabi_dcmpgt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f040 8298 	bne.w	8008c0c <_dtoa_r+0x95c>
 80086dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e0:	462a      	mov	r2, r5
 80086e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80086e6:	f7f8 fa19 	bl	8000b1c <__aeabi_dcmplt>
 80086ea:	bb38      	cbnz	r0, 800873c <_dtoa_r+0x48c>
 80086ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80086f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f2c0 8157 	blt.w	80089aa <_dtoa_r+0x6fa>
 80086fc:	2f0e      	cmp	r7, #14
 80086fe:	f300 8154 	bgt.w	80089aa <_dtoa_r+0x6fa>
 8008702:	4b4b      	ldr	r3, [pc, #300]	@ (8008830 <_dtoa_r+0x580>)
 8008704:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008708:	ed93 7b00 	vldr	d7, [r3]
 800870c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800870e:	2b00      	cmp	r3, #0
 8008710:	ed8d 7b00 	vstr	d7, [sp]
 8008714:	f280 80e5 	bge.w	80088e2 <_dtoa_r+0x632>
 8008718:	9b03      	ldr	r3, [sp, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f300 80e1 	bgt.w	80088e2 <_dtoa_r+0x632>
 8008720:	d10c      	bne.n	800873c <_dtoa_r+0x48c>
 8008722:	4b48      	ldr	r3, [pc, #288]	@ (8008844 <_dtoa_r+0x594>)
 8008724:	2200      	movs	r2, #0
 8008726:	ec51 0b17 	vmov	r0, r1, d7
 800872a:	f7f7 ff85 	bl	8000638 <__aeabi_dmul>
 800872e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008732:	f7f8 fa07 	bl	8000b44 <__aeabi_dcmpge>
 8008736:	2800      	cmp	r0, #0
 8008738:	f000 8266 	beq.w	8008c08 <_dtoa_r+0x958>
 800873c:	2400      	movs	r4, #0
 800873e:	4625      	mov	r5, r4
 8008740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008742:	4656      	mov	r6, sl
 8008744:	ea6f 0803 	mvn.w	r8, r3
 8008748:	2700      	movs	r7, #0
 800874a:	4621      	mov	r1, r4
 800874c:	4648      	mov	r0, r9
 800874e:	f000 fcbf 	bl	80090d0 <_Bfree>
 8008752:	2d00      	cmp	r5, #0
 8008754:	f000 80bd 	beq.w	80088d2 <_dtoa_r+0x622>
 8008758:	b12f      	cbz	r7, 8008766 <_dtoa_r+0x4b6>
 800875a:	42af      	cmp	r7, r5
 800875c:	d003      	beq.n	8008766 <_dtoa_r+0x4b6>
 800875e:	4639      	mov	r1, r7
 8008760:	4648      	mov	r0, r9
 8008762:	f000 fcb5 	bl	80090d0 <_Bfree>
 8008766:	4629      	mov	r1, r5
 8008768:	4648      	mov	r0, r9
 800876a:	f000 fcb1 	bl	80090d0 <_Bfree>
 800876e:	e0b0      	b.n	80088d2 <_dtoa_r+0x622>
 8008770:	07e2      	lsls	r2, r4, #31
 8008772:	d505      	bpl.n	8008780 <_dtoa_r+0x4d0>
 8008774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008778:	f7f7 ff5e 	bl	8000638 <__aeabi_dmul>
 800877c:	3601      	adds	r6, #1
 800877e:	2301      	movs	r3, #1
 8008780:	1064      	asrs	r4, r4, #1
 8008782:	3508      	adds	r5, #8
 8008784:	e762      	b.n	800864c <_dtoa_r+0x39c>
 8008786:	2602      	movs	r6, #2
 8008788:	e765      	b.n	8008656 <_dtoa_r+0x3a6>
 800878a:	9c03      	ldr	r4, [sp, #12]
 800878c:	46b8      	mov	r8, r7
 800878e:	e784      	b.n	800869a <_dtoa_r+0x3ea>
 8008790:	4b27      	ldr	r3, [pc, #156]	@ (8008830 <_dtoa_r+0x580>)
 8008792:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008794:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800879c:	4454      	add	r4, sl
 800879e:	2900      	cmp	r1, #0
 80087a0:	d054      	beq.n	800884c <_dtoa_r+0x59c>
 80087a2:	4929      	ldr	r1, [pc, #164]	@ (8008848 <_dtoa_r+0x598>)
 80087a4:	2000      	movs	r0, #0
 80087a6:	f7f8 f871 	bl	800088c <__aeabi_ddiv>
 80087aa:	4633      	mov	r3, r6
 80087ac:	462a      	mov	r2, r5
 80087ae:	f7f7 fd8b 	bl	80002c8 <__aeabi_dsub>
 80087b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80087b6:	4656      	mov	r6, sl
 80087b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087bc:	f7f8 f9ec 	bl	8000b98 <__aeabi_d2iz>
 80087c0:	4605      	mov	r5, r0
 80087c2:	f7f7 fecf 	bl	8000564 <__aeabi_i2d>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ce:	f7f7 fd7b 	bl	80002c8 <__aeabi_dsub>
 80087d2:	3530      	adds	r5, #48	@ 0x30
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087dc:	f806 5b01 	strb.w	r5, [r6], #1
 80087e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087e4:	f7f8 f99a 	bl	8000b1c <__aeabi_dcmplt>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d172      	bne.n	80088d2 <_dtoa_r+0x622>
 80087ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f0:	4911      	ldr	r1, [pc, #68]	@ (8008838 <_dtoa_r+0x588>)
 80087f2:	2000      	movs	r0, #0
 80087f4:	f7f7 fd68 	bl	80002c8 <__aeabi_dsub>
 80087f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087fc:	f7f8 f98e 	bl	8000b1c <__aeabi_dcmplt>
 8008800:	2800      	cmp	r0, #0
 8008802:	f040 80b4 	bne.w	800896e <_dtoa_r+0x6be>
 8008806:	42a6      	cmp	r6, r4
 8008808:	f43f af70 	beq.w	80086ec <_dtoa_r+0x43c>
 800880c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008810:	4b0a      	ldr	r3, [pc, #40]	@ (800883c <_dtoa_r+0x58c>)
 8008812:	2200      	movs	r2, #0
 8008814:	f7f7 ff10 	bl	8000638 <__aeabi_dmul>
 8008818:	4b08      	ldr	r3, [pc, #32]	@ (800883c <_dtoa_r+0x58c>)
 800881a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800881e:	2200      	movs	r2, #0
 8008820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008824:	f7f7 ff08 	bl	8000638 <__aeabi_dmul>
 8008828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800882c:	e7c4      	b.n	80087b8 <_dtoa_r+0x508>
 800882e:	bf00      	nop
 8008830:	0800a608 	.word	0x0800a608
 8008834:	0800a5e0 	.word	0x0800a5e0
 8008838:	3ff00000 	.word	0x3ff00000
 800883c:	40240000 	.word	0x40240000
 8008840:	401c0000 	.word	0x401c0000
 8008844:	40140000 	.word	0x40140000
 8008848:	3fe00000 	.word	0x3fe00000
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	f7f7 fef2 	bl	8000638 <__aeabi_dmul>
 8008854:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008858:	9413      	str	r4, [sp, #76]	@ 0x4c
 800885a:	4656      	mov	r6, sl
 800885c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008860:	f7f8 f99a 	bl	8000b98 <__aeabi_d2iz>
 8008864:	4605      	mov	r5, r0
 8008866:	f7f7 fe7d 	bl	8000564 <__aeabi_i2d>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008872:	f7f7 fd29 	bl	80002c8 <__aeabi_dsub>
 8008876:	3530      	adds	r5, #48	@ 0x30
 8008878:	f806 5b01 	strb.w	r5, [r6], #1
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	42a6      	cmp	r6, r4
 8008882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	d124      	bne.n	80088d6 <_dtoa_r+0x626>
 800888c:	4baf      	ldr	r3, [pc, #700]	@ (8008b4c <_dtoa_r+0x89c>)
 800888e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008892:	f7f7 fd1b 	bl	80002cc <__adddf3>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800889e:	f7f8 f95b 	bl	8000b58 <__aeabi_dcmpgt>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d163      	bne.n	800896e <_dtoa_r+0x6be>
 80088a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088aa:	49a8      	ldr	r1, [pc, #672]	@ (8008b4c <_dtoa_r+0x89c>)
 80088ac:	2000      	movs	r0, #0
 80088ae:	f7f7 fd0b 	bl	80002c8 <__aeabi_dsub>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ba:	f7f8 f92f 	bl	8000b1c <__aeabi_dcmplt>
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f af14 	beq.w	80086ec <_dtoa_r+0x43c>
 80088c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80088c6:	1e73      	subs	r3, r6, #1
 80088c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088ce:	2b30      	cmp	r3, #48	@ 0x30
 80088d0:	d0f8      	beq.n	80088c4 <_dtoa_r+0x614>
 80088d2:	4647      	mov	r7, r8
 80088d4:	e03b      	b.n	800894e <_dtoa_r+0x69e>
 80088d6:	4b9e      	ldr	r3, [pc, #632]	@ (8008b50 <_dtoa_r+0x8a0>)
 80088d8:	f7f7 feae 	bl	8000638 <__aeabi_dmul>
 80088dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e0:	e7bc      	b.n	800885c <_dtoa_r+0x5ac>
 80088e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80088e6:	4656      	mov	r6, sl
 80088e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ec:	4620      	mov	r0, r4
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7f7 ffcc 	bl	800088c <__aeabi_ddiv>
 80088f4:	f7f8 f950 	bl	8000b98 <__aeabi_d2iz>
 80088f8:	4680      	mov	r8, r0
 80088fa:	f7f7 fe33 	bl	8000564 <__aeabi_i2d>
 80088fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008902:	f7f7 fe99 	bl	8000638 <__aeabi_dmul>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4620      	mov	r0, r4
 800890c:	4629      	mov	r1, r5
 800890e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008912:	f7f7 fcd9 	bl	80002c8 <__aeabi_dsub>
 8008916:	f806 4b01 	strb.w	r4, [r6], #1
 800891a:	9d03      	ldr	r5, [sp, #12]
 800891c:	eba6 040a 	sub.w	r4, r6, sl
 8008920:	42a5      	cmp	r5, r4
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	d133      	bne.n	8008990 <_dtoa_r+0x6e0>
 8008928:	f7f7 fcd0 	bl	80002cc <__adddf3>
 800892c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	f7f8 f910 	bl	8000b58 <__aeabi_dcmpgt>
 8008938:	b9c0      	cbnz	r0, 800896c <_dtoa_r+0x6bc>
 800893a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800893e:	4620      	mov	r0, r4
 8008940:	4629      	mov	r1, r5
 8008942:	f7f8 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 8008946:	b110      	cbz	r0, 800894e <_dtoa_r+0x69e>
 8008948:	f018 0f01 	tst.w	r8, #1
 800894c:	d10e      	bne.n	800896c <_dtoa_r+0x6bc>
 800894e:	9902      	ldr	r1, [sp, #8]
 8008950:	4648      	mov	r0, r9
 8008952:	f000 fbbd 	bl	80090d0 <_Bfree>
 8008956:	2300      	movs	r3, #0
 8008958:	7033      	strb	r3, [r6, #0]
 800895a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800895c:	3701      	adds	r7, #1
 800895e:	601f      	str	r7, [r3, #0]
 8008960:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 824b 	beq.w	8008dfe <_dtoa_r+0xb4e>
 8008968:	601e      	str	r6, [r3, #0]
 800896a:	e248      	b.n	8008dfe <_dtoa_r+0xb4e>
 800896c:	46b8      	mov	r8, r7
 800896e:	4633      	mov	r3, r6
 8008970:	461e      	mov	r6, r3
 8008972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008976:	2a39      	cmp	r2, #57	@ 0x39
 8008978:	d106      	bne.n	8008988 <_dtoa_r+0x6d8>
 800897a:	459a      	cmp	sl, r3
 800897c:	d1f8      	bne.n	8008970 <_dtoa_r+0x6c0>
 800897e:	2230      	movs	r2, #48	@ 0x30
 8008980:	f108 0801 	add.w	r8, r8, #1
 8008984:	f88a 2000 	strb.w	r2, [sl]
 8008988:	781a      	ldrb	r2, [r3, #0]
 800898a:	3201      	adds	r2, #1
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e7a0      	b.n	80088d2 <_dtoa_r+0x622>
 8008990:	4b6f      	ldr	r3, [pc, #444]	@ (8008b50 <_dtoa_r+0x8a0>)
 8008992:	2200      	movs	r2, #0
 8008994:	f7f7 fe50 	bl	8000638 <__aeabi_dmul>
 8008998:	2200      	movs	r2, #0
 800899a:	2300      	movs	r3, #0
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	f7f8 f8b2 	bl	8000b08 <__aeabi_dcmpeq>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d09f      	beq.n	80088e8 <_dtoa_r+0x638>
 80089a8:	e7d1      	b.n	800894e <_dtoa_r+0x69e>
 80089aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	f000 80ea 	beq.w	8008b86 <_dtoa_r+0x8d6>
 80089b2:	9a07      	ldr	r2, [sp, #28]
 80089b4:	2a01      	cmp	r2, #1
 80089b6:	f300 80cd 	bgt.w	8008b54 <_dtoa_r+0x8a4>
 80089ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80089bc:	2a00      	cmp	r2, #0
 80089be:	f000 80c1 	beq.w	8008b44 <_dtoa_r+0x894>
 80089c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80089c6:	9c08      	ldr	r4, [sp, #32]
 80089c8:	9e00      	ldr	r6, [sp, #0]
 80089ca:	9a00      	ldr	r2, [sp, #0]
 80089cc:	441a      	add	r2, r3
 80089ce:	9200      	str	r2, [sp, #0]
 80089d0:	9a06      	ldr	r2, [sp, #24]
 80089d2:	2101      	movs	r1, #1
 80089d4:	441a      	add	r2, r3
 80089d6:	4648      	mov	r0, r9
 80089d8:	9206      	str	r2, [sp, #24]
 80089da:	f000 fc2d 	bl	8009238 <__i2b>
 80089de:	4605      	mov	r5, r0
 80089e0:	b166      	cbz	r6, 80089fc <_dtoa_r+0x74c>
 80089e2:	9b06      	ldr	r3, [sp, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	dd09      	ble.n	80089fc <_dtoa_r+0x74c>
 80089e8:	42b3      	cmp	r3, r6
 80089ea:	9a00      	ldr	r2, [sp, #0]
 80089ec:	bfa8      	it	ge
 80089ee:	4633      	movge	r3, r6
 80089f0:	1ad2      	subs	r2, r2, r3
 80089f2:	9200      	str	r2, [sp, #0]
 80089f4:	9a06      	ldr	r2, [sp, #24]
 80089f6:	1af6      	subs	r6, r6, r3
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	9306      	str	r3, [sp, #24]
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	b30b      	cbz	r3, 8008a44 <_dtoa_r+0x794>
 8008a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80c6 	beq.w	8008b94 <_dtoa_r+0x8e4>
 8008a08:	2c00      	cmp	r4, #0
 8008a0a:	f000 80c0 	beq.w	8008b8e <_dtoa_r+0x8de>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4622      	mov	r2, r4
 8008a12:	4648      	mov	r0, r9
 8008a14:	f000 fcc8 	bl	80093a8 <__pow5mult>
 8008a18:	9a02      	ldr	r2, [sp, #8]
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	4648      	mov	r0, r9
 8008a20:	f000 fc20 	bl	8009264 <__multiply>
 8008a24:	9902      	ldr	r1, [sp, #8]
 8008a26:	4680      	mov	r8, r0
 8008a28:	4648      	mov	r0, r9
 8008a2a:	f000 fb51 	bl	80090d0 <_Bfree>
 8008a2e:	9b08      	ldr	r3, [sp, #32]
 8008a30:	1b1b      	subs	r3, r3, r4
 8008a32:	9308      	str	r3, [sp, #32]
 8008a34:	f000 80b1 	beq.w	8008b9a <_dtoa_r+0x8ea>
 8008a38:	9a08      	ldr	r2, [sp, #32]
 8008a3a:	4641      	mov	r1, r8
 8008a3c:	4648      	mov	r0, r9
 8008a3e:	f000 fcb3 	bl	80093a8 <__pow5mult>
 8008a42:	9002      	str	r0, [sp, #8]
 8008a44:	2101      	movs	r1, #1
 8008a46:	4648      	mov	r0, r9
 8008a48:	f000 fbf6 	bl	8009238 <__i2b>
 8008a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a4e:	4604      	mov	r4, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 81d8 	beq.w	8008e06 <_dtoa_r+0xb56>
 8008a56:	461a      	mov	r2, r3
 8008a58:	4601      	mov	r1, r0
 8008a5a:	4648      	mov	r0, r9
 8008a5c:	f000 fca4 	bl	80093a8 <__pow5mult>
 8008a60:	9b07      	ldr	r3, [sp, #28]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	4604      	mov	r4, r0
 8008a66:	f300 809f 	bgt.w	8008ba8 <_dtoa_r+0x8f8>
 8008a6a:	9b04      	ldr	r3, [sp, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f040 8097 	bne.w	8008ba0 <_dtoa_r+0x8f0>
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f040 8093 	bne.w	8008ba4 <_dtoa_r+0x8f4>
 8008a7e:	9b05      	ldr	r3, [sp, #20]
 8008a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a84:	0d1b      	lsrs	r3, r3, #20
 8008a86:	051b      	lsls	r3, r3, #20
 8008a88:	b133      	cbz	r3, 8008a98 <_dtoa_r+0x7e8>
 8008a8a:	9b00      	ldr	r3, [sp, #0]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	3301      	adds	r3, #1
 8008a94:	9306      	str	r3, [sp, #24]
 8008a96:	2301      	movs	r3, #1
 8008a98:	9308      	str	r3, [sp, #32]
 8008a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 81b8 	beq.w	8008e12 <_dtoa_r+0xb62>
 8008aa2:	6923      	ldr	r3, [r4, #16]
 8008aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008aa8:	6918      	ldr	r0, [r3, #16]
 8008aaa:	f000 fb79 	bl	80091a0 <__hi0bits>
 8008aae:	f1c0 0020 	rsb	r0, r0, #32
 8008ab2:	9b06      	ldr	r3, [sp, #24]
 8008ab4:	4418      	add	r0, r3
 8008ab6:	f010 001f 	ands.w	r0, r0, #31
 8008aba:	f000 8082 	beq.w	8008bc2 <_dtoa_r+0x912>
 8008abe:	f1c0 0320 	rsb	r3, r0, #32
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	dd73      	ble.n	8008bae <_dtoa_r+0x8fe>
 8008ac6:	9b00      	ldr	r3, [sp, #0]
 8008ac8:	f1c0 001c 	rsb	r0, r0, #28
 8008acc:	4403      	add	r3, r0
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	9b06      	ldr	r3, [sp, #24]
 8008ad2:	4403      	add	r3, r0
 8008ad4:	4406      	add	r6, r0
 8008ad6:	9306      	str	r3, [sp, #24]
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dd05      	ble.n	8008aea <_dtoa_r+0x83a>
 8008ade:	9902      	ldr	r1, [sp, #8]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4648      	mov	r0, r9
 8008ae4:	f000 fcba 	bl	800945c <__lshift>
 8008ae8:	9002      	str	r0, [sp, #8]
 8008aea:	9b06      	ldr	r3, [sp, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dd05      	ble.n	8008afc <_dtoa_r+0x84c>
 8008af0:	4621      	mov	r1, r4
 8008af2:	461a      	mov	r2, r3
 8008af4:	4648      	mov	r0, r9
 8008af6:	f000 fcb1 	bl	800945c <__lshift>
 8008afa:	4604      	mov	r4, r0
 8008afc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d061      	beq.n	8008bc6 <_dtoa_r+0x916>
 8008b02:	9802      	ldr	r0, [sp, #8]
 8008b04:	4621      	mov	r1, r4
 8008b06:	f000 fd15 	bl	8009534 <__mcmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	da5b      	bge.n	8008bc6 <_dtoa_r+0x916>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9902      	ldr	r1, [sp, #8]
 8008b12:	220a      	movs	r2, #10
 8008b14:	4648      	mov	r0, r9
 8008b16:	f000 fafd 	bl	8009114 <__multadd>
 8008b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1c:	9002      	str	r0, [sp, #8]
 8008b1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 8177 	beq.w	8008e16 <_dtoa_r+0xb66>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	220a      	movs	r2, #10
 8008b2e:	4648      	mov	r0, r9
 8008b30:	f000 faf0 	bl	8009114 <__multadd>
 8008b34:	f1bb 0f00 	cmp.w	fp, #0
 8008b38:	4605      	mov	r5, r0
 8008b3a:	dc6f      	bgt.n	8008c1c <_dtoa_r+0x96c>
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	dc49      	bgt.n	8008bd6 <_dtoa_r+0x926>
 8008b42:	e06b      	b.n	8008c1c <_dtoa_r+0x96c>
 8008b44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b4a:	e73c      	b.n	80089c6 <_dtoa_r+0x716>
 8008b4c:	3fe00000 	.word	0x3fe00000
 8008b50:	40240000 	.word	0x40240000
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	1e5c      	subs	r4, r3, #1
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	db09      	blt.n	8008b72 <_dtoa_r+0x8c2>
 8008b5e:	1b1c      	subs	r4, r3, r4
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f6bf af30 	bge.w	80089c8 <_dtoa_r+0x718>
 8008b68:	9b00      	ldr	r3, [sp, #0]
 8008b6a:	9a03      	ldr	r2, [sp, #12]
 8008b6c:	1a9e      	subs	r6, r3, r2
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e72b      	b.n	80089ca <_dtoa_r+0x71a>
 8008b72:	9b08      	ldr	r3, [sp, #32]
 8008b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b76:	9408      	str	r4, [sp, #32]
 8008b78:	1ae3      	subs	r3, r4, r3
 8008b7a:	441a      	add	r2, r3
 8008b7c:	9e00      	ldr	r6, [sp, #0]
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	920d      	str	r2, [sp, #52]	@ 0x34
 8008b82:	2400      	movs	r4, #0
 8008b84:	e721      	b.n	80089ca <_dtoa_r+0x71a>
 8008b86:	9c08      	ldr	r4, [sp, #32]
 8008b88:	9e00      	ldr	r6, [sp, #0]
 8008b8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008b8c:	e728      	b.n	80089e0 <_dtoa_r+0x730>
 8008b8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008b92:	e751      	b.n	8008a38 <_dtoa_r+0x788>
 8008b94:	9a08      	ldr	r2, [sp, #32]
 8008b96:	9902      	ldr	r1, [sp, #8]
 8008b98:	e750      	b.n	8008a3c <_dtoa_r+0x78c>
 8008b9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008b9e:	e751      	b.n	8008a44 <_dtoa_r+0x794>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e779      	b.n	8008a98 <_dtoa_r+0x7e8>
 8008ba4:	9b04      	ldr	r3, [sp, #16]
 8008ba6:	e777      	b.n	8008a98 <_dtoa_r+0x7e8>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9308      	str	r3, [sp, #32]
 8008bac:	e779      	b.n	8008aa2 <_dtoa_r+0x7f2>
 8008bae:	d093      	beq.n	8008ad8 <_dtoa_r+0x828>
 8008bb0:	9a00      	ldr	r2, [sp, #0]
 8008bb2:	331c      	adds	r3, #28
 8008bb4:	441a      	add	r2, r3
 8008bb6:	9200      	str	r2, [sp, #0]
 8008bb8:	9a06      	ldr	r2, [sp, #24]
 8008bba:	441a      	add	r2, r3
 8008bbc:	441e      	add	r6, r3
 8008bbe:	9206      	str	r2, [sp, #24]
 8008bc0:	e78a      	b.n	8008ad8 <_dtoa_r+0x828>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	e7f4      	b.n	8008bb0 <_dtoa_r+0x900>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	46b8      	mov	r8, r7
 8008bcc:	dc20      	bgt.n	8008c10 <_dtoa_r+0x960>
 8008bce:	469b      	mov	fp, r3
 8008bd0:	9b07      	ldr	r3, [sp, #28]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	dd1e      	ble.n	8008c14 <_dtoa_r+0x964>
 8008bd6:	f1bb 0f00 	cmp.w	fp, #0
 8008bda:	f47f adb1 	bne.w	8008740 <_dtoa_r+0x490>
 8008bde:	4621      	mov	r1, r4
 8008be0:	465b      	mov	r3, fp
 8008be2:	2205      	movs	r2, #5
 8008be4:	4648      	mov	r0, r9
 8008be6:	f000 fa95 	bl	8009114 <__multadd>
 8008bea:	4601      	mov	r1, r0
 8008bec:	4604      	mov	r4, r0
 8008bee:	9802      	ldr	r0, [sp, #8]
 8008bf0:	f000 fca0 	bl	8009534 <__mcmp>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f77f ada3 	ble.w	8008740 <_dtoa_r+0x490>
 8008bfa:	4656      	mov	r6, sl
 8008bfc:	2331      	movs	r3, #49	@ 0x31
 8008bfe:	f806 3b01 	strb.w	r3, [r6], #1
 8008c02:	f108 0801 	add.w	r8, r8, #1
 8008c06:	e59f      	b.n	8008748 <_dtoa_r+0x498>
 8008c08:	9c03      	ldr	r4, [sp, #12]
 8008c0a:	46b8      	mov	r8, r7
 8008c0c:	4625      	mov	r5, r4
 8008c0e:	e7f4      	b.n	8008bfa <_dtoa_r+0x94a>
 8008c10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 8101 	beq.w	8008e1e <_dtoa_r+0xb6e>
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	dd05      	ble.n	8008c2c <_dtoa_r+0x97c>
 8008c20:	4629      	mov	r1, r5
 8008c22:	4632      	mov	r2, r6
 8008c24:	4648      	mov	r0, r9
 8008c26:	f000 fc19 	bl	800945c <__lshift>
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d05c      	beq.n	8008cec <_dtoa_r+0xa3c>
 8008c32:	6869      	ldr	r1, [r5, #4]
 8008c34:	4648      	mov	r0, r9
 8008c36:	f000 fa0b 	bl	8009050 <_Balloc>
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	b928      	cbnz	r0, 8008c4a <_dtoa_r+0x99a>
 8008c3e:	4b82      	ldr	r3, [pc, #520]	@ (8008e48 <_dtoa_r+0xb98>)
 8008c40:	4602      	mov	r2, r0
 8008c42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c46:	f7ff bb4a 	b.w	80082de <_dtoa_r+0x2e>
 8008c4a:	692a      	ldr	r2, [r5, #16]
 8008c4c:	3202      	adds	r2, #2
 8008c4e:	0092      	lsls	r2, r2, #2
 8008c50:	f105 010c 	add.w	r1, r5, #12
 8008c54:	300c      	adds	r0, #12
 8008c56:	f7ff fa74 	bl	8008142 <memcpy>
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4648      	mov	r0, r9
 8008c60:	f000 fbfc 	bl	800945c <__lshift>
 8008c64:	f10a 0301 	add.w	r3, sl, #1
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	eb0a 030b 	add.w	r3, sl, fp
 8008c6e:	9308      	str	r3, [sp, #32]
 8008c70:	9b04      	ldr	r3, [sp, #16]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	462f      	mov	r7, r5
 8008c78:	9306      	str	r3, [sp, #24]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	9b00      	ldr	r3, [sp, #0]
 8008c7e:	9802      	ldr	r0, [sp, #8]
 8008c80:	4621      	mov	r1, r4
 8008c82:	f103 3bff 	add.w	fp, r3, #4294967295
 8008c86:	f7ff fa89 	bl	800819c <quorem>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	3330      	adds	r3, #48	@ 0x30
 8008c8e:	9003      	str	r0, [sp, #12]
 8008c90:	4639      	mov	r1, r7
 8008c92:	9802      	ldr	r0, [sp, #8]
 8008c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c96:	f000 fc4d 	bl	8009534 <__mcmp>
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	9004      	str	r0, [sp, #16]
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4648      	mov	r0, r9
 8008ca2:	f000 fc63 	bl	800956c <__mdiff>
 8008ca6:	68c2      	ldr	r2, [r0, #12]
 8008ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008caa:	4606      	mov	r6, r0
 8008cac:	bb02      	cbnz	r2, 8008cf0 <_dtoa_r+0xa40>
 8008cae:	4601      	mov	r1, r0
 8008cb0:	9802      	ldr	r0, [sp, #8]
 8008cb2:	f000 fc3f 	bl	8009534 <__mcmp>
 8008cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb8:	4602      	mov	r2, r0
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4648      	mov	r0, r9
 8008cbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc2:	f000 fa05 	bl	80090d0 <_Bfree>
 8008cc6:	9b07      	ldr	r3, [sp, #28]
 8008cc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008cca:	9e00      	ldr	r6, [sp, #0]
 8008ccc:	ea42 0103 	orr.w	r1, r2, r3
 8008cd0:	9b06      	ldr	r3, [sp, #24]
 8008cd2:	4319      	orrs	r1, r3
 8008cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd6:	d10d      	bne.n	8008cf4 <_dtoa_r+0xa44>
 8008cd8:	2b39      	cmp	r3, #57	@ 0x39
 8008cda:	d027      	beq.n	8008d2c <_dtoa_r+0xa7c>
 8008cdc:	9a04      	ldr	r2, [sp, #16]
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	dd01      	ble.n	8008ce6 <_dtoa_r+0xa36>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	3331      	adds	r3, #49	@ 0x31
 8008ce6:	f88b 3000 	strb.w	r3, [fp]
 8008cea:	e52e      	b.n	800874a <_dtoa_r+0x49a>
 8008cec:	4628      	mov	r0, r5
 8008cee:	e7b9      	b.n	8008c64 <_dtoa_r+0x9b4>
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	e7e2      	b.n	8008cba <_dtoa_r+0xa0a>
 8008cf4:	9904      	ldr	r1, [sp, #16]
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	db04      	blt.n	8008d04 <_dtoa_r+0xa54>
 8008cfa:	9807      	ldr	r0, [sp, #28]
 8008cfc:	4301      	orrs	r1, r0
 8008cfe:	9806      	ldr	r0, [sp, #24]
 8008d00:	4301      	orrs	r1, r0
 8008d02:	d120      	bne.n	8008d46 <_dtoa_r+0xa96>
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	ddee      	ble.n	8008ce6 <_dtoa_r+0xa36>
 8008d08:	9902      	ldr	r1, [sp, #8]
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	4648      	mov	r0, r9
 8008d10:	f000 fba4 	bl	800945c <__lshift>
 8008d14:	4621      	mov	r1, r4
 8008d16:	9002      	str	r0, [sp, #8]
 8008d18:	f000 fc0c 	bl	8009534 <__mcmp>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	dc02      	bgt.n	8008d28 <_dtoa_r+0xa78>
 8008d22:	d1e0      	bne.n	8008ce6 <_dtoa_r+0xa36>
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	d5de      	bpl.n	8008ce6 <_dtoa_r+0xa36>
 8008d28:	2b39      	cmp	r3, #57	@ 0x39
 8008d2a:	d1da      	bne.n	8008ce2 <_dtoa_r+0xa32>
 8008d2c:	2339      	movs	r3, #57	@ 0x39
 8008d2e:	f88b 3000 	strb.w	r3, [fp]
 8008d32:	4633      	mov	r3, r6
 8008d34:	461e      	mov	r6, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d3c:	2a39      	cmp	r2, #57	@ 0x39
 8008d3e:	d04e      	beq.n	8008dde <_dtoa_r+0xb2e>
 8008d40:	3201      	adds	r2, #1
 8008d42:	701a      	strb	r2, [r3, #0]
 8008d44:	e501      	b.n	800874a <_dtoa_r+0x49a>
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	dd03      	ble.n	8008d52 <_dtoa_r+0xaa2>
 8008d4a:	2b39      	cmp	r3, #57	@ 0x39
 8008d4c:	d0ee      	beq.n	8008d2c <_dtoa_r+0xa7c>
 8008d4e:	3301      	adds	r3, #1
 8008d50:	e7c9      	b.n	8008ce6 <_dtoa_r+0xa36>
 8008d52:	9a00      	ldr	r2, [sp, #0]
 8008d54:	9908      	ldr	r1, [sp, #32]
 8008d56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d5a:	428a      	cmp	r2, r1
 8008d5c:	d028      	beq.n	8008db0 <_dtoa_r+0xb00>
 8008d5e:	9902      	ldr	r1, [sp, #8]
 8008d60:	2300      	movs	r3, #0
 8008d62:	220a      	movs	r2, #10
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 f9d5 	bl	8009114 <__multadd>
 8008d6a:	42af      	cmp	r7, r5
 8008d6c:	9002      	str	r0, [sp, #8]
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	f04f 020a 	mov.w	r2, #10
 8008d76:	4639      	mov	r1, r7
 8008d78:	4648      	mov	r0, r9
 8008d7a:	d107      	bne.n	8008d8c <_dtoa_r+0xadc>
 8008d7c:	f000 f9ca 	bl	8009114 <__multadd>
 8008d80:	4607      	mov	r7, r0
 8008d82:	4605      	mov	r5, r0
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	3301      	adds	r3, #1
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	e777      	b.n	8008c7c <_dtoa_r+0x9cc>
 8008d8c:	f000 f9c2 	bl	8009114 <__multadd>
 8008d90:	4629      	mov	r1, r5
 8008d92:	4607      	mov	r7, r0
 8008d94:	2300      	movs	r3, #0
 8008d96:	220a      	movs	r2, #10
 8008d98:	4648      	mov	r0, r9
 8008d9a:	f000 f9bb 	bl	8009114 <__multadd>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	e7f0      	b.n	8008d84 <_dtoa_r+0xad4>
 8008da2:	f1bb 0f00 	cmp.w	fp, #0
 8008da6:	bfcc      	ite	gt
 8008da8:	465e      	movgt	r6, fp
 8008daa:	2601      	movle	r6, #1
 8008dac:	4456      	add	r6, sl
 8008dae:	2700      	movs	r7, #0
 8008db0:	9902      	ldr	r1, [sp, #8]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	2201      	movs	r2, #1
 8008db6:	4648      	mov	r0, r9
 8008db8:	f000 fb50 	bl	800945c <__lshift>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	9002      	str	r0, [sp, #8]
 8008dc0:	f000 fbb8 	bl	8009534 <__mcmp>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	dcb4      	bgt.n	8008d32 <_dtoa_r+0xa82>
 8008dc8:	d102      	bne.n	8008dd0 <_dtoa_r+0xb20>
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	07db      	lsls	r3, r3, #31
 8008dce:	d4b0      	bmi.n	8008d32 <_dtoa_r+0xa82>
 8008dd0:	4633      	mov	r3, r6
 8008dd2:	461e      	mov	r6, r3
 8008dd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dd8:	2a30      	cmp	r2, #48	@ 0x30
 8008dda:	d0fa      	beq.n	8008dd2 <_dtoa_r+0xb22>
 8008ddc:	e4b5      	b.n	800874a <_dtoa_r+0x49a>
 8008dde:	459a      	cmp	sl, r3
 8008de0:	d1a8      	bne.n	8008d34 <_dtoa_r+0xa84>
 8008de2:	2331      	movs	r3, #49	@ 0x31
 8008de4:	f108 0801 	add.w	r8, r8, #1
 8008de8:	f88a 3000 	strb.w	r3, [sl]
 8008dec:	e4ad      	b.n	800874a <_dtoa_r+0x49a>
 8008dee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008df0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008e4c <_dtoa_r+0xb9c>
 8008df4:	b11b      	cbz	r3, 8008dfe <_dtoa_r+0xb4e>
 8008df6:	f10a 0308 	add.w	r3, sl, #8
 8008dfa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	4650      	mov	r0, sl
 8008e00:	b017      	add	sp, #92	@ 0x5c
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	9b07      	ldr	r3, [sp, #28]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	f77f ae2e 	ble.w	8008a6a <_dtoa_r+0x7ba>
 8008e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e10:	9308      	str	r3, [sp, #32]
 8008e12:	2001      	movs	r0, #1
 8008e14:	e64d      	b.n	8008ab2 <_dtoa_r+0x802>
 8008e16:	f1bb 0f00 	cmp.w	fp, #0
 8008e1a:	f77f aed9 	ble.w	8008bd0 <_dtoa_r+0x920>
 8008e1e:	4656      	mov	r6, sl
 8008e20:	9802      	ldr	r0, [sp, #8]
 8008e22:	4621      	mov	r1, r4
 8008e24:	f7ff f9ba 	bl	800819c <quorem>
 8008e28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008e30:	eba6 020a 	sub.w	r2, r6, sl
 8008e34:	4593      	cmp	fp, r2
 8008e36:	ddb4      	ble.n	8008da2 <_dtoa_r+0xaf2>
 8008e38:	9902      	ldr	r1, [sp, #8]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	4648      	mov	r0, r9
 8008e40:	f000 f968 	bl	8009114 <__multadd>
 8008e44:	9002      	str	r0, [sp, #8]
 8008e46:	e7eb      	b.n	8008e20 <_dtoa_r+0xb70>
 8008e48:	0800a548 	.word	0x0800a548
 8008e4c:	0800a4e3 	.word	0x0800a4e3

08008e50 <_free_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4605      	mov	r5, r0
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d041      	beq.n	8008edc <_free_r+0x8c>
 8008e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5c:	1f0c      	subs	r4, r1, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfb8      	it	lt
 8008e62:	18e4      	addlt	r4, r4, r3
 8008e64:	f000 f8e8 	bl	8009038 <__malloc_lock>
 8008e68:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee0 <_free_r+0x90>)
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	b933      	cbnz	r3, 8008e7c <_free_r+0x2c>
 8008e6e:	6063      	str	r3, [r4, #4]
 8008e70:	6014      	str	r4, [r2, #0]
 8008e72:	4628      	mov	r0, r5
 8008e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e78:	f000 b8e4 	b.w	8009044 <__malloc_unlock>
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d908      	bls.n	8008e92 <_free_r+0x42>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	1821      	adds	r1, r4, r0
 8008e84:	428b      	cmp	r3, r1
 8008e86:	bf01      	itttt	eq
 8008e88:	6819      	ldreq	r1, [r3, #0]
 8008e8a:	685b      	ldreq	r3, [r3, #4]
 8008e8c:	1809      	addeq	r1, r1, r0
 8008e8e:	6021      	streq	r1, [r4, #0]
 8008e90:	e7ed      	b.n	8008e6e <_free_r+0x1e>
 8008e92:	461a      	mov	r2, r3
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	b10b      	cbz	r3, 8008e9c <_free_r+0x4c>
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	d9fa      	bls.n	8008e92 <_free_r+0x42>
 8008e9c:	6811      	ldr	r1, [r2, #0]
 8008e9e:	1850      	adds	r0, r2, r1
 8008ea0:	42a0      	cmp	r0, r4
 8008ea2:	d10b      	bne.n	8008ebc <_free_r+0x6c>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	4401      	add	r1, r0
 8008ea8:	1850      	adds	r0, r2, r1
 8008eaa:	4283      	cmp	r3, r0
 8008eac:	6011      	str	r1, [r2, #0]
 8008eae:	d1e0      	bne.n	8008e72 <_free_r+0x22>
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	6053      	str	r3, [r2, #4]
 8008eb6:	4408      	add	r0, r1
 8008eb8:	6010      	str	r0, [r2, #0]
 8008eba:	e7da      	b.n	8008e72 <_free_r+0x22>
 8008ebc:	d902      	bls.n	8008ec4 <_free_r+0x74>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	e7d6      	b.n	8008e72 <_free_r+0x22>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	1821      	adds	r1, r4, r0
 8008ec8:	428b      	cmp	r3, r1
 8008eca:	bf04      	itt	eq
 8008ecc:	6819      	ldreq	r1, [r3, #0]
 8008ece:	685b      	ldreq	r3, [r3, #4]
 8008ed0:	6063      	str	r3, [r4, #4]
 8008ed2:	bf04      	itt	eq
 8008ed4:	1809      	addeq	r1, r1, r0
 8008ed6:	6021      	streq	r1, [r4, #0]
 8008ed8:	6054      	str	r4, [r2, #4]
 8008eda:	e7ca      	b.n	8008e72 <_free_r+0x22>
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	20004f7c 	.word	0x20004f7c

08008ee4 <malloc>:
 8008ee4:	4b02      	ldr	r3, [pc, #8]	@ (8008ef0 <malloc+0xc>)
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	f000 b825 	b.w	8008f38 <_malloc_r>
 8008eee:	bf00      	nop
 8008ef0:	20000020 	.word	0x20000020

08008ef4 <sbrk_aligned>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8008f34 <sbrk_aligned+0x40>)
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6831      	ldr	r1, [r6, #0]
 8008efc:	4605      	mov	r5, r0
 8008efe:	b911      	cbnz	r1, 8008f06 <sbrk_aligned+0x12>
 8008f00:	f000 fe50 	bl	8009ba4 <_sbrk_r>
 8008f04:	6030      	str	r0, [r6, #0]
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f000 fe4b 	bl	8009ba4 <_sbrk_r>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	d103      	bne.n	8008f1a <sbrk_aligned+0x26>
 8008f12:	f04f 34ff 	mov.w	r4, #4294967295
 8008f16:	4620      	mov	r0, r4
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
 8008f1a:	1cc4      	adds	r4, r0, #3
 8008f1c:	f024 0403 	bic.w	r4, r4, #3
 8008f20:	42a0      	cmp	r0, r4
 8008f22:	d0f8      	beq.n	8008f16 <sbrk_aligned+0x22>
 8008f24:	1a21      	subs	r1, r4, r0
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 fe3c 	bl	8009ba4 <_sbrk_r>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d1f2      	bne.n	8008f16 <sbrk_aligned+0x22>
 8008f30:	e7ef      	b.n	8008f12 <sbrk_aligned+0x1e>
 8008f32:	bf00      	nop
 8008f34:	20004f78 	.word	0x20004f78

08008f38 <_malloc_r>:
 8008f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f3c:	1ccd      	adds	r5, r1, #3
 8008f3e:	f025 0503 	bic.w	r5, r5, #3
 8008f42:	3508      	adds	r5, #8
 8008f44:	2d0c      	cmp	r5, #12
 8008f46:	bf38      	it	cc
 8008f48:	250c      	movcc	r5, #12
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	db01      	blt.n	8008f54 <_malloc_r+0x1c>
 8008f50:	42a9      	cmp	r1, r5
 8008f52:	d904      	bls.n	8008f5e <_malloc_r+0x26>
 8008f54:	230c      	movs	r3, #12
 8008f56:	6033      	str	r3, [r6, #0]
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009034 <_malloc_r+0xfc>
 8008f62:	f000 f869 	bl	8009038 <__malloc_lock>
 8008f66:	f8d8 3000 	ldr.w	r3, [r8]
 8008f6a:	461c      	mov	r4, r3
 8008f6c:	bb44      	cbnz	r4, 8008fc0 <_malloc_r+0x88>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff ffbf 	bl	8008ef4 <sbrk_aligned>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	4604      	mov	r4, r0
 8008f7a:	d158      	bne.n	800902e <_malloc_r+0xf6>
 8008f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f80:	4627      	mov	r7, r4
 8008f82:	2f00      	cmp	r7, #0
 8008f84:	d143      	bne.n	800900e <_malloc_r+0xd6>
 8008f86:	2c00      	cmp	r4, #0
 8008f88:	d04b      	beq.n	8009022 <_malloc_r+0xea>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4630      	mov	r0, r6
 8008f90:	eb04 0903 	add.w	r9, r4, r3
 8008f94:	f000 fe06 	bl	8009ba4 <_sbrk_r>
 8008f98:	4581      	cmp	r9, r0
 8008f9a:	d142      	bne.n	8009022 <_malloc_r+0xea>
 8008f9c:	6821      	ldr	r1, [r4, #0]
 8008f9e:	1a6d      	subs	r5, r5, r1
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ffa6 	bl	8008ef4 <sbrk_aligned>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d03a      	beq.n	8009022 <_malloc_r+0xea>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	442b      	add	r3, r5
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	bb62      	cbnz	r2, 8009014 <_malloc_r+0xdc>
 8008fba:	f8c8 7000 	str.w	r7, [r8]
 8008fbe:	e00f      	b.n	8008fe0 <_malloc_r+0xa8>
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	1b52      	subs	r2, r2, r5
 8008fc4:	d420      	bmi.n	8009008 <_malloc_r+0xd0>
 8008fc6:	2a0b      	cmp	r2, #11
 8008fc8:	d917      	bls.n	8008ffa <_malloc_r+0xc2>
 8008fca:	1961      	adds	r1, r4, r5
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	6025      	str	r5, [r4, #0]
 8008fd0:	bf18      	it	ne
 8008fd2:	6059      	strne	r1, [r3, #4]
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	bf08      	it	eq
 8008fd8:	f8c8 1000 	streq.w	r1, [r8]
 8008fdc:	5162      	str	r2, [r4, r5]
 8008fde:	604b      	str	r3, [r1, #4]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f82f 	bl	8009044 <__malloc_unlock>
 8008fe6:	f104 000b 	add.w	r0, r4, #11
 8008fea:	1d23      	adds	r3, r4, #4
 8008fec:	f020 0007 	bic.w	r0, r0, #7
 8008ff0:	1ac2      	subs	r2, r0, r3
 8008ff2:	bf1c      	itt	ne
 8008ff4:	1a1b      	subne	r3, r3, r0
 8008ff6:	50a3      	strne	r3, [r4, r2]
 8008ff8:	e7af      	b.n	8008f5a <_malloc_r+0x22>
 8008ffa:	6862      	ldr	r2, [r4, #4]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	bf0c      	ite	eq
 8009000:	f8c8 2000 	streq.w	r2, [r8]
 8009004:	605a      	strne	r2, [r3, #4]
 8009006:	e7eb      	b.n	8008fe0 <_malloc_r+0xa8>
 8009008:	4623      	mov	r3, r4
 800900a:	6864      	ldr	r4, [r4, #4]
 800900c:	e7ae      	b.n	8008f6c <_malloc_r+0x34>
 800900e:	463c      	mov	r4, r7
 8009010:	687f      	ldr	r7, [r7, #4]
 8009012:	e7b6      	b.n	8008f82 <_malloc_r+0x4a>
 8009014:	461a      	mov	r2, r3
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	42a3      	cmp	r3, r4
 800901a:	d1fb      	bne.n	8009014 <_malloc_r+0xdc>
 800901c:	2300      	movs	r3, #0
 800901e:	6053      	str	r3, [r2, #4]
 8009020:	e7de      	b.n	8008fe0 <_malloc_r+0xa8>
 8009022:	230c      	movs	r3, #12
 8009024:	6033      	str	r3, [r6, #0]
 8009026:	4630      	mov	r0, r6
 8009028:	f000 f80c 	bl	8009044 <__malloc_unlock>
 800902c:	e794      	b.n	8008f58 <_malloc_r+0x20>
 800902e:	6005      	str	r5, [r0, #0]
 8009030:	e7d6      	b.n	8008fe0 <_malloc_r+0xa8>
 8009032:	bf00      	nop
 8009034:	20004f7c 	.word	0x20004f7c

08009038 <__malloc_lock>:
 8009038:	4801      	ldr	r0, [pc, #4]	@ (8009040 <__malloc_lock+0x8>)
 800903a:	f7ff b880 	b.w	800813e <__retarget_lock_acquire_recursive>
 800903e:	bf00      	nop
 8009040:	20004f74 	.word	0x20004f74

08009044 <__malloc_unlock>:
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <__malloc_unlock+0x8>)
 8009046:	f7ff b87b 	b.w	8008140 <__retarget_lock_release_recursive>
 800904a:	bf00      	nop
 800904c:	20004f74 	.word	0x20004f74

08009050 <_Balloc>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	69c6      	ldr	r6, [r0, #28]
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
 8009058:	b976      	cbnz	r6, 8009078 <_Balloc+0x28>
 800905a:	2010      	movs	r0, #16
 800905c:	f7ff ff42 	bl	8008ee4 <malloc>
 8009060:	4602      	mov	r2, r0
 8009062:	61e0      	str	r0, [r4, #28]
 8009064:	b920      	cbnz	r0, 8009070 <_Balloc+0x20>
 8009066:	4b18      	ldr	r3, [pc, #96]	@ (80090c8 <_Balloc+0x78>)
 8009068:	4818      	ldr	r0, [pc, #96]	@ (80090cc <_Balloc+0x7c>)
 800906a:	216b      	movs	r1, #107	@ 0x6b
 800906c:	f7ff f878 	bl	8008160 <__assert_func>
 8009070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009074:	6006      	str	r6, [r0, #0]
 8009076:	60c6      	str	r6, [r0, #12]
 8009078:	69e6      	ldr	r6, [r4, #28]
 800907a:	68f3      	ldr	r3, [r6, #12]
 800907c:	b183      	cbz	r3, 80090a0 <_Balloc+0x50>
 800907e:	69e3      	ldr	r3, [r4, #28]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009086:	b9b8      	cbnz	r0, 80090b8 <_Balloc+0x68>
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f605 	lsl.w	r6, r1, r5
 800908e:	1d72      	adds	r2, r6, #5
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	4620      	mov	r0, r4
 8009094:	f000 fd9d 	bl	8009bd2 <_calloc_r>
 8009098:	b160      	cbz	r0, 80090b4 <_Balloc+0x64>
 800909a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800909e:	e00e      	b.n	80090be <_Balloc+0x6e>
 80090a0:	2221      	movs	r2, #33	@ 0x21
 80090a2:	2104      	movs	r1, #4
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 fd94 	bl	8009bd2 <_calloc_r>
 80090aa:	69e3      	ldr	r3, [r4, #28]
 80090ac:	60f0      	str	r0, [r6, #12]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e4      	bne.n	800907e <_Balloc+0x2e>
 80090b4:	2000      	movs	r0, #0
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	6802      	ldr	r2, [r0, #0]
 80090ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090be:	2300      	movs	r3, #0
 80090c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090c4:	e7f7      	b.n	80090b6 <_Balloc+0x66>
 80090c6:	bf00      	nop
 80090c8:	0800a404 	.word	0x0800a404
 80090cc:	0800a559 	.word	0x0800a559

080090d0 <_Bfree>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	69c6      	ldr	r6, [r0, #28]
 80090d4:	4605      	mov	r5, r0
 80090d6:	460c      	mov	r4, r1
 80090d8:	b976      	cbnz	r6, 80090f8 <_Bfree+0x28>
 80090da:	2010      	movs	r0, #16
 80090dc:	f7ff ff02 	bl	8008ee4 <malloc>
 80090e0:	4602      	mov	r2, r0
 80090e2:	61e8      	str	r0, [r5, #28]
 80090e4:	b920      	cbnz	r0, 80090f0 <_Bfree+0x20>
 80090e6:	4b09      	ldr	r3, [pc, #36]	@ (800910c <_Bfree+0x3c>)
 80090e8:	4809      	ldr	r0, [pc, #36]	@ (8009110 <_Bfree+0x40>)
 80090ea:	218f      	movs	r1, #143	@ 0x8f
 80090ec:	f7ff f838 	bl	8008160 <__assert_func>
 80090f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090f4:	6006      	str	r6, [r0, #0]
 80090f6:	60c6      	str	r6, [r0, #12]
 80090f8:	b13c      	cbz	r4, 800910a <_Bfree+0x3a>
 80090fa:	69eb      	ldr	r3, [r5, #28]
 80090fc:	6862      	ldr	r2, [r4, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009104:	6021      	str	r1, [r4, #0]
 8009106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	0800a404 	.word	0x0800a404
 8009110:	0800a559 	.word	0x0800a559

08009114 <__multadd>:
 8009114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009118:	690d      	ldr	r5, [r1, #16]
 800911a:	4607      	mov	r7, r0
 800911c:	460c      	mov	r4, r1
 800911e:	461e      	mov	r6, r3
 8009120:	f101 0c14 	add.w	ip, r1, #20
 8009124:	2000      	movs	r0, #0
 8009126:	f8dc 3000 	ldr.w	r3, [ip]
 800912a:	b299      	uxth	r1, r3
 800912c:	fb02 6101 	mla	r1, r2, r1, r6
 8009130:	0c1e      	lsrs	r6, r3, #16
 8009132:	0c0b      	lsrs	r3, r1, #16
 8009134:	fb02 3306 	mla	r3, r2, r6, r3
 8009138:	b289      	uxth	r1, r1
 800913a:	3001      	adds	r0, #1
 800913c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009140:	4285      	cmp	r5, r0
 8009142:	f84c 1b04 	str.w	r1, [ip], #4
 8009146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800914a:	dcec      	bgt.n	8009126 <__multadd+0x12>
 800914c:	b30e      	cbz	r6, 8009192 <__multadd+0x7e>
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	42ab      	cmp	r3, r5
 8009152:	dc19      	bgt.n	8009188 <__multadd+0x74>
 8009154:	6861      	ldr	r1, [r4, #4]
 8009156:	4638      	mov	r0, r7
 8009158:	3101      	adds	r1, #1
 800915a:	f7ff ff79 	bl	8009050 <_Balloc>
 800915e:	4680      	mov	r8, r0
 8009160:	b928      	cbnz	r0, 800916e <__multadd+0x5a>
 8009162:	4602      	mov	r2, r0
 8009164:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <__multadd+0x84>)
 8009166:	480d      	ldr	r0, [pc, #52]	@ (800919c <__multadd+0x88>)
 8009168:	21ba      	movs	r1, #186	@ 0xba
 800916a:	f7fe fff9 	bl	8008160 <__assert_func>
 800916e:	6922      	ldr	r2, [r4, #16]
 8009170:	3202      	adds	r2, #2
 8009172:	f104 010c 	add.w	r1, r4, #12
 8009176:	0092      	lsls	r2, r2, #2
 8009178:	300c      	adds	r0, #12
 800917a:	f7fe ffe2 	bl	8008142 <memcpy>
 800917e:	4621      	mov	r1, r4
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ffa5 	bl	80090d0 <_Bfree>
 8009186:	4644      	mov	r4, r8
 8009188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800918c:	3501      	adds	r5, #1
 800918e:	615e      	str	r6, [r3, #20]
 8009190:	6125      	str	r5, [r4, #16]
 8009192:	4620      	mov	r0, r4
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	0800a548 	.word	0x0800a548
 800919c:	0800a559 	.word	0x0800a559

080091a0 <__hi0bits>:
 80091a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091a4:	4603      	mov	r3, r0
 80091a6:	bf36      	itet	cc
 80091a8:	0403      	lslcc	r3, r0, #16
 80091aa:	2000      	movcs	r0, #0
 80091ac:	2010      	movcc	r0, #16
 80091ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091b2:	bf3c      	itt	cc
 80091b4:	021b      	lslcc	r3, r3, #8
 80091b6:	3008      	addcc	r0, #8
 80091b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091bc:	bf3c      	itt	cc
 80091be:	011b      	lslcc	r3, r3, #4
 80091c0:	3004      	addcc	r0, #4
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c6:	bf3c      	itt	cc
 80091c8:	009b      	lslcc	r3, r3, #2
 80091ca:	3002      	addcc	r0, #2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	db05      	blt.n	80091dc <__hi0bits+0x3c>
 80091d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091d4:	f100 0001 	add.w	r0, r0, #1
 80091d8:	bf08      	it	eq
 80091da:	2020      	moveq	r0, #32
 80091dc:	4770      	bx	lr

080091de <__lo0bits>:
 80091de:	6803      	ldr	r3, [r0, #0]
 80091e0:	4602      	mov	r2, r0
 80091e2:	f013 0007 	ands.w	r0, r3, #7
 80091e6:	d00b      	beq.n	8009200 <__lo0bits+0x22>
 80091e8:	07d9      	lsls	r1, r3, #31
 80091ea:	d421      	bmi.n	8009230 <__lo0bits+0x52>
 80091ec:	0798      	lsls	r0, r3, #30
 80091ee:	bf49      	itett	mi
 80091f0:	085b      	lsrmi	r3, r3, #1
 80091f2:	089b      	lsrpl	r3, r3, #2
 80091f4:	2001      	movmi	r0, #1
 80091f6:	6013      	strmi	r3, [r2, #0]
 80091f8:	bf5c      	itt	pl
 80091fa:	6013      	strpl	r3, [r2, #0]
 80091fc:	2002      	movpl	r0, #2
 80091fe:	4770      	bx	lr
 8009200:	b299      	uxth	r1, r3
 8009202:	b909      	cbnz	r1, 8009208 <__lo0bits+0x2a>
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	2010      	movs	r0, #16
 8009208:	b2d9      	uxtb	r1, r3
 800920a:	b909      	cbnz	r1, 8009210 <__lo0bits+0x32>
 800920c:	3008      	adds	r0, #8
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	0719      	lsls	r1, r3, #28
 8009212:	bf04      	itt	eq
 8009214:	091b      	lsreq	r3, r3, #4
 8009216:	3004      	addeq	r0, #4
 8009218:	0799      	lsls	r1, r3, #30
 800921a:	bf04      	itt	eq
 800921c:	089b      	lsreq	r3, r3, #2
 800921e:	3002      	addeq	r0, #2
 8009220:	07d9      	lsls	r1, r3, #31
 8009222:	d403      	bmi.n	800922c <__lo0bits+0x4e>
 8009224:	085b      	lsrs	r3, r3, #1
 8009226:	f100 0001 	add.w	r0, r0, #1
 800922a:	d003      	beq.n	8009234 <__lo0bits+0x56>
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	4770      	bx	lr
 8009230:	2000      	movs	r0, #0
 8009232:	4770      	bx	lr
 8009234:	2020      	movs	r0, #32
 8009236:	4770      	bx	lr

08009238 <__i2b>:
 8009238:	b510      	push	{r4, lr}
 800923a:	460c      	mov	r4, r1
 800923c:	2101      	movs	r1, #1
 800923e:	f7ff ff07 	bl	8009050 <_Balloc>
 8009242:	4602      	mov	r2, r0
 8009244:	b928      	cbnz	r0, 8009252 <__i2b+0x1a>
 8009246:	4b05      	ldr	r3, [pc, #20]	@ (800925c <__i2b+0x24>)
 8009248:	4805      	ldr	r0, [pc, #20]	@ (8009260 <__i2b+0x28>)
 800924a:	f240 1145 	movw	r1, #325	@ 0x145
 800924e:	f7fe ff87 	bl	8008160 <__assert_func>
 8009252:	2301      	movs	r3, #1
 8009254:	6144      	str	r4, [r0, #20]
 8009256:	6103      	str	r3, [r0, #16]
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	0800a548 	.word	0x0800a548
 8009260:	0800a559 	.word	0x0800a559

08009264 <__multiply>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	4617      	mov	r7, r2
 800926a:	690a      	ldr	r2, [r1, #16]
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	429a      	cmp	r2, r3
 8009270:	bfa8      	it	ge
 8009272:	463b      	movge	r3, r7
 8009274:	4689      	mov	r9, r1
 8009276:	bfa4      	itt	ge
 8009278:	460f      	movge	r7, r1
 800927a:	4699      	movge	r9, r3
 800927c:	693d      	ldr	r5, [r7, #16]
 800927e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	eb05 060a 	add.w	r6, r5, sl
 800928a:	42b3      	cmp	r3, r6
 800928c:	b085      	sub	sp, #20
 800928e:	bfb8      	it	lt
 8009290:	3101      	addlt	r1, #1
 8009292:	f7ff fedd 	bl	8009050 <_Balloc>
 8009296:	b930      	cbnz	r0, 80092a6 <__multiply+0x42>
 8009298:	4602      	mov	r2, r0
 800929a:	4b41      	ldr	r3, [pc, #260]	@ (80093a0 <__multiply+0x13c>)
 800929c:	4841      	ldr	r0, [pc, #260]	@ (80093a4 <__multiply+0x140>)
 800929e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80092a2:	f7fe ff5d 	bl	8008160 <__assert_func>
 80092a6:	f100 0414 	add.w	r4, r0, #20
 80092aa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80092ae:	4623      	mov	r3, r4
 80092b0:	2200      	movs	r2, #0
 80092b2:	4573      	cmp	r3, lr
 80092b4:	d320      	bcc.n	80092f8 <__multiply+0x94>
 80092b6:	f107 0814 	add.w	r8, r7, #20
 80092ba:	f109 0114 	add.w	r1, r9, #20
 80092be:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80092c2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80092c6:	9302      	str	r3, [sp, #8]
 80092c8:	1beb      	subs	r3, r5, r7
 80092ca:	3b15      	subs	r3, #21
 80092cc:	f023 0303 	bic.w	r3, r3, #3
 80092d0:	3304      	adds	r3, #4
 80092d2:	3715      	adds	r7, #21
 80092d4:	42bd      	cmp	r5, r7
 80092d6:	bf38      	it	cc
 80092d8:	2304      	movcc	r3, #4
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	9b02      	ldr	r3, [sp, #8]
 80092de:	9103      	str	r1, [sp, #12]
 80092e0:	428b      	cmp	r3, r1
 80092e2:	d80c      	bhi.n	80092fe <__multiply+0x9a>
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	dd03      	ble.n	80092f0 <__multiply+0x8c>
 80092e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d055      	beq.n	800939c <__multiply+0x138>
 80092f0:	6106      	str	r6, [r0, #16]
 80092f2:	b005      	add	sp, #20
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	f843 2b04 	str.w	r2, [r3], #4
 80092fc:	e7d9      	b.n	80092b2 <__multiply+0x4e>
 80092fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009302:	f1ba 0f00 	cmp.w	sl, #0
 8009306:	d01f      	beq.n	8009348 <__multiply+0xe4>
 8009308:	46c4      	mov	ip, r8
 800930a:	46a1      	mov	r9, r4
 800930c:	2700      	movs	r7, #0
 800930e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009312:	f8d9 3000 	ldr.w	r3, [r9]
 8009316:	fa1f fb82 	uxth.w	fp, r2
 800931a:	b29b      	uxth	r3, r3
 800931c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009320:	443b      	add	r3, r7
 8009322:	f8d9 7000 	ldr.w	r7, [r9]
 8009326:	0c12      	lsrs	r2, r2, #16
 8009328:	0c3f      	lsrs	r7, r7, #16
 800932a:	fb0a 7202 	mla	r2, sl, r2, r7
 800932e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009332:	b29b      	uxth	r3, r3
 8009334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009338:	4565      	cmp	r5, ip
 800933a:	f849 3b04 	str.w	r3, [r9], #4
 800933e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009342:	d8e4      	bhi.n	800930e <__multiply+0xaa>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	50e7      	str	r7, [r4, r3]
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800934e:	3104      	adds	r1, #4
 8009350:	f1b9 0f00 	cmp.w	r9, #0
 8009354:	d020      	beq.n	8009398 <__multiply+0x134>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	4647      	mov	r7, r8
 800935a:	46a4      	mov	ip, r4
 800935c:	f04f 0a00 	mov.w	sl, #0
 8009360:	f8b7 b000 	ldrh.w	fp, [r7]
 8009364:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009368:	fb09 220b 	mla	r2, r9, fp, r2
 800936c:	4452      	add	r2, sl
 800936e:	b29b      	uxth	r3, r3
 8009370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009374:	f84c 3b04 	str.w	r3, [ip], #4
 8009378:	f857 3b04 	ldr.w	r3, [r7], #4
 800937c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009380:	f8bc 3000 	ldrh.w	r3, [ip]
 8009384:	fb09 330a 	mla	r3, r9, sl, r3
 8009388:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800938c:	42bd      	cmp	r5, r7
 800938e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009392:	d8e5      	bhi.n	8009360 <__multiply+0xfc>
 8009394:	9a01      	ldr	r2, [sp, #4]
 8009396:	50a3      	str	r3, [r4, r2]
 8009398:	3404      	adds	r4, #4
 800939a:	e79f      	b.n	80092dc <__multiply+0x78>
 800939c:	3e01      	subs	r6, #1
 800939e:	e7a1      	b.n	80092e4 <__multiply+0x80>
 80093a0:	0800a548 	.word	0x0800a548
 80093a4:	0800a559 	.word	0x0800a559

080093a8 <__pow5mult>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	4615      	mov	r5, r2
 80093ae:	f012 0203 	ands.w	r2, r2, #3
 80093b2:	4607      	mov	r7, r0
 80093b4:	460e      	mov	r6, r1
 80093b6:	d007      	beq.n	80093c8 <__pow5mult+0x20>
 80093b8:	4c25      	ldr	r4, [pc, #148]	@ (8009450 <__pow5mult+0xa8>)
 80093ba:	3a01      	subs	r2, #1
 80093bc:	2300      	movs	r3, #0
 80093be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093c2:	f7ff fea7 	bl	8009114 <__multadd>
 80093c6:	4606      	mov	r6, r0
 80093c8:	10ad      	asrs	r5, r5, #2
 80093ca:	d03d      	beq.n	8009448 <__pow5mult+0xa0>
 80093cc:	69fc      	ldr	r4, [r7, #28]
 80093ce:	b97c      	cbnz	r4, 80093f0 <__pow5mult+0x48>
 80093d0:	2010      	movs	r0, #16
 80093d2:	f7ff fd87 	bl	8008ee4 <malloc>
 80093d6:	4602      	mov	r2, r0
 80093d8:	61f8      	str	r0, [r7, #28]
 80093da:	b928      	cbnz	r0, 80093e8 <__pow5mult+0x40>
 80093dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009454 <__pow5mult+0xac>)
 80093de:	481e      	ldr	r0, [pc, #120]	@ (8009458 <__pow5mult+0xb0>)
 80093e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093e4:	f7fe febc 	bl	8008160 <__assert_func>
 80093e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ec:	6004      	str	r4, [r0, #0]
 80093ee:	60c4      	str	r4, [r0, #12]
 80093f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093f8:	b94c      	cbnz	r4, 800940e <__pow5mult+0x66>
 80093fa:	f240 2171 	movw	r1, #625	@ 0x271
 80093fe:	4638      	mov	r0, r7
 8009400:	f7ff ff1a 	bl	8009238 <__i2b>
 8009404:	2300      	movs	r3, #0
 8009406:	f8c8 0008 	str.w	r0, [r8, #8]
 800940a:	4604      	mov	r4, r0
 800940c:	6003      	str	r3, [r0, #0]
 800940e:	f04f 0900 	mov.w	r9, #0
 8009412:	07eb      	lsls	r3, r5, #31
 8009414:	d50a      	bpl.n	800942c <__pow5mult+0x84>
 8009416:	4631      	mov	r1, r6
 8009418:	4622      	mov	r2, r4
 800941a:	4638      	mov	r0, r7
 800941c:	f7ff ff22 	bl	8009264 <__multiply>
 8009420:	4631      	mov	r1, r6
 8009422:	4680      	mov	r8, r0
 8009424:	4638      	mov	r0, r7
 8009426:	f7ff fe53 	bl	80090d0 <_Bfree>
 800942a:	4646      	mov	r6, r8
 800942c:	106d      	asrs	r5, r5, #1
 800942e:	d00b      	beq.n	8009448 <__pow5mult+0xa0>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	b938      	cbnz	r0, 8009444 <__pow5mult+0x9c>
 8009434:	4622      	mov	r2, r4
 8009436:	4621      	mov	r1, r4
 8009438:	4638      	mov	r0, r7
 800943a:	f7ff ff13 	bl	8009264 <__multiply>
 800943e:	6020      	str	r0, [r4, #0]
 8009440:	f8c0 9000 	str.w	r9, [r0]
 8009444:	4604      	mov	r4, r0
 8009446:	e7e4      	b.n	8009412 <__pow5mult+0x6a>
 8009448:	4630      	mov	r0, r6
 800944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944e:	bf00      	nop
 8009450:	0800a5d0 	.word	0x0800a5d0
 8009454:	0800a404 	.word	0x0800a404
 8009458:	0800a559 	.word	0x0800a559

0800945c <__lshift>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	460c      	mov	r4, r1
 8009462:	6849      	ldr	r1, [r1, #4]
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800946a:	68a3      	ldr	r3, [r4, #8]
 800946c:	4607      	mov	r7, r0
 800946e:	4691      	mov	r9, r2
 8009470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009474:	f108 0601 	add.w	r6, r8, #1
 8009478:	42b3      	cmp	r3, r6
 800947a:	db0b      	blt.n	8009494 <__lshift+0x38>
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff fde7 	bl	8009050 <_Balloc>
 8009482:	4605      	mov	r5, r0
 8009484:	b948      	cbnz	r0, 800949a <__lshift+0x3e>
 8009486:	4602      	mov	r2, r0
 8009488:	4b28      	ldr	r3, [pc, #160]	@ (800952c <__lshift+0xd0>)
 800948a:	4829      	ldr	r0, [pc, #164]	@ (8009530 <__lshift+0xd4>)
 800948c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009490:	f7fe fe66 	bl	8008160 <__assert_func>
 8009494:	3101      	adds	r1, #1
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	e7ee      	b.n	8009478 <__lshift+0x1c>
 800949a:	2300      	movs	r3, #0
 800949c:	f100 0114 	add.w	r1, r0, #20
 80094a0:	f100 0210 	add.w	r2, r0, #16
 80094a4:	4618      	mov	r0, r3
 80094a6:	4553      	cmp	r3, sl
 80094a8:	db33      	blt.n	8009512 <__lshift+0xb6>
 80094aa:	6920      	ldr	r0, [r4, #16]
 80094ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094b0:	f104 0314 	add.w	r3, r4, #20
 80094b4:	f019 091f 	ands.w	r9, r9, #31
 80094b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094c0:	d02b      	beq.n	800951a <__lshift+0xbe>
 80094c2:	f1c9 0e20 	rsb	lr, r9, #32
 80094c6:	468a      	mov	sl, r1
 80094c8:	2200      	movs	r2, #0
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	fa00 f009 	lsl.w	r0, r0, r9
 80094d0:	4310      	orrs	r0, r2
 80094d2:	f84a 0b04 	str.w	r0, [sl], #4
 80094d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094da:	459c      	cmp	ip, r3
 80094dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80094e0:	d8f3      	bhi.n	80094ca <__lshift+0x6e>
 80094e2:	ebac 0304 	sub.w	r3, ip, r4
 80094e6:	3b15      	subs	r3, #21
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	3304      	adds	r3, #4
 80094ee:	f104 0015 	add.w	r0, r4, #21
 80094f2:	4560      	cmp	r0, ip
 80094f4:	bf88      	it	hi
 80094f6:	2304      	movhi	r3, #4
 80094f8:	50ca      	str	r2, [r1, r3]
 80094fa:	b10a      	cbz	r2, 8009500 <__lshift+0xa4>
 80094fc:	f108 0602 	add.w	r6, r8, #2
 8009500:	3e01      	subs	r6, #1
 8009502:	4638      	mov	r0, r7
 8009504:	612e      	str	r6, [r5, #16]
 8009506:	4621      	mov	r1, r4
 8009508:	f7ff fde2 	bl	80090d0 <_Bfree>
 800950c:	4628      	mov	r0, r5
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	f842 0f04 	str.w	r0, [r2, #4]!
 8009516:	3301      	adds	r3, #1
 8009518:	e7c5      	b.n	80094a6 <__lshift+0x4a>
 800951a:	3904      	subs	r1, #4
 800951c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009520:	f841 2f04 	str.w	r2, [r1, #4]!
 8009524:	459c      	cmp	ip, r3
 8009526:	d8f9      	bhi.n	800951c <__lshift+0xc0>
 8009528:	e7ea      	b.n	8009500 <__lshift+0xa4>
 800952a:	bf00      	nop
 800952c:	0800a548 	.word	0x0800a548
 8009530:	0800a559 	.word	0x0800a559

08009534 <__mcmp>:
 8009534:	690a      	ldr	r2, [r1, #16]
 8009536:	4603      	mov	r3, r0
 8009538:	6900      	ldr	r0, [r0, #16]
 800953a:	1a80      	subs	r0, r0, r2
 800953c:	b530      	push	{r4, r5, lr}
 800953e:	d10e      	bne.n	800955e <__mcmp+0x2a>
 8009540:	3314      	adds	r3, #20
 8009542:	3114      	adds	r1, #20
 8009544:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009548:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800954c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009550:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009554:	4295      	cmp	r5, r2
 8009556:	d003      	beq.n	8009560 <__mcmp+0x2c>
 8009558:	d205      	bcs.n	8009566 <__mcmp+0x32>
 800955a:	f04f 30ff 	mov.w	r0, #4294967295
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	42a3      	cmp	r3, r4
 8009562:	d3f3      	bcc.n	800954c <__mcmp+0x18>
 8009564:	e7fb      	b.n	800955e <__mcmp+0x2a>
 8009566:	2001      	movs	r0, #1
 8009568:	e7f9      	b.n	800955e <__mcmp+0x2a>
	...

0800956c <__mdiff>:
 800956c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	4689      	mov	r9, r1
 8009572:	4606      	mov	r6, r0
 8009574:	4611      	mov	r1, r2
 8009576:	4648      	mov	r0, r9
 8009578:	4614      	mov	r4, r2
 800957a:	f7ff ffdb 	bl	8009534 <__mcmp>
 800957e:	1e05      	subs	r5, r0, #0
 8009580:	d112      	bne.n	80095a8 <__mdiff+0x3c>
 8009582:	4629      	mov	r1, r5
 8009584:	4630      	mov	r0, r6
 8009586:	f7ff fd63 	bl	8009050 <_Balloc>
 800958a:	4602      	mov	r2, r0
 800958c:	b928      	cbnz	r0, 800959a <__mdiff+0x2e>
 800958e:	4b3f      	ldr	r3, [pc, #252]	@ (800968c <__mdiff+0x120>)
 8009590:	f240 2137 	movw	r1, #567	@ 0x237
 8009594:	483e      	ldr	r0, [pc, #248]	@ (8009690 <__mdiff+0x124>)
 8009596:	f7fe fde3 	bl	8008160 <__assert_func>
 800959a:	2301      	movs	r3, #1
 800959c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095a0:	4610      	mov	r0, r2
 80095a2:	b003      	add	sp, #12
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	bfbc      	itt	lt
 80095aa:	464b      	movlt	r3, r9
 80095ac:	46a1      	movlt	r9, r4
 80095ae:	4630      	mov	r0, r6
 80095b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095b4:	bfba      	itte	lt
 80095b6:	461c      	movlt	r4, r3
 80095b8:	2501      	movlt	r5, #1
 80095ba:	2500      	movge	r5, #0
 80095bc:	f7ff fd48 	bl	8009050 <_Balloc>
 80095c0:	4602      	mov	r2, r0
 80095c2:	b918      	cbnz	r0, 80095cc <__mdiff+0x60>
 80095c4:	4b31      	ldr	r3, [pc, #196]	@ (800968c <__mdiff+0x120>)
 80095c6:	f240 2145 	movw	r1, #581	@ 0x245
 80095ca:	e7e3      	b.n	8009594 <__mdiff+0x28>
 80095cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095d0:	6926      	ldr	r6, [r4, #16]
 80095d2:	60c5      	str	r5, [r0, #12]
 80095d4:	f109 0310 	add.w	r3, r9, #16
 80095d8:	f109 0514 	add.w	r5, r9, #20
 80095dc:	f104 0e14 	add.w	lr, r4, #20
 80095e0:	f100 0b14 	add.w	fp, r0, #20
 80095e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	46d9      	mov	r9, fp
 80095f0:	f04f 0c00 	mov.w	ip, #0
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	fa1f f38a 	uxth.w	r3, sl
 8009604:	4619      	mov	r1, r3
 8009606:	b283      	uxth	r3, r0
 8009608:	1acb      	subs	r3, r1, r3
 800960a:	0c00      	lsrs	r0, r0, #16
 800960c:	4463      	add	r3, ip
 800960e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009612:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009616:	b29b      	uxth	r3, r3
 8009618:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800961c:	4576      	cmp	r6, lr
 800961e:	f849 3b04 	str.w	r3, [r9], #4
 8009622:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009626:	d8e5      	bhi.n	80095f4 <__mdiff+0x88>
 8009628:	1b33      	subs	r3, r6, r4
 800962a:	3b15      	subs	r3, #21
 800962c:	f023 0303 	bic.w	r3, r3, #3
 8009630:	3415      	adds	r4, #21
 8009632:	3304      	adds	r3, #4
 8009634:	42a6      	cmp	r6, r4
 8009636:	bf38      	it	cc
 8009638:	2304      	movcc	r3, #4
 800963a:	441d      	add	r5, r3
 800963c:	445b      	add	r3, fp
 800963e:	461e      	mov	r6, r3
 8009640:	462c      	mov	r4, r5
 8009642:	4544      	cmp	r4, r8
 8009644:	d30e      	bcc.n	8009664 <__mdiff+0xf8>
 8009646:	f108 0103 	add.w	r1, r8, #3
 800964a:	1b49      	subs	r1, r1, r5
 800964c:	f021 0103 	bic.w	r1, r1, #3
 8009650:	3d03      	subs	r5, #3
 8009652:	45a8      	cmp	r8, r5
 8009654:	bf38      	it	cc
 8009656:	2100      	movcc	r1, #0
 8009658:	440b      	add	r3, r1
 800965a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800965e:	b191      	cbz	r1, 8009686 <__mdiff+0x11a>
 8009660:	6117      	str	r7, [r2, #16]
 8009662:	e79d      	b.n	80095a0 <__mdiff+0x34>
 8009664:	f854 1b04 	ldr.w	r1, [r4], #4
 8009668:	46e6      	mov	lr, ip
 800966a:	0c08      	lsrs	r0, r1, #16
 800966c:	fa1c fc81 	uxtah	ip, ip, r1
 8009670:	4471      	add	r1, lr
 8009672:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009676:	b289      	uxth	r1, r1
 8009678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800967c:	f846 1b04 	str.w	r1, [r6], #4
 8009680:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009684:	e7dd      	b.n	8009642 <__mdiff+0xd6>
 8009686:	3f01      	subs	r7, #1
 8009688:	e7e7      	b.n	800965a <__mdiff+0xee>
 800968a:	bf00      	nop
 800968c:	0800a548 	.word	0x0800a548
 8009690:	0800a559 	.word	0x0800a559

08009694 <__d2b>:
 8009694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009698:	460f      	mov	r7, r1
 800969a:	2101      	movs	r1, #1
 800969c:	ec59 8b10 	vmov	r8, r9, d0
 80096a0:	4616      	mov	r6, r2
 80096a2:	f7ff fcd5 	bl	8009050 <_Balloc>
 80096a6:	4604      	mov	r4, r0
 80096a8:	b930      	cbnz	r0, 80096b8 <__d2b+0x24>
 80096aa:	4602      	mov	r2, r0
 80096ac:	4b23      	ldr	r3, [pc, #140]	@ (800973c <__d2b+0xa8>)
 80096ae:	4824      	ldr	r0, [pc, #144]	@ (8009740 <__d2b+0xac>)
 80096b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80096b4:	f7fe fd54 	bl	8008160 <__assert_func>
 80096b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096c0:	b10d      	cbz	r5, 80096c6 <__d2b+0x32>
 80096c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	f1b8 0300 	subs.w	r3, r8, #0
 80096cc:	d023      	beq.n	8009716 <__d2b+0x82>
 80096ce:	4668      	mov	r0, sp
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	f7ff fd84 	bl	80091de <__lo0bits>
 80096d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096da:	b1d0      	cbz	r0, 8009712 <__d2b+0x7e>
 80096dc:	f1c0 0320 	rsb	r3, r0, #32
 80096e0:	fa02 f303 	lsl.w	r3, r2, r3
 80096e4:	430b      	orrs	r3, r1
 80096e6:	40c2      	lsrs	r2, r0
 80096e8:	6163      	str	r3, [r4, #20]
 80096ea:	9201      	str	r2, [sp, #4]
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	61a3      	str	r3, [r4, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bf0c      	ite	eq
 80096f4:	2201      	moveq	r2, #1
 80096f6:	2202      	movne	r2, #2
 80096f8:	6122      	str	r2, [r4, #16]
 80096fa:	b1a5      	cbz	r5, 8009726 <__d2b+0x92>
 80096fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009700:	4405      	add	r5, r0
 8009702:	603d      	str	r5, [r7, #0]
 8009704:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009708:	6030      	str	r0, [r6, #0]
 800970a:	4620      	mov	r0, r4
 800970c:	b003      	add	sp, #12
 800970e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009712:	6161      	str	r1, [r4, #20]
 8009714:	e7ea      	b.n	80096ec <__d2b+0x58>
 8009716:	a801      	add	r0, sp, #4
 8009718:	f7ff fd61 	bl	80091de <__lo0bits>
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	6163      	str	r3, [r4, #20]
 8009720:	3020      	adds	r0, #32
 8009722:	2201      	movs	r2, #1
 8009724:	e7e8      	b.n	80096f8 <__d2b+0x64>
 8009726:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800972a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800972e:	6038      	str	r0, [r7, #0]
 8009730:	6918      	ldr	r0, [r3, #16]
 8009732:	f7ff fd35 	bl	80091a0 <__hi0bits>
 8009736:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800973a:	e7e5      	b.n	8009708 <__d2b+0x74>
 800973c:	0800a548 	.word	0x0800a548
 8009740:	0800a559 	.word	0x0800a559

08009744 <__ssputs_r>:
 8009744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	688e      	ldr	r6, [r1, #8]
 800974a:	461f      	mov	r7, r3
 800974c:	42be      	cmp	r6, r7
 800974e:	680b      	ldr	r3, [r1, #0]
 8009750:	4682      	mov	sl, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4690      	mov	r8, r2
 8009756:	d82d      	bhi.n	80097b4 <__ssputs_r+0x70>
 8009758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800975c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009760:	d026      	beq.n	80097b0 <__ssputs_r+0x6c>
 8009762:	6965      	ldr	r5, [r4, #20]
 8009764:	6909      	ldr	r1, [r1, #16]
 8009766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800976a:	eba3 0901 	sub.w	r9, r3, r1
 800976e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009772:	1c7b      	adds	r3, r7, #1
 8009774:	444b      	add	r3, r9
 8009776:	106d      	asrs	r5, r5, #1
 8009778:	429d      	cmp	r5, r3
 800977a:	bf38      	it	cc
 800977c:	461d      	movcc	r5, r3
 800977e:	0553      	lsls	r3, r2, #21
 8009780:	d527      	bpl.n	80097d2 <__ssputs_r+0x8e>
 8009782:	4629      	mov	r1, r5
 8009784:	f7ff fbd8 	bl	8008f38 <_malloc_r>
 8009788:	4606      	mov	r6, r0
 800978a:	b360      	cbz	r0, 80097e6 <__ssputs_r+0xa2>
 800978c:	6921      	ldr	r1, [r4, #16]
 800978e:	464a      	mov	r2, r9
 8009790:	f7fe fcd7 	bl	8008142 <memcpy>
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800979a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800979e:	81a3      	strh	r3, [r4, #12]
 80097a0:	6126      	str	r6, [r4, #16]
 80097a2:	6165      	str	r5, [r4, #20]
 80097a4:	444e      	add	r6, r9
 80097a6:	eba5 0509 	sub.w	r5, r5, r9
 80097aa:	6026      	str	r6, [r4, #0]
 80097ac:	60a5      	str	r5, [r4, #8]
 80097ae:	463e      	mov	r6, r7
 80097b0:	42be      	cmp	r6, r7
 80097b2:	d900      	bls.n	80097b6 <__ssputs_r+0x72>
 80097b4:	463e      	mov	r6, r7
 80097b6:	6820      	ldr	r0, [r4, #0]
 80097b8:	4632      	mov	r2, r6
 80097ba:	4641      	mov	r1, r8
 80097bc:	f000 f9d8 	bl	8009b70 <memmove>
 80097c0:	68a3      	ldr	r3, [r4, #8]
 80097c2:	1b9b      	subs	r3, r3, r6
 80097c4:	60a3      	str	r3, [r4, #8]
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	4433      	add	r3, r6
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	2000      	movs	r0, #0
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	462a      	mov	r2, r5
 80097d4:	f000 fa23 	bl	8009c1e <_realloc_r>
 80097d8:	4606      	mov	r6, r0
 80097da:	2800      	cmp	r0, #0
 80097dc:	d1e0      	bne.n	80097a0 <__ssputs_r+0x5c>
 80097de:	6921      	ldr	r1, [r4, #16]
 80097e0:	4650      	mov	r0, sl
 80097e2:	f7ff fb35 	bl	8008e50 <_free_r>
 80097e6:	230c      	movs	r3, #12
 80097e8:	f8ca 3000 	str.w	r3, [sl]
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	e7e9      	b.n	80097ce <__ssputs_r+0x8a>
	...

080097fc <_svfiprintf_r>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	4698      	mov	r8, r3
 8009802:	898b      	ldrh	r3, [r1, #12]
 8009804:	061b      	lsls	r3, r3, #24
 8009806:	b09d      	sub	sp, #116	@ 0x74
 8009808:	4607      	mov	r7, r0
 800980a:	460d      	mov	r5, r1
 800980c:	4614      	mov	r4, r2
 800980e:	d510      	bpl.n	8009832 <_svfiprintf_r+0x36>
 8009810:	690b      	ldr	r3, [r1, #16]
 8009812:	b973      	cbnz	r3, 8009832 <_svfiprintf_r+0x36>
 8009814:	2140      	movs	r1, #64	@ 0x40
 8009816:	f7ff fb8f 	bl	8008f38 <_malloc_r>
 800981a:	6028      	str	r0, [r5, #0]
 800981c:	6128      	str	r0, [r5, #16]
 800981e:	b930      	cbnz	r0, 800982e <_svfiprintf_r+0x32>
 8009820:	230c      	movs	r3, #12
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	b01d      	add	sp, #116	@ 0x74
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	2340      	movs	r3, #64	@ 0x40
 8009830:	616b      	str	r3, [r5, #20]
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	@ 0x24
 8009836:	2320      	movs	r3, #32
 8009838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800983c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009840:	2330      	movs	r3, #48	@ 0x30
 8009842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099e0 <_svfiprintf_r+0x1e4>
 8009846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800984a:	f04f 0901 	mov.w	r9, #1
 800984e:	4623      	mov	r3, r4
 8009850:	469a      	mov	sl, r3
 8009852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009856:	b10a      	cbz	r2, 800985c <_svfiprintf_r+0x60>
 8009858:	2a25      	cmp	r2, #37	@ 0x25
 800985a:	d1f9      	bne.n	8009850 <_svfiprintf_r+0x54>
 800985c:	ebba 0b04 	subs.w	fp, sl, r4
 8009860:	d00b      	beq.n	800987a <_svfiprintf_r+0x7e>
 8009862:	465b      	mov	r3, fp
 8009864:	4622      	mov	r2, r4
 8009866:	4629      	mov	r1, r5
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff ff6b 	bl	8009744 <__ssputs_r>
 800986e:	3001      	adds	r0, #1
 8009870:	f000 80a7 	beq.w	80099c2 <_svfiprintf_r+0x1c6>
 8009874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009876:	445a      	add	r2, fp
 8009878:	9209      	str	r2, [sp, #36]	@ 0x24
 800987a:	f89a 3000 	ldrb.w	r3, [sl]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 809f 	beq.w	80099c2 <_svfiprintf_r+0x1c6>
 8009884:	2300      	movs	r3, #0
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988e:	f10a 0a01 	add.w	sl, sl, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	9307      	str	r3, [sp, #28]
 8009896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800989a:	931a      	str	r3, [sp, #104]	@ 0x68
 800989c:	4654      	mov	r4, sl
 800989e:	2205      	movs	r2, #5
 80098a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a4:	484e      	ldr	r0, [pc, #312]	@ (80099e0 <_svfiprintf_r+0x1e4>)
 80098a6:	f7f6 fcb3 	bl	8000210 <memchr>
 80098aa:	9a04      	ldr	r2, [sp, #16]
 80098ac:	b9d8      	cbnz	r0, 80098e6 <_svfiprintf_r+0xea>
 80098ae:	06d0      	lsls	r0, r2, #27
 80098b0:	bf44      	itt	mi
 80098b2:	2320      	movmi	r3, #32
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098b8:	0711      	lsls	r1, r2, #28
 80098ba:	bf44      	itt	mi
 80098bc:	232b      	movmi	r3, #43	@ 0x2b
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098c2:	f89a 3000 	ldrb.w	r3, [sl]
 80098c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098c8:	d015      	beq.n	80098f6 <_svfiprintf_r+0xfa>
 80098ca:	9a07      	ldr	r2, [sp, #28]
 80098cc:	4654      	mov	r4, sl
 80098ce:	2000      	movs	r0, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4621      	mov	r1, r4
 80098d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098da:	3b30      	subs	r3, #48	@ 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d94b      	bls.n	8009978 <_svfiprintf_r+0x17c>
 80098e0:	b1b0      	cbz	r0, 8009910 <_svfiprintf_r+0x114>
 80098e2:	9207      	str	r2, [sp, #28]
 80098e4:	e014      	b.n	8009910 <_svfiprintf_r+0x114>
 80098e6:	eba0 0308 	sub.w	r3, r0, r8
 80098ea:	fa09 f303 	lsl.w	r3, r9, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	46a2      	mov	sl, r4
 80098f4:	e7d2      	b.n	800989c <_svfiprintf_r+0xa0>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9103      	str	r1, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbb      	ittet	lt
 8009902:	425b      	neglt	r3, r3
 8009904:	f042 0202 	orrlt.w	r2, r2, #2
 8009908:	9307      	strge	r3, [sp, #28]
 800990a:	9307      	strlt	r3, [sp, #28]
 800990c:	bfb8      	it	lt
 800990e:	9204      	strlt	r2, [sp, #16]
 8009910:	7823      	ldrb	r3, [r4, #0]
 8009912:	2b2e      	cmp	r3, #46	@ 0x2e
 8009914:	d10a      	bne.n	800992c <_svfiprintf_r+0x130>
 8009916:	7863      	ldrb	r3, [r4, #1]
 8009918:	2b2a      	cmp	r3, #42	@ 0x2a
 800991a:	d132      	bne.n	8009982 <_svfiprintf_r+0x186>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9203      	str	r2, [sp, #12]
 8009924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009928:	3402      	adds	r4, #2
 800992a:	9305      	str	r3, [sp, #20]
 800992c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099f0 <_svfiprintf_r+0x1f4>
 8009930:	7821      	ldrb	r1, [r4, #0]
 8009932:	2203      	movs	r2, #3
 8009934:	4650      	mov	r0, sl
 8009936:	f7f6 fc6b 	bl	8000210 <memchr>
 800993a:	b138      	cbz	r0, 800994c <_svfiprintf_r+0x150>
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	eba0 000a 	sub.w	r0, r0, sl
 8009942:	2240      	movs	r2, #64	@ 0x40
 8009944:	4082      	lsls	r2, r0
 8009946:	4313      	orrs	r3, r2
 8009948:	3401      	adds	r4, #1
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009950:	4824      	ldr	r0, [pc, #144]	@ (80099e4 <_svfiprintf_r+0x1e8>)
 8009952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009956:	2206      	movs	r2, #6
 8009958:	f7f6 fc5a 	bl	8000210 <memchr>
 800995c:	2800      	cmp	r0, #0
 800995e:	d036      	beq.n	80099ce <_svfiprintf_r+0x1d2>
 8009960:	4b21      	ldr	r3, [pc, #132]	@ (80099e8 <_svfiprintf_r+0x1ec>)
 8009962:	bb1b      	cbnz	r3, 80099ac <_svfiprintf_r+0x1b0>
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	3307      	adds	r3, #7
 8009968:	f023 0307 	bic.w	r3, r3, #7
 800996c:	3308      	adds	r3, #8
 800996e:	9303      	str	r3, [sp, #12]
 8009970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009972:	4433      	add	r3, r6
 8009974:	9309      	str	r3, [sp, #36]	@ 0x24
 8009976:	e76a      	b.n	800984e <_svfiprintf_r+0x52>
 8009978:	fb0c 3202 	mla	r2, ip, r2, r3
 800997c:	460c      	mov	r4, r1
 800997e:	2001      	movs	r0, #1
 8009980:	e7a8      	b.n	80098d4 <_svfiprintf_r+0xd8>
 8009982:	2300      	movs	r3, #0
 8009984:	3401      	adds	r4, #1
 8009986:	9305      	str	r3, [sp, #20]
 8009988:	4619      	mov	r1, r3
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4620      	mov	r0, r4
 8009990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009994:	3a30      	subs	r2, #48	@ 0x30
 8009996:	2a09      	cmp	r2, #9
 8009998:	d903      	bls.n	80099a2 <_svfiprintf_r+0x1a6>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0c6      	beq.n	800992c <_svfiprintf_r+0x130>
 800999e:	9105      	str	r1, [sp, #20]
 80099a0:	e7c4      	b.n	800992c <_svfiprintf_r+0x130>
 80099a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a6:	4604      	mov	r4, r0
 80099a8:	2301      	movs	r3, #1
 80099aa:	e7f0      	b.n	800998e <_svfiprintf_r+0x192>
 80099ac:	ab03      	add	r3, sp, #12
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	462a      	mov	r2, r5
 80099b2:	4b0e      	ldr	r3, [pc, #56]	@ (80099ec <_svfiprintf_r+0x1f0>)
 80099b4:	a904      	add	r1, sp, #16
 80099b6:	4638      	mov	r0, r7
 80099b8:	f7fd fe4c 	bl	8007654 <_printf_float>
 80099bc:	1c42      	adds	r2, r0, #1
 80099be:	4606      	mov	r6, r0
 80099c0:	d1d6      	bne.n	8009970 <_svfiprintf_r+0x174>
 80099c2:	89ab      	ldrh	r3, [r5, #12]
 80099c4:	065b      	lsls	r3, r3, #25
 80099c6:	f53f af2d 	bmi.w	8009824 <_svfiprintf_r+0x28>
 80099ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099cc:	e72c      	b.n	8009828 <_svfiprintf_r+0x2c>
 80099ce:	ab03      	add	r3, sp, #12
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	462a      	mov	r2, r5
 80099d4:	4b05      	ldr	r3, [pc, #20]	@ (80099ec <_svfiprintf_r+0x1f0>)
 80099d6:	a904      	add	r1, sp, #16
 80099d8:	4638      	mov	r0, r7
 80099da:	f7fe f8d3 	bl	8007b84 <_printf_i>
 80099de:	e7ed      	b.n	80099bc <_svfiprintf_r+0x1c0>
 80099e0:	0800a5b2 	.word	0x0800a5b2
 80099e4:	0800a5bc 	.word	0x0800a5bc
 80099e8:	08007655 	.word	0x08007655
 80099ec:	08009745 	.word	0x08009745
 80099f0:	0800a5b8 	.word	0x0800a5b8

080099f4 <__sflush_r>:
 80099f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fc:	0716      	lsls	r6, r2, #28
 80099fe:	4605      	mov	r5, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d454      	bmi.n	8009aae <__sflush_r+0xba>
 8009a04:	684b      	ldr	r3, [r1, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dc02      	bgt.n	8009a10 <__sflush_r+0x1c>
 8009a0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dd48      	ble.n	8009aa2 <__sflush_r+0xae>
 8009a10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d045      	beq.n	8009aa2 <__sflush_r+0xae>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a1c:	682f      	ldr	r7, [r5, #0]
 8009a1e:	6a21      	ldr	r1, [r4, #32]
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	d030      	beq.n	8009a86 <__sflush_r+0x92>
 8009a24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	0759      	lsls	r1, r3, #29
 8009a2a:	d505      	bpl.n	8009a38 <__sflush_r+0x44>
 8009a2c:	6863      	ldr	r3, [r4, #4]
 8009a2e:	1ad2      	subs	r2, r2, r3
 8009a30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a32:	b10b      	cbz	r3, 8009a38 <__sflush_r+0x44>
 8009a34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a36:	1ad2      	subs	r2, r2, r3
 8009a38:	2300      	movs	r3, #0
 8009a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a3c:	6a21      	ldr	r1, [r4, #32]
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b0      	blx	r6
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	d106      	bne.n	8009a56 <__sflush_r+0x62>
 8009a48:	6829      	ldr	r1, [r5, #0]
 8009a4a:	291d      	cmp	r1, #29
 8009a4c:	d82b      	bhi.n	8009aa6 <__sflush_r+0xb2>
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009af8 <__sflush_r+0x104>)
 8009a50:	40ca      	lsrs	r2, r1
 8009a52:	07d6      	lsls	r6, r2, #31
 8009a54:	d527      	bpl.n	8009aa6 <__sflush_r+0xb2>
 8009a56:	2200      	movs	r2, #0
 8009a58:	6062      	str	r2, [r4, #4]
 8009a5a:	04d9      	lsls	r1, r3, #19
 8009a5c:	6922      	ldr	r2, [r4, #16]
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	d504      	bpl.n	8009a6c <__sflush_r+0x78>
 8009a62:	1c42      	adds	r2, r0, #1
 8009a64:	d101      	bne.n	8009a6a <__sflush_r+0x76>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	b903      	cbnz	r3, 8009a6c <__sflush_r+0x78>
 8009a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a6e:	602f      	str	r7, [r5, #0]
 8009a70:	b1b9      	cbz	r1, 8009aa2 <__sflush_r+0xae>
 8009a72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a76:	4299      	cmp	r1, r3
 8009a78:	d002      	beq.n	8009a80 <__sflush_r+0x8c>
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f7ff f9e8 	bl	8008e50 <_free_r>
 8009a80:	2300      	movs	r3, #0
 8009a82:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a84:	e00d      	b.n	8009aa2 <__sflush_r+0xae>
 8009a86:	2301      	movs	r3, #1
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b0      	blx	r6
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	1c50      	adds	r0, r2, #1
 8009a90:	d1c9      	bne.n	8009a26 <__sflush_r+0x32>
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0c6      	beq.n	8009a26 <__sflush_r+0x32>
 8009a98:	2b1d      	cmp	r3, #29
 8009a9a:	d001      	beq.n	8009aa0 <__sflush_r+0xac>
 8009a9c:	2b16      	cmp	r3, #22
 8009a9e:	d11e      	bne.n	8009ade <__sflush_r+0xea>
 8009aa0:	602f      	str	r7, [r5, #0]
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e022      	b.n	8009aec <__sflush_r+0xf8>
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aaa:	b21b      	sxth	r3, r3
 8009aac:	e01b      	b.n	8009ae6 <__sflush_r+0xf2>
 8009aae:	690f      	ldr	r7, [r1, #16]
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	d0f6      	beq.n	8009aa2 <__sflush_r+0xae>
 8009ab4:	0793      	lsls	r3, r2, #30
 8009ab6:	680e      	ldr	r6, [r1, #0]
 8009ab8:	bf08      	it	eq
 8009aba:	694b      	ldreq	r3, [r1, #20]
 8009abc:	600f      	str	r7, [r1, #0]
 8009abe:	bf18      	it	ne
 8009ac0:	2300      	movne	r3, #0
 8009ac2:	eba6 0807 	sub.w	r8, r6, r7
 8009ac6:	608b      	str	r3, [r1, #8]
 8009ac8:	f1b8 0f00 	cmp.w	r8, #0
 8009acc:	dde9      	ble.n	8009aa2 <__sflush_r+0xae>
 8009ace:	6a21      	ldr	r1, [r4, #32]
 8009ad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ad2:	4643      	mov	r3, r8
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b0      	blx	r6
 8009ada:	2800      	cmp	r0, #0
 8009adc:	dc08      	bgt.n	8009af0 <__sflush_r+0xfc>
 8009ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af0:	4407      	add	r7, r0
 8009af2:	eba8 0800 	sub.w	r8, r8, r0
 8009af6:	e7e7      	b.n	8009ac8 <__sflush_r+0xd4>
 8009af8:	20400001 	.word	0x20400001

08009afc <_fflush_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	690b      	ldr	r3, [r1, #16]
 8009b00:	4605      	mov	r5, r0
 8009b02:	460c      	mov	r4, r1
 8009b04:	b913      	cbnz	r3, 8009b0c <_fflush_r+0x10>
 8009b06:	2500      	movs	r5, #0
 8009b08:	4628      	mov	r0, r5
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	b118      	cbz	r0, 8009b16 <_fflush_r+0x1a>
 8009b0e:	6a03      	ldr	r3, [r0, #32]
 8009b10:	b90b      	cbnz	r3, 8009b16 <_fflush_r+0x1a>
 8009b12:	f7fe f9e1 	bl	8007ed8 <__sinit>
 8009b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0f3      	beq.n	8009b06 <_fflush_r+0xa>
 8009b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b20:	07d0      	lsls	r0, r2, #31
 8009b22:	d404      	bmi.n	8009b2e <_fflush_r+0x32>
 8009b24:	0599      	lsls	r1, r3, #22
 8009b26:	d402      	bmi.n	8009b2e <_fflush_r+0x32>
 8009b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b2a:	f7fe fb08 	bl	800813e <__retarget_lock_acquire_recursive>
 8009b2e:	4628      	mov	r0, r5
 8009b30:	4621      	mov	r1, r4
 8009b32:	f7ff ff5f 	bl	80099f4 <__sflush_r>
 8009b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b38:	07da      	lsls	r2, r3, #31
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	d4e4      	bmi.n	8009b08 <_fflush_r+0xc>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	059b      	lsls	r3, r3, #22
 8009b42:	d4e1      	bmi.n	8009b08 <_fflush_r+0xc>
 8009b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b46:	f7fe fafb 	bl	8008140 <__retarget_lock_release_recursive>
 8009b4a:	e7dd      	b.n	8009b08 <_fflush_r+0xc>

08009b4c <fiprintf>:
 8009b4c:	b40e      	push	{r1, r2, r3}
 8009b4e:	b503      	push	{r0, r1, lr}
 8009b50:	4601      	mov	r1, r0
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	4805      	ldr	r0, [pc, #20]	@ (8009b6c <fiprintf+0x20>)
 8009b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5a:	6800      	ldr	r0, [r0, #0]
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	f000 f8c3 	bl	8009ce8 <_vfiprintf_r>
 8009b62:	b002      	add	sp, #8
 8009b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b68:	b003      	add	sp, #12
 8009b6a:	4770      	bx	lr
 8009b6c:	20000020 	.word	0x20000020

08009b70 <memmove>:
 8009b70:	4288      	cmp	r0, r1
 8009b72:	b510      	push	{r4, lr}
 8009b74:	eb01 0402 	add.w	r4, r1, r2
 8009b78:	d902      	bls.n	8009b80 <memmove+0x10>
 8009b7a:	4284      	cmp	r4, r0
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	d807      	bhi.n	8009b90 <memmove+0x20>
 8009b80:	1e43      	subs	r3, r0, #1
 8009b82:	42a1      	cmp	r1, r4
 8009b84:	d008      	beq.n	8009b98 <memmove+0x28>
 8009b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b8e:	e7f8      	b.n	8009b82 <memmove+0x12>
 8009b90:	4402      	add	r2, r0
 8009b92:	4601      	mov	r1, r0
 8009b94:	428a      	cmp	r2, r1
 8009b96:	d100      	bne.n	8009b9a <memmove+0x2a>
 8009b98:	bd10      	pop	{r4, pc}
 8009b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ba2:	e7f7      	b.n	8009b94 <memmove+0x24>

08009ba4 <_sbrk_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d06      	ldr	r5, [pc, #24]	@ (8009bc0 <_sbrk_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	f7f8 f8ba 	bl	8001d28 <_sbrk>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_sbrk_r+0x1a>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_sbrk_r+0x1a>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	20004f70 	.word	0x20004f70

08009bc4 <abort>:
 8009bc4:	b508      	push	{r3, lr}
 8009bc6:	2006      	movs	r0, #6
 8009bc8:	f000 fa62 	bl	800a090 <raise>
 8009bcc:	2001      	movs	r0, #1
 8009bce:	f7f8 f833 	bl	8001c38 <_exit>

08009bd2 <_calloc_r>:
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	fba1 5402 	umull	r5, r4, r1, r2
 8009bd8:	b934      	cbnz	r4, 8009be8 <_calloc_r+0x16>
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7ff f9ac 	bl	8008f38 <_malloc_r>
 8009be0:	4606      	mov	r6, r0
 8009be2:	b928      	cbnz	r0, 8009bf0 <_calloc_r+0x1e>
 8009be4:	4630      	mov	r0, r6
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	220c      	movs	r2, #12
 8009bea:	6002      	str	r2, [r0, #0]
 8009bec:	2600      	movs	r6, #0
 8009bee:	e7f9      	b.n	8009be4 <_calloc_r+0x12>
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	f7fe fa26 	bl	8008044 <memset>
 8009bf8:	e7f4      	b.n	8009be4 <_calloc_r+0x12>

08009bfa <__ascii_mbtowc>:
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	b901      	cbnz	r1, 8009c00 <__ascii_mbtowc+0x6>
 8009bfe:	a901      	add	r1, sp, #4
 8009c00:	b142      	cbz	r2, 8009c14 <__ascii_mbtowc+0x1a>
 8009c02:	b14b      	cbz	r3, 8009c18 <__ascii_mbtowc+0x1e>
 8009c04:	7813      	ldrb	r3, [r2, #0]
 8009c06:	600b      	str	r3, [r1, #0]
 8009c08:	7812      	ldrb	r2, [r2, #0]
 8009c0a:	1e10      	subs	r0, r2, #0
 8009c0c:	bf18      	it	ne
 8009c0e:	2001      	movne	r0, #1
 8009c10:	b002      	add	sp, #8
 8009c12:	4770      	bx	lr
 8009c14:	4610      	mov	r0, r2
 8009c16:	e7fb      	b.n	8009c10 <__ascii_mbtowc+0x16>
 8009c18:	f06f 0001 	mvn.w	r0, #1
 8009c1c:	e7f8      	b.n	8009c10 <__ascii_mbtowc+0x16>

08009c1e <_realloc_r>:
 8009c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c22:	4607      	mov	r7, r0
 8009c24:	4614      	mov	r4, r2
 8009c26:	460d      	mov	r5, r1
 8009c28:	b921      	cbnz	r1, 8009c34 <_realloc_r+0x16>
 8009c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	4611      	mov	r1, r2
 8009c30:	f7ff b982 	b.w	8008f38 <_malloc_r>
 8009c34:	b92a      	cbnz	r2, 8009c42 <_realloc_r+0x24>
 8009c36:	f7ff f90b 	bl	8008e50 <_free_r>
 8009c3a:	4625      	mov	r5, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c42:	f000 fa41 	bl	800a0c8 <_malloc_usable_size_r>
 8009c46:	4284      	cmp	r4, r0
 8009c48:	4606      	mov	r6, r0
 8009c4a:	d802      	bhi.n	8009c52 <_realloc_r+0x34>
 8009c4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c50:	d8f4      	bhi.n	8009c3c <_realloc_r+0x1e>
 8009c52:	4621      	mov	r1, r4
 8009c54:	4638      	mov	r0, r7
 8009c56:	f7ff f96f 	bl	8008f38 <_malloc_r>
 8009c5a:	4680      	mov	r8, r0
 8009c5c:	b908      	cbnz	r0, 8009c62 <_realloc_r+0x44>
 8009c5e:	4645      	mov	r5, r8
 8009c60:	e7ec      	b.n	8009c3c <_realloc_r+0x1e>
 8009c62:	42b4      	cmp	r4, r6
 8009c64:	4622      	mov	r2, r4
 8009c66:	4629      	mov	r1, r5
 8009c68:	bf28      	it	cs
 8009c6a:	4632      	movcs	r2, r6
 8009c6c:	f7fe fa69 	bl	8008142 <memcpy>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4638      	mov	r0, r7
 8009c74:	f7ff f8ec 	bl	8008e50 <_free_r>
 8009c78:	e7f1      	b.n	8009c5e <_realloc_r+0x40>

08009c7a <__ascii_wctomb>:
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	b141      	cbz	r1, 8009c92 <__ascii_wctomb+0x18>
 8009c80:	2aff      	cmp	r2, #255	@ 0xff
 8009c82:	d904      	bls.n	8009c8e <__ascii_wctomb+0x14>
 8009c84:	228a      	movs	r2, #138	@ 0x8a
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8c:	4770      	bx	lr
 8009c8e:	700a      	strb	r2, [r1, #0]
 8009c90:	2001      	movs	r0, #1
 8009c92:	4770      	bx	lr

08009c94 <__sfputc_r>:
 8009c94:	6893      	ldr	r3, [r2, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	b410      	push	{r4}
 8009c9c:	6093      	str	r3, [r2, #8]
 8009c9e:	da08      	bge.n	8009cb2 <__sfputc_r+0x1e>
 8009ca0:	6994      	ldr	r4, [r2, #24]
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	db01      	blt.n	8009caa <__sfputc_r+0x16>
 8009ca6:	290a      	cmp	r1, #10
 8009ca8:	d103      	bne.n	8009cb2 <__sfputc_r+0x1e>
 8009caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cae:	f000 b933 	b.w	8009f18 <__swbuf_r>
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	1c58      	adds	r0, r3, #1
 8009cb6:	6010      	str	r0, [r2, #0]
 8009cb8:	7019      	strb	r1, [r3, #0]
 8009cba:	4608      	mov	r0, r1
 8009cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <__sfputs_r>:
 8009cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	4614      	mov	r4, r2
 8009cca:	18d5      	adds	r5, r2, r3
 8009ccc:	42ac      	cmp	r4, r5
 8009cce:	d101      	bne.n	8009cd4 <__sfputs_r+0x12>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e007      	b.n	8009ce4 <__sfputs_r+0x22>
 8009cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd8:	463a      	mov	r2, r7
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7ff ffda 	bl	8009c94 <__sfputc_r>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d1f3      	bne.n	8009ccc <__sfputs_r+0xa>
 8009ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ce8 <_vfiprintf_r>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	460d      	mov	r5, r1
 8009cee:	b09d      	sub	sp, #116	@ 0x74
 8009cf0:	4614      	mov	r4, r2
 8009cf2:	4698      	mov	r8, r3
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	b118      	cbz	r0, 8009d00 <_vfiprintf_r+0x18>
 8009cf8:	6a03      	ldr	r3, [r0, #32]
 8009cfa:	b90b      	cbnz	r3, 8009d00 <_vfiprintf_r+0x18>
 8009cfc:	f7fe f8ec 	bl	8007ed8 <__sinit>
 8009d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d02:	07d9      	lsls	r1, r3, #31
 8009d04:	d405      	bmi.n	8009d12 <_vfiprintf_r+0x2a>
 8009d06:	89ab      	ldrh	r3, [r5, #12]
 8009d08:	059a      	lsls	r2, r3, #22
 8009d0a:	d402      	bmi.n	8009d12 <_vfiprintf_r+0x2a>
 8009d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d0e:	f7fe fa16 	bl	800813e <__retarget_lock_acquire_recursive>
 8009d12:	89ab      	ldrh	r3, [r5, #12]
 8009d14:	071b      	lsls	r3, r3, #28
 8009d16:	d501      	bpl.n	8009d1c <_vfiprintf_r+0x34>
 8009d18:	692b      	ldr	r3, [r5, #16]
 8009d1a:	b99b      	cbnz	r3, 8009d44 <_vfiprintf_r+0x5c>
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 f938 	bl	8009f94 <__swsetup_r>
 8009d24:	b170      	cbz	r0, 8009d44 <_vfiprintf_r+0x5c>
 8009d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d28:	07dc      	lsls	r4, r3, #31
 8009d2a:	d504      	bpl.n	8009d36 <_vfiprintf_r+0x4e>
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	b01d      	add	sp, #116	@ 0x74
 8009d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	0598      	lsls	r0, r3, #22
 8009d3a:	d4f7      	bmi.n	8009d2c <_vfiprintf_r+0x44>
 8009d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d3e:	f7fe f9ff 	bl	8008140 <__retarget_lock_release_recursive>
 8009d42:	e7f3      	b.n	8009d2c <_vfiprintf_r+0x44>
 8009d44:	2300      	movs	r3, #0
 8009d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d52:	2330      	movs	r3, #48	@ 0x30
 8009d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f04 <_vfiprintf_r+0x21c>
 8009d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d5c:	f04f 0901 	mov.w	r9, #1
 8009d60:	4623      	mov	r3, r4
 8009d62:	469a      	mov	sl, r3
 8009d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d68:	b10a      	cbz	r2, 8009d6e <_vfiprintf_r+0x86>
 8009d6a:	2a25      	cmp	r2, #37	@ 0x25
 8009d6c:	d1f9      	bne.n	8009d62 <_vfiprintf_r+0x7a>
 8009d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d72:	d00b      	beq.n	8009d8c <_vfiprintf_r+0xa4>
 8009d74:	465b      	mov	r3, fp
 8009d76:	4622      	mov	r2, r4
 8009d78:	4629      	mov	r1, r5
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ffa1 	bl	8009cc2 <__sfputs_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	f000 80a7 	beq.w	8009ed4 <_vfiprintf_r+0x1ec>
 8009d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d88:	445a      	add	r2, fp
 8009d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 809f 	beq.w	8009ed4 <_vfiprintf_r+0x1ec>
 8009d96:	2300      	movs	r3, #0
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da0:	f10a 0a01 	add.w	sl, sl, #1
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	9307      	str	r3, [sp, #28]
 8009da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dae:	4654      	mov	r4, sl
 8009db0:	2205      	movs	r2, #5
 8009db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db6:	4853      	ldr	r0, [pc, #332]	@ (8009f04 <_vfiprintf_r+0x21c>)
 8009db8:	f7f6 fa2a 	bl	8000210 <memchr>
 8009dbc:	9a04      	ldr	r2, [sp, #16]
 8009dbe:	b9d8      	cbnz	r0, 8009df8 <_vfiprintf_r+0x110>
 8009dc0:	06d1      	lsls	r1, r2, #27
 8009dc2:	bf44      	itt	mi
 8009dc4:	2320      	movmi	r3, #32
 8009dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dca:	0713      	lsls	r3, r2, #28
 8009dcc:	bf44      	itt	mi
 8009dce:	232b      	movmi	r3, #43	@ 0x2b
 8009dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dda:	d015      	beq.n	8009e08 <_vfiprintf_r+0x120>
 8009ddc:	9a07      	ldr	r2, [sp, #28]
 8009dde:	4654      	mov	r4, sl
 8009de0:	2000      	movs	r0, #0
 8009de2:	f04f 0c0a 	mov.w	ip, #10
 8009de6:	4621      	mov	r1, r4
 8009de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dec:	3b30      	subs	r3, #48	@ 0x30
 8009dee:	2b09      	cmp	r3, #9
 8009df0:	d94b      	bls.n	8009e8a <_vfiprintf_r+0x1a2>
 8009df2:	b1b0      	cbz	r0, 8009e22 <_vfiprintf_r+0x13a>
 8009df4:	9207      	str	r2, [sp, #28]
 8009df6:	e014      	b.n	8009e22 <_vfiprintf_r+0x13a>
 8009df8:	eba0 0308 	sub.w	r3, r0, r8
 8009dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	46a2      	mov	sl, r4
 8009e06:	e7d2      	b.n	8009dae <_vfiprintf_r+0xc6>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	1d19      	adds	r1, r3, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	9103      	str	r1, [sp, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	bfbb      	ittet	lt
 8009e14:	425b      	neglt	r3, r3
 8009e16:	f042 0202 	orrlt.w	r2, r2, #2
 8009e1a:	9307      	strge	r3, [sp, #28]
 8009e1c:	9307      	strlt	r3, [sp, #28]
 8009e1e:	bfb8      	it	lt
 8009e20:	9204      	strlt	r2, [sp, #16]
 8009e22:	7823      	ldrb	r3, [r4, #0]
 8009e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e26:	d10a      	bne.n	8009e3e <_vfiprintf_r+0x156>
 8009e28:	7863      	ldrb	r3, [r4, #1]
 8009e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e2c:	d132      	bne.n	8009e94 <_vfiprintf_r+0x1ac>
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	1d1a      	adds	r2, r3, #4
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	9203      	str	r2, [sp, #12]
 8009e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e3a:	3402      	adds	r4, #2
 8009e3c:	9305      	str	r3, [sp, #20]
 8009e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f14 <_vfiprintf_r+0x22c>
 8009e42:	7821      	ldrb	r1, [r4, #0]
 8009e44:	2203      	movs	r2, #3
 8009e46:	4650      	mov	r0, sl
 8009e48:	f7f6 f9e2 	bl	8000210 <memchr>
 8009e4c:	b138      	cbz	r0, 8009e5e <_vfiprintf_r+0x176>
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	eba0 000a 	sub.w	r0, r0, sl
 8009e54:	2240      	movs	r2, #64	@ 0x40
 8009e56:	4082      	lsls	r2, r0
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	3401      	adds	r4, #1
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e62:	4829      	ldr	r0, [pc, #164]	@ (8009f08 <_vfiprintf_r+0x220>)
 8009e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e68:	2206      	movs	r2, #6
 8009e6a:	f7f6 f9d1 	bl	8000210 <memchr>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d03f      	beq.n	8009ef2 <_vfiprintf_r+0x20a>
 8009e72:	4b26      	ldr	r3, [pc, #152]	@ (8009f0c <_vfiprintf_r+0x224>)
 8009e74:	bb1b      	cbnz	r3, 8009ebe <_vfiprintf_r+0x1d6>
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	3307      	adds	r3, #7
 8009e7a:	f023 0307 	bic.w	r3, r3, #7
 8009e7e:	3308      	adds	r3, #8
 8009e80:	9303      	str	r3, [sp, #12]
 8009e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e84:	443b      	add	r3, r7
 8009e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e88:	e76a      	b.n	8009d60 <_vfiprintf_r+0x78>
 8009e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e8e:	460c      	mov	r4, r1
 8009e90:	2001      	movs	r0, #1
 8009e92:	e7a8      	b.n	8009de6 <_vfiprintf_r+0xfe>
 8009e94:	2300      	movs	r3, #0
 8009e96:	3401      	adds	r4, #1
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	f04f 0c0a 	mov.w	ip, #10
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea6:	3a30      	subs	r2, #48	@ 0x30
 8009ea8:	2a09      	cmp	r2, #9
 8009eaa:	d903      	bls.n	8009eb4 <_vfiprintf_r+0x1cc>
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0c6      	beq.n	8009e3e <_vfiprintf_r+0x156>
 8009eb0:	9105      	str	r1, [sp, #20]
 8009eb2:	e7c4      	b.n	8009e3e <_vfiprintf_r+0x156>
 8009eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eb8:	4604      	mov	r4, r0
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e7f0      	b.n	8009ea0 <_vfiprintf_r+0x1b8>
 8009ebe:	ab03      	add	r3, sp, #12
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	462a      	mov	r2, r5
 8009ec4:	4b12      	ldr	r3, [pc, #72]	@ (8009f10 <_vfiprintf_r+0x228>)
 8009ec6:	a904      	add	r1, sp, #16
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f7fd fbc3 	bl	8007654 <_printf_float>
 8009ece:	4607      	mov	r7, r0
 8009ed0:	1c78      	adds	r0, r7, #1
 8009ed2:	d1d6      	bne.n	8009e82 <_vfiprintf_r+0x19a>
 8009ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ed6:	07d9      	lsls	r1, r3, #31
 8009ed8:	d405      	bmi.n	8009ee6 <_vfiprintf_r+0x1fe>
 8009eda:	89ab      	ldrh	r3, [r5, #12]
 8009edc:	059a      	lsls	r2, r3, #22
 8009ede:	d402      	bmi.n	8009ee6 <_vfiprintf_r+0x1fe>
 8009ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ee2:	f7fe f92d 	bl	8008140 <__retarget_lock_release_recursive>
 8009ee6:	89ab      	ldrh	r3, [r5, #12]
 8009ee8:	065b      	lsls	r3, r3, #25
 8009eea:	f53f af1f 	bmi.w	8009d2c <_vfiprintf_r+0x44>
 8009eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ef0:	e71e      	b.n	8009d30 <_vfiprintf_r+0x48>
 8009ef2:	ab03      	add	r3, sp, #12
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	462a      	mov	r2, r5
 8009ef8:	4b05      	ldr	r3, [pc, #20]	@ (8009f10 <_vfiprintf_r+0x228>)
 8009efa:	a904      	add	r1, sp, #16
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7fd fe41 	bl	8007b84 <_printf_i>
 8009f02:	e7e4      	b.n	8009ece <_vfiprintf_r+0x1e6>
 8009f04:	0800a5b2 	.word	0x0800a5b2
 8009f08:	0800a5bc 	.word	0x0800a5bc
 8009f0c:	08007655 	.word	0x08007655
 8009f10:	08009cc3 	.word	0x08009cc3
 8009f14:	0800a5b8 	.word	0x0800a5b8

08009f18 <__swbuf_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b118      	cbz	r0, 8009f2a <__swbuf_r+0x12>
 8009f22:	6a03      	ldr	r3, [r0, #32]
 8009f24:	b90b      	cbnz	r3, 8009f2a <__swbuf_r+0x12>
 8009f26:	f7fd ffd7 	bl	8007ed8 <__sinit>
 8009f2a:	69a3      	ldr	r3, [r4, #24]
 8009f2c:	60a3      	str	r3, [r4, #8]
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	071a      	lsls	r2, r3, #28
 8009f32:	d501      	bpl.n	8009f38 <__swbuf_r+0x20>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	b943      	cbnz	r3, 8009f4a <__swbuf_r+0x32>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f000 f82a 	bl	8009f94 <__swsetup_r>
 8009f40:	b118      	cbz	r0, 8009f4a <__swbuf_r+0x32>
 8009f42:	f04f 37ff 	mov.w	r7, #4294967295
 8009f46:	4638      	mov	r0, r7
 8009f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	6922      	ldr	r2, [r4, #16]
 8009f4e:	1a98      	subs	r0, r3, r2
 8009f50:	6963      	ldr	r3, [r4, #20]
 8009f52:	b2f6      	uxtb	r6, r6
 8009f54:	4283      	cmp	r3, r0
 8009f56:	4637      	mov	r7, r6
 8009f58:	dc05      	bgt.n	8009f66 <__swbuf_r+0x4e>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7ff fdcd 	bl	8009afc <_fflush_r>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d1ed      	bne.n	8009f42 <__swbuf_r+0x2a>
 8009f66:	68a3      	ldr	r3, [r4, #8]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	60a3      	str	r3, [r4, #8]
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	6022      	str	r2, [r4, #0]
 8009f72:	701e      	strb	r6, [r3, #0]
 8009f74:	6962      	ldr	r2, [r4, #20]
 8009f76:	1c43      	adds	r3, r0, #1
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d004      	beq.n	8009f86 <__swbuf_r+0x6e>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	07db      	lsls	r3, r3, #31
 8009f80:	d5e1      	bpl.n	8009f46 <__swbuf_r+0x2e>
 8009f82:	2e0a      	cmp	r6, #10
 8009f84:	d1df      	bne.n	8009f46 <__swbuf_r+0x2e>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f7ff fdb7 	bl	8009afc <_fflush_r>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d0d9      	beq.n	8009f46 <__swbuf_r+0x2e>
 8009f92:	e7d6      	b.n	8009f42 <__swbuf_r+0x2a>

08009f94 <__swsetup_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4b29      	ldr	r3, [pc, #164]	@ (800a03c <__swsetup_r+0xa8>)
 8009f98:	4605      	mov	r5, r0
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	b118      	cbz	r0, 8009fa8 <__swsetup_r+0x14>
 8009fa0:	6a03      	ldr	r3, [r0, #32]
 8009fa2:	b90b      	cbnz	r3, 8009fa8 <__swsetup_r+0x14>
 8009fa4:	f7fd ff98 	bl	8007ed8 <__sinit>
 8009fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fac:	0719      	lsls	r1, r3, #28
 8009fae:	d422      	bmi.n	8009ff6 <__swsetup_r+0x62>
 8009fb0:	06da      	lsls	r2, r3, #27
 8009fb2:	d407      	bmi.n	8009fc4 <__swsetup_r+0x30>
 8009fb4:	2209      	movs	r2, #9
 8009fb6:	602a      	str	r2, [r5, #0]
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc2:	e033      	b.n	800a02c <__swsetup_r+0x98>
 8009fc4:	0758      	lsls	r0, r3, #29
 8009fc6:	d512      	bpl.n	8009fee <__swsetup_r+0x5a>
 8009fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fca:	b141      	cbz	r1, 8009fde <__swsetup_r+0x4a>
 8009fcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fd0:	4299      	cmp	r1, r3
 8009fd2:	d002      	beq.n	8009fda <__swsetup_r+0x46>
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f7fe ff3b 	bl	8008e50 <_free_r>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	6063      	str	r3, [r4, #4]
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	f043 0308 	orr.w	r3, r3, #8
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	b94b      	cbnz	r3, 800a00e <__swsetup_r+0x7a>
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a004:	d003      	beq.n	800a00e <__swsetup_r+0x7a>
 800a006:	4621      	mov	r1, r4
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 f88b 	bl	800a124 <__smakebuf_r>
 800a00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a012:	f013 0201 	ands.w	r2, r3, #1
 800a016:	d00a      	beq.n	800a02e <__swsetup_r+0x9a>
 800a018:	2200      	movs	r2, #0
 800a01a:	60a2      	str	r2, [r4, #8]
 800a01c:	6962      	ldr	r2, [r4, #20]
 800a01e:	4252      	negs	r2, r2
 800a020:	61a2      	str	r2, [r4, #24]
 800a022:	6922      	ldr	r2, [r4, #16]
 800a024:	b942      	cbnz	r2, 800a038 <__swsetup_r+0xa4>
 800a026:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a02a:	d1c5      	bne.n	8009fb8 <__swsetup_r+0x24>
 800a02c:	bd38      	pop	{r3, r4, r5, pc}
 800a02e:	0799      	lsls	r1, r3, #30
 800a030:	bf58      	it	pl
 800a032:	6962      	ldrpl	r2, [r4, #20]
 800a034:	60a2      	str	r2, [r4, #8]
 800a036:	e7f4      	b.n	800a022 <__swsetup_r+0x8e>
 800a038:	2000      	movs	r0, #0
 800a03a:	e7f7      	b.n	800a02c <__swsetup_r+0x98>
 800a03c:	20000020 	.word	0x20000020

0800a040 <_raise_r>:
 800a040:	291f      	cmp	r1, #31
 800a042:	b538      	push	{r3, r4, r5, lr}
 800a044:	4605      	mov	r5, r0
 800a046:	460c      	mov	r4, r1
 800a048:	d904      	bls.n	800a054 <_raise_r+0x14>
 800a04a:	2316      	movs	r3, #22
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a056:	b112      	cbz	r2, 800a05e <_raise_r+0x1e>
 800a058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a05c:	b94b      	cbnz	r3, 800a072 <_raise_r+0x32>
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 f830 	bl	800a0c4 <_getpid_r>
 800a064:	4622      	mov	r2, r4
 800a066:	4601      	mov	r1, r0
 800a068:	4628      	mov	r0, r5
 800a06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a06e:	f000 b817 	b.w	800a0a0 <_kill_r>
 800a072:	2b01      	cmp	r3, #1
 800a074:	d00a      	beq.n	800a08c <_raise_r+0x4c>
 800a076:	1c59      	adds	r1, r3, #1
 800a078:	d103      	bne.n	800a082 <_raise_r+0x42>
 800a07a:	2316      	movs	r3, #22
 800a07c:	6003      	str	r3, [r0, #0]
 800a07e:	2001      	movs	r0, #1
 800a080:	e7e7      	b.n	800a052 <_raise_r+0x12>
 800a082:	2100      	movs	r1, #0
 800a084:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a088:	4620      	mov	r0, r4
 800a08a:	4798      	blx	r3
 800a08c:	2000      	movs	r0, #0
 800a08e:	e7e0      	b.n	800a052 <_raise_r+0x12>

0800a090 <raise>:
 800a090:	4b02      	ldr	r3, [pc, #8]	@ (800a09c <raise+0xc>)
 800a092:	4601      	mov	r1, r0
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	f7ff bfd3 	b.w	800a040 <_raise_r>
 800a09a:	bf00      	nop
 800a09c:	20000020 	.word	0x20000020

0800a0a0 <_kill_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d07      	ldr	r5, [pc, #28]	@ (800a0c0 <_kill_r+0x20>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	602b      	str	r3, [r5, #0]
 800a0ae:	f7f7 fdb3 	bl	8001c18 <_kill>
 800a0b2:	1c43      	adds	r3, r0, #1
 800a0b4:	d102      	bne.n	800a0bc <_kill_r+0x1c>
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	b103      	cbz	r3, 800a0bc <_kill_r+0x1c>
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	bd38      	pop	{r3, r4, r5, pc}
 800a0be:	bf00      	nop
 800a0c0:	20004f70 	.word	0x20004f70

0800a0c4 <_getpid_r>:
 800a0c4:	f7f7 bda0 	b.w	8001c08 <_getpid>

0800a0c8 <_malloc_usable_size_r>:
 800a0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0cc:	1f18      	subs	r0, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bfbc      	itt	lt
 800a0d2:	580b      	ldrlt	r3, [r1, r0]
 800a0d4:	18c0      	addlt	r0, r0, r3
 800a0d6:	4770      	bx	lr

0800a0d8 <__swhatbuf_r>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	b096      	sub	sp, #88	@ 0x58
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	461e      	mov	r6, r3
 800a0e8:	da0d      	bge.n	800a106 <__swhatbuf_r+0x2e>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0f0:	f04f 0100 	mov.w	r1, #0
 800a0f4:	bf14      	ite	ne
 800a0f6:	2340      	movne	r3, #64	@ 0x40
 800a0f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	6031      	str	r1, [r6, #0]
 800a100:	602b      	str	r3, [r5, #0]
 800a102:	b016      	add	sp, #88	@ 0x58
 800a104:	bd70      	pop	{r4, r5, r6, pc}
 800a106:	466a      	mov	r2, sp
 800a108:	f000 f848 	bl	800a19c <_fstat_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	dbec      	blt.n	800a0ea <__swhatbuf_r+0x12>
 800a110:	9901      	ldr	r1, [sp, #4]
 800a112:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a116:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a11a:	4259      	negs	r1, r3
 800a11c:	4159      	adcs	r1, r3
 800a11e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a122:	e7eb      	b.n	800a0fc <__swhatbuf_r+0x24>

0800a124 <__smakebuf_r>:
 800a124:	898b      	ldrh	r3, [r1, #12]
 800a126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a128:	079d      	lsls	r5, r3, #30
 800a12a:	4606      	mov	r6, r0
 800a12c:	460c      	mov	r4, r1
 800a12e:	d507      	bpl.n	800a140 <__smakebuf_r+0x1c>
 800a130:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	2301      	movs	r3, #1
 800a13a:	6163      	str	r3, [r4, #20]
 800a13c:	b003      	add	sp, #12
 800a13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a140:	ab01      	add	r3, sp, #4
 800a142:	466a      	mov	r2, sp
 800a144:	f7ff ffc8 	bl	800a0d8 <__swhatbuf_r>
 800a148:	9f00      	ldr	r7, [sp, #0]
 800a14a:	4605      	mov	r5, r0
 800a14c:	4639      	mov	r1, r7
 800a14e:	4630      	mov	r0, r6
 800a150:	f7fe fef2 	bl	8008f38 <_malloc_r>
 800a154:	b948      	cbnz	r0, 800a16a <__smakebuf_r+0x46>
 800a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15a:	059a      	lsls	r2, r3, #22
 800a15c:	d4ee      	bmi.n	800a13c <__smakebuf_r+0x18>
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	f043 0302 	orr.w	r3, r3, #2
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	e7e2      	b.n	800a130 <__smakebuf_r+0xc>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	6020      	str	r0, [r4, #0]
 800a16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a17a:	b15b      	cbz	r3, 800a194 <__smakebuf_r+0x70>
 800a17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a180:	4630      	mov	r0, r6
 800a182:	f000 f81d 	bl	800a1c0 <_isatty_r>
 800a186:	b128      	cbz	r0, 800a194 <__smakebuf_r+0x70>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	431d      	orrs	r5, r3
 800a198:	81a5      	strh	r5, [r4, #12]
 800a19a:	e7cf      	b.n	800a13c <__smakebuf_r+0x18>

0800a19c <_fstat_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4d07      	ldr	r5, [pc, #28]	@ (800a1bc <_fstat_r+0x20>)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	f7f7 fd95 	bl	8001cd8 <_fstat>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d102      	bne.n	800a1b8 <_fstat_r+0x1c>
 800a1b2:	682b      	ldr	r3, [r5, #0]
 800a1b4:	b103      	cbz	r3, 800a1b8 <_fstat_r+0x1c>
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20004f70 	.word	0x20004f70

0800a1c0 <_isatty_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d06      	ldr	r5, [pc, #24]	@ (800a1dc <_isatty_r+0x1c>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7f7 fd94 	bl	8001cf8 <_isatty>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_isatty_r+0x1a>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_isatty_r+0x1a>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	20004f70 	.word	0x20004f70

0800a1e0 <_init>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	bf00      	nop
 800a1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e6:	bc08      	pop	{r3}
 800a1e8:	469e      	mov	lr, r3
 800a1ea:	4770      	bx	lr

0800a1ec <_fini>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr
