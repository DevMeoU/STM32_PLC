
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800a080  0800a080  0000b080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a55c  0800a55c  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a55c  0800a55c  0000b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a564  0800a564  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a564  0800a564  0000b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a568  0800a568  0000b568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a56c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004da4  200001dc  0800a748  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f80  0800a748  0000cf80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016542  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b8a  00000000  00000000  0002274e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000262d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  00027558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261ae  00000000  00000000  0002837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001708e  00000000  00000000  0004e52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e25ab  00000000  00000000  000655b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147b63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c94  00000000  00000000  00147ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0014d83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a064 	.word	0x0800a064

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800a064 	.word	0x0800a064

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <PLC_ProcessTask>:
static uint8_t checksum(const uint8_t * data, size_t len);

QueueHandle_t xQueuePLC = NULL;

void PLC_ProcessTask(void *param)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    (void)param;
    while (1)
    {
		mPrint("PLC Task is running...\n");
 8000f1c:	487b      	ldr	r0, [pc, #492]	@ (800110c <PLC_ProcessTask+0x1f8>)
 8000f1e:	f000 fa0d 	bl	800133c <mPrint>
        PLC_Read_Pin_Input();
 8000f22:	f000 f9ad 	bl	8001280 <PLC_Read_Pin_Input>
        /*--------------NetWork 1 -----------*/

        volatile uint8_t I0_0sl0 = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
        volatile static uint8_t checkEU0 = 1;
        if (!(I0_0))
 8000f2a:	4b79      	ldr	r3, [pc, #484]	@ (8001110 <PLC_ProcessTask+0x1fc>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <PLC_ProcessTask+0x26>
        {
            checkEU0 = 0;
 8000f34:	4b77      	ldr	r3, [pc, #476]	@ (8001114 <PLC_ProcessTask+0x200>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
        }
        if ((!checkEU0) && (I0_0))
 8000f3a:	4b76      	ldr	r3, [pc, #472]	@ (8001114 <PLC_ProcessTask+0x200>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d109      	bne.n	8000f58 <PLC_ProcessTask+0x44>
 8000f44:	4b72      	ldr	r3, [pc, #456]	@ (8001110 <PLC_ProcessTask+0x1fc>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <PLC_ProcessTask+0x44>
        {
            checkEU0 = 1;
 8000f4e:	4b71      	ldr	r3, [pc, #452]	@ (8001114 <PLC_ProcessTask+0x200>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
            I0_0sl0 = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	75fb      	strb	r3, [r7, #23]
        }
        M0_0 = (((I0_0sl0 + M0_0)) * !I0_1);
 8000f58:	4b6f      	ldr	r3, [pc, #444]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b6a      	ldr	r3, [pc, #424]	@ (8001110 <PLC_ProcessTask+0x1fc>)
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	fb12 f303 	smulbb	r3, r2, r3
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b66      	ldr	r3, [pc, #408]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000f80:	701a      	strb	r2, [r3, #0]
        if (M0_0 > 0)
 8000f82:	4b65      	ldr	r3, [pc, #404]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <PLC_ProcessTask+0x80>
        {
            M0_0 = 1;
 8000f8c:	4b62      	ldr	r3, [pc, #392]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e002      	b.n	8000f9a <PLC_ProcessTask+0x86>
        }
        else
        {
            M0_0 = 0;
 8000f94:	4b60      	ldr	r3, [pc, #384]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
        }
        /*--------------NetWork 2 -----------*/
        if ((M0_0))
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <PLC_ProcessTask+0x9a>
            u16VW1 = AI[0]; // Đọc giá trị cảm biến từ AI[0] (DMA cập nhật)
 8000fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800111c <PLC_ProcessTask+0x208>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b5d      	ldr	r3, [pc, #372]	@ (8001120 <PLC_ProcessTask+0x20c>)
 8000fac:	805a      	strh	r2, [r3, #2]
        M1_1 = (M0_0);
 8000fae:	4b5a      	ldr	r3, [pc, #360]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000fb6:	725a      	strb	r2, [r3, #9]
        if (M1_1 > 0)
 8000fb8:	4b57      	ldr	r3, [pc, #348]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000fba:	7a5b      	ldrb	r3, [r3, #9]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <PLC_ProcessTask+0xb6>
        {
            M1_1 = 1;
 8000fc2:	4b55      	ldr	r3, [pc, #340]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	725a      	strb	r2, [r3, #9]
 8000fc8:	e002      	b.n	8000fd0 <PLC_ProcessTask+0xbc>
        }
        else
        {
            M1_1 = 0;
 8000fca:	4b53      	ldr	r3, [pc, #332]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	725a      	strb	r2, [r3, #9]
        }
        /*--------------NetWork 3 -----------*/

        if ((M0_0))
 8000fd0:	4b51      	ldr	r3, [pc, #324]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <PLC_ProcessTask+0xd2>
            u32VD[0] = (uint32_t)u16VW1;
 8000fda:	4b51      	ldr	r3, [pc, #324]	@ (8001120 <PLC_ProcessTask+0x20c>)
 8000fdc:	885b      	ldrh	r3, [r3, #2]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b50      	ldr	r3, [pc, #320]	@ (8001124 <PLC_ProcessTask+0x210>)
 8000fe4:	601a      	str	r2, [r3, #0]
        /*--------------NetWork 4 -----------*/

        if ((M0_0))
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8001118 <PLC_ProcessTask+0x204>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <PLC_ProcessTask+0xee>
            f32VD[0] = (float)u32VD[0];
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8001124 <PLC_ProcessTask+0x210>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8001128 <PLC_ProcessTask+0x214>)
 8000ffe:	edc3 7a00 	vstr	s15, [r3]
        /*--------------NetWork 5 -----------*/

        if ((M0_0))
 8001002:	4b45      	ldr	r3, [pc, #276]	@ (8001118 <PLC_ProcessTask+0x204>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00d      	beq.n	8001028 <PLC_ProcessTask+0x114>
            f32VD[0] = (f32VD[0] / 4095.0f) * 3300.0f; // Đổi ADC 12bit (0..4095) về mV (Vref=3.3V)
 800100c:	4b46      	ldr	r3, [pc, #280]	@ (8001128 <PLC_ProcessTask+0x214>)
 800100e:	ed93 7a00 	vldr	s14, [r3]
 8001012:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800112c <PLC_ProcessTask+0x218>
 8001016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001130 <PLC_ProcessTask+0x21c>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	4b41      	ldr	r3, [pc, #260]	@ (8001128 <PLC_ProcessTask+0x214>)
 8001024:	edc3 7a00 	vstr	s15, [r3]
        /*--------------NetWork 6 -----------*/

        if ((M0_0))
 8001028:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <PLC_ProcessTask+0x204>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00d      	beq.n	800104e <PLC_ProcessTask+0x13a>
            f32VD[0] = (f32VD[0] - 500.0f) / 10.0f; // Đổi mV sang độ C cho LM35 (10mV/°C, offset 500mV)
 8001032:	4b3d      	ldr	r3, [pc, #244]	@ (8001128 <PLC_ProcessTask+0x214>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001134 <PLC_ProcessTask+0x220>
 800103c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001040:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	4b37      	ldr	r3, [pc, #220]	@ (8001128 <PLC_ProcessTask+0x214>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
        /*--------------NetWork 7 -----------*/

        volatile uint8_t u8Compare0 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	75bb      	strb	r3, [r7, #22]
        u8Compare0 = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	75bb      	strb	r3, [r7, #22]
        if (f32VD[0] >= 50.0)
 8001056:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <PLC_ProcessTask+0x214>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001138 <PLC_ProcessTask+0x224>
 8001060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	db01      	blt.n	800106e <PLC_ProcessTask+0x15a>
        {
            u8Compare0 = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	75bb      	strb	r3, [r7, #22]
        }
        Q0_0 = (M0_0 * u8Compare0);
 800106e:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <PLC_ProcessTask+0x204>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	7dbb      	ldrb	r3, [r7, #22]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	fb12 f303 	smulbb	r3, r2, r3
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <PLC_ProcessTask+0x228>)
 8001080:	701a      	strb	r2, [r3, #0]
        if (Q0_0 > 0)
 8001082:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <PLC_ProcessTask+0x228>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <PLC_ProcessTask+0x180>
        {
            Q0_0 = 1;
 800108c:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <PLC_ProcessTask+0x228>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e002      	b.n	800109a <PLC_ProcessTask+0x186>
        }
        else
        {
            Q0_0 = 0;
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <PLC_ProcessTask+0x228>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
        }
        PLC_Write_Pin_Output();
 800109a:	f000 f915 	bl	80012c8 <PLC_Write_Pin_Output>

        /* Set data to queue */
        PLC_DataFrame_t sendFrame;
        if (xQueuePLC != NULL)
 800109e:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <PLC_ProcessTask+0x22c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01c      	beq.n	80010e0 <PLC_ProcessTask+0x1cc>
        {
            sendFrame.led_status = Q0_0; // Set LED status
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <PLC_ProcessTask+0x228>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	733b      	strb	r3, [r7, #12]
            sendFrame.reserved[0] = 0; // Reserved bytes
 80010ae:	2300      	movs	r3, #0
 80010b0:	737b      	strb	r3, [r7, #13]
            sendFrame.reserved[1] = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	73bb      	strb	r3, [r7, #14]
            sendFrame.reserved[2] = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
            sendFrame.sensor_value.fsensor_v = f32VD[0];
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <PLC_ProcessTask+0x214>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]

            if (xQueueSend(xQueuePLC, &sendFrame, portMAX_DELAY) != pdPASS)
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <PLC_ProcessTask+0x22c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f107 010c 	add.w	r1, r7, #12
 80010c8:	2300      	movs	r3, #0
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295
 80010ce:	f003 fec9 	bl	8004e64 <xQueueGenericSend>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d006      	beq.n	80010e6 <PLC_ProcessTask+0x1d2>
            {
                mPrint("Failed to send data to queue\n");
 80010d8:	481a      	ldr	r0, [pc, #104]	@ (8001144 <PLC_ProcessTask+0x230>)
 80010da:	f000 f92f 	bl	800133c <mPrint>
 80010de:	e002      	b.n	80010e6 <PLC_ProcessTask+0x1d2>
            }
        }
        else
        {
            mPrint("Queue is NULL\n");
 80010e0:	4819      	ldr	r0, [pc, #100]	@ (8001148 <PLC_ProcessTask+0x234>)
 80010e2:	f000 f92b 	bl	800133c <mPrint>
        }

        mPrint("LED Status: %d, Temperature Sensor Value: %.2f °C\n", Q0_0, f32VD[0]);
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <PLC_ProcessTask+0x228>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	461c      	mov	r4, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <PLC_ProcessTask+0x214>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa48 	bl	8000588 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4621      	mov	r1, r4
 80010fe:	4813      	ldr	r0, [pc, #76]	@ (800114c <PLC_ProcessTask+0x238>)
 8001100:	f000 f91c 	bl	800133c <mPrint>

        osDelay(100); // Delay to simulate PLC cycle time
 8001104:	2064      	movs	r0, #100	@ 0x64
 8001106:	f003 fc63 	bl	80049d0 <osDelay>
    {
 800110a:	e707      	b.n	8000f1c <PLC_ProcessTask+0x8>
 800110c:	0800a080 	.word	0x0800a080
 8001110:	200001f8 	.word	0x200001f8
 8001114:	20000000 	.word	0x20000000
 8001118:	20000238 	.word	0x20000238
 800111c:	20000210 	.word	0x20000210
 8001120:	20000250 	.word	0x20000250
 8001124:	20000260 	.word	0x20000260
 8001128:	20000280 	.word	0x20000280
 800112c:	457ff000 	.word	0x457ff000
 8001130:	454e4000 	.word	0x454e4000
 8001134:	43fa0000 	.word	0x43fa0000
 8001138:	42480000 	.word	0x42480000
 800113c:	20000220 	.word	0x20000220
 8001140:	200002a0 	.word	0x200002a0
 8001144:	0800a098 	.word	0x0800a098
 8001148:	0800a0b8 	.word	0x0800a0b8
 800114c:	0800a0c8 	.word	0x0800a0c8

08001150 <PLC_SendDataTask>:
    }
}

void PLC_SendDataTask(void * argument) {
 8001150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001154:	b088      	sub	sp, #32
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
    
    for (;;)
    {
        mPrint("Notify task running...\n");
 800115a:	4844      	ldr	r0, [pc, #272]	@ (800126c <PLC_SendDataTask+0x11c>)
 800115c:	f000 f8ee 	bl	800133c <mPrint>

        if (xQueuePLC != NULL)
 8001160:	4b43      	ldr	r3, [pc, #268]	@ (8001270 <PLC_SendDataTask+0x120>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d07a      	beq.n	800125e <PLC_SendDataTask+0x10e>
        {
 8001168:	466b      	mov	r3, sp
 800116a:	461e      	mov	r6, r3
            PLC_DataFrame_t receivedData;
            if (xQueueReceive(xQueuePLC, &receivedData, portMAX_DELAY) == pdTRUE)
 800116c:	4b40      	ldr	r3, [pc, #256]	@ (8001270 <PLC_SendDataTask+0x120>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f107 010c 	add.w	r1, r7, #12
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	4618      	mov	r0, r3
 800117a:	f004 f813 	bl	80051a4 <xQueueReceive>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d112      	bne.n	80011aa <PLC_SendDataTask+0x5a>
            {
                mSendCommand((uint8_t *)&receivedData, sizeof(PLC_DataFrame_t));
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2108      	movs	r1, #8
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f906 	bl	800139c <mSendCommand>
                mPrint("Received data: LED Status: %d, Sensor Value: %.2f\n", receivedData.led_status, receivedData.sensor_value.fsensor_v);
 8001190:	7b3b      	ldrb	r3, [r7, #12]
 8001192:	469a      	mov	sl, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9f6 	bl	8000588 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4651      	mov	r1, sl
 80011a2:	4834      	ldr	r0, [pc, #208]	@ (8001274 <PLC_SendDataTask+0x124>)
 80011a4:	f000 f8ca 	bl	800133c <mPrint>
 80011a8:	e002      	b.n	80011b0 <PLC_SendDataTask+0x60>
            }
            else
            {
                mPrint("Failed to receive data from queue\n");
 80011aa:	4833      	ldr	r0, [pc, #204]	@ (8001278 <PLC_SendDataTask+0x128>)
 80011ac:	f000 f8c6 	bl	800133c <mPrint>
            }

            const uint8_t LEN = sizeof(PLC_DataFrame_t);
 80011b0:	2308      	movs	r3, #8
 80011b2:	77fb      	strb	r3, [r7, #31]
            uint8_t cs = (LEN + checksum((uint8_t *)&receivedData, LEN)) & 0xFF;
 80011b4:	7ffa      	ldrb	r2, [r7, #31]
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f89b 	bl	80012f8 <checksum>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	4413      	add	r3, r2
 80011ca:	77bb      	strb	r3, [r7, #30]
            
            uint8_t frame[LEN + 3];
 80011cc:	7ffb      	ldrb	r3, [r7, #31]
 80011ce:	3302      	adds	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	7ffb      	ldrb	r3, [r7, #31]
 80011d4:	3303      	adds	r3, #3
 80011d6:	2200      	movs	r2, #0
 80011d8:	461c      	mov	r4, r3
 80011da:	4615      	mov	r5, r2
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	00eb      	lsls	r3, r5, #3
 80011e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011ea:	00e2      	lsls	r2, r4, #3
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	3303      	adds	r3, #3
 80011f0:	2200      	movs	r2, #0
 80011f2:	4698      	mov	r8, r3
 80011f4:	4691      	mov	r9, r2
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800120a:	7ffb      	ldrb	r3, [r7, #31]
 800120c:	3303      	adds	r3, #3
 800120e:	3307      	adds	r3, #7
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	ebad 0d03 	sub.w	sp, sp, r3
 8001218:	466b      	mov	r3, sp
 800121a:	3300      	adds	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
            memset(frame, 0, sizeof(frame));
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	3303      	adds	r3, #3
 8001222:	461a      	mov	r2, r3
 8001224:	2100      	movs	r1, #0
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f006 fe4e 	bl	8007ec8 <memset>

            frame[0] = 0xAA; // Start byte
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	22aa      	movs	r2, #170	@ 0xaa
 8001230:	701a      	strb	r2, [r3, #0]
            frame[1] = LEN; // Length of the data
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	7ffa      	ldrb	r2, [r7, #31]
 8001236:	705a      	strb	r2, [r3, #1]
            memcpy(&frame[2], (uint8_t *)&receivedData, LEN);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3302      	adds	r3, #2
 800123c:	7ffa      	ldrb	r2, [r7, #31]
 800123e:	f107 010c 	add.w	r1, r7, #12
 8001242:	4618      	mov	r0, r3
 8001244:	f006 febf 	bl	8007fc6 <memcpy>
            frame[LEN+2] = cs;
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	3302      	adds	r3, #2
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	7fb9      	ldrb	r1, [r7, #30]
 8001250:	54d1      	strb	r1, [r2, r3]
            mSendCommand(frame, sizeof(PLC_DataFrame_t)+3);
 8001252:	210b      	movs	r1, #11
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f000 f8a1 	bl	800139c <mSendCommand>
 800125a:	46b5      	mov	sp, r6
 800125c:	e002      	b.n	8001264 <PLC_SendDataTask+0x114>
        }
        else
        {
            mPrint("Queue is NULL in Notify Task\n");
 800125e:	4807      	ldr	r0, [pc, #28]	@ (800127c <PLC_SendDataTask+0x12c>)
 8001260:	f000 f86c 	bl	800133c <mPrint>
        }

        osDelay(250);
 8001264:	20fa      	movs	r0, #250	@ 0xfa
 8001266:	f003 fbb3 	bl	80049d0 <osDelay>
        mPrint("Notify task running...\n");
 800126a:	e776      	b.n	800115a <PLC_SendDataTask+0xa>
 800126c:	0800a0fc 	.word	0x0800a0fc
 8001270:	200002a0 	.word	0x200002a0
 8001274:	0800a114 	.word	0x0800a114
 8001278:	0800a148 	.word	0x0800a148
 800127c:	0800a16c 	.word	0x0800a16c

08001280 <PLC_Read_Pin_Input>:
    }
    /* USER CODE END 5 */
}

void PLC_Read_Pin_Input(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    I0_0 = !HAL_GPIO_ReadPin(I0_0_PORT, I0_0_PIN);
 8001284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001288:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <PLC_Read_Pin_Input+0x40>)
 800128a:	f002 f907 	bl	800349c <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <PLC_Read_Pin_Input+0x44>)
 800129e:	701a      	strb	r2, [r3, #0]
    I0_1 = !HAL_GPIO_ReadPin(I0_1_PORT, I0_1_PIN);
 80012a0:	2101      	movs	r1, #1
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <PLC_Read_Pin_Input+0x40>)
 80012a4:	f002 f8fa 	bl	800349c <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf0c      	ite	eq
 80012ae:	2301      	moveq	r3, #1
 80012b0:	2300      	movne	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <PLC_Read_Pin_Input+0x44>)
 80012b8:	705a      	strb	r2, [r3, #1]
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020800 	.word	0x40020800
 80012c4:	200001f8 	.word	0x200001f8

080012c8 <PLC_Write_Pin_Output>:


void PLC_Write_Pin_Output(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    if (Q0_0 >= 1)
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <PLC_Write_Pin_Output+0x28>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <PLC_Write_Pin_Output+0x1a>
    {
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, ENABLE); /* Set Q0_0 pin for LED */
 80012d6:	2201      	movs	r2, #1
 80012d8:	2120      	movs	r1, #32
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <PLC_Write_Pin_Output+0x2c>)
 80012dc:	f002 f8f6 	bl	80034cc <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE); /* Reset Q0_0 pin for LED */
    }
}
 80012e0:	e004      	b.n	80012ec <PLC_Write_Pin_Output+0x24>
        HAL_GPIO_WritePin(Q0_0_PORT, Q0_0_PIN, DISABLE); /* Reset Q0_0 pin for LED */
 80012e2:	2200      	movs	r2, #0
 80012e4:	2120      	movs	r1, #32
 80012e6:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <PLC_Write_Pin_Output+0x2c>)
 80012e8:	f002 f8f0 	bl	80034cc <HAL_GPIO_WritePin>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000220 	.word	0x20000220
 80012f4:	40020000 	.word	0x40020000

080012f8 <checksum>:

static uint8_t checksum(const uint8_t * data, size_t len)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    uint16_t sum = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < len; i++) 
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	e00a      	b.n	8001322 <checksum+0x2a>
        sum += data[i];
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	4413      	add	r3, r2
 800131a:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < len; i++) 
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3301      	adds	r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3f0      	bcc.n	800130c <checksum+0x14>
    return sum & 0xFF;
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	b2db      	uxtb	r3, r3
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <mPrint>:
#include "mPrint.h"

char mPrintBuffer[PRINT_BUFFER_SIZE];

void mPrint (const char * format, ...)
{
 800133c:	b40f      	push	{r0, r1, r2, r3}
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
    memset(mPrintBuffer, 0, sizeof(mPrintBuffer));
 8001344:	22fa      	movs	r2, #250	@ 0xfa
 8001346:	2100      	movs	r1, #0
 8001348:	4812      	ldr	r0, [pc, #72]	@ (8001394 <mPrint+0x58>)
 800134a:	f006 fdbd 	bl	8007ec8 <memset>
    va_list args;
    va_start(args, format);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(mPrintBuffer, sizeof(mPrintBuffer), format, args);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	21fa      	movs	r1, #250	@ 0xfa
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <mPrint+0x58>)
 800135c:	f006 fda6 	bl	8007eac <vsniprintf>
 8001360:	6078      	str	r0, [r7, #4]
    va_end(args);
    if (len < 0) len = 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da01      	bge.n	800136c <mPrint+0x30>
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
    if (len >= sizeof(mPrintBuffer)) len = sizeof(mPrintBuffer) - 1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001370:	d901      	bls.n	8001376 <mPrint+0x3a>
 8001372:	23f9      	movs	r3, #249	@ 0xf9
 8001374:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)mPrintBuffer, (uint16_t)len, 100);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	b29a      	uxth	r2, r3
 800137a:	2364      	movs	r3, #100	@ 0x64
 800137c:	4905      	ldr	r1, [pc, #20]	@ (8001394 <mPrint+0x58>)
 800137e:	4806      	ldr	r0, [pc, #24]	@ (8001398 <mPrint+0x5c>)
 8001380:	f002 ff46 	bl	8004210 <HAL_UART_Transmit>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800138e:	b004      	add	sp, #16
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200002a4 	.word	0x200002a4
 8001398:	200003e8 	.word	0x200003e8

0800139c <mSendCommand>:

void mSendCommand(const uint8_t *data, size_t len) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) return;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00a      	beq.n	80013c2 <mSendCommand+0x26>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <mSendCommand+0x26>
    HAL_UART_Transmit(&huart1, data, len, 100); // Gửi toàn bộ dữ liệu nhị phân
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	2364      	movs	r3, #100	@ 0x64
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4804      	ldr	r0, [pc, #16]	@ (80013cc <mSendCommand+0x30>)
 80013bc:	f002 ff28 	bl	8004210 <HAL_UART_Transmit>
 80013c0:	e000      	b.n	80013c4 <mSendCommand+0x28>
    if (data == NULL || len == 0) return;
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200003a0 	.word	0x200003a0

080013d0 <main>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);

static void PLC_Init(void);

int main(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af02      	add	r7, sp, #8
    HAL_Init();
 80013d6:	f000 fc99 	bl	8001d0c <HAL_Init>
    SystemClock_Config();
 80013da:	f000 f843 	bl	8001464 <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80013de:	f000 f909 	bl	80015f4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80013e2:	f000 f8dd 	bl	80015a0 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 80013e6:	f000 f8b1 	bl	800154c <MX_USART1_UART_Init>
    MX_DMA_Init();
 80013ea:	f000 f97f 	bl	80016ec <MX_DMA_Init>
    MX_ADC1_Init();
 80013ee:	f000 f99d 	bl	800172c <MX_ADC1_Init>

    osKernelInitialize();
 80013f2:	f003 fac9 	bl	8004988 <osKernelInitialize>

    PLC_Init();
 80013f6:	f000 fa09 	bl	800180c <PLC_Init>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AI, 8);
 80013fa:	2208      	movs	r2, #8
 80013fc:	4913      	ldr	r1, [pc, #76]	@ (800144c <main+0x7c>)
 80013fe:	4814      	ldr	r0, [pc, #80]	@ (8001450 <main+0x80>)
 8001400:	f000 fe4a 	bl	8002098 <HAL_ADC_Start_DMA>

    BaseType_t notifyTaskHandle = xTaskCreate(
 8001404:	2300      	movs	r3, #0
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	2303      	movs	r3, #3
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001412:	4910      	ldr	r1, [pc, #64]	@ (8001454 <main+0x84>)
 8001414:	4810      	ldr	r0, [pc, #64]	@ (8001458 <main+0x88>)
 8001416:	f004 f975 	bl	8005704 <xTaskCreate>
 800141a:	6078      	str	r0, [r7, #4]
        1024 * 1,
        NULL,
        3,
        NULL
    );
    BaseType_t plcOprateTaskHandle = xTaskCreate(
 800141c:	2300      	movs	r3, #0
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2302      	movs	r3, #2
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800142a:	490c      	ldr	r1, [pc, #48]	@ (800145c <main+0x8c>)
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <main+0x90>)
 800142e:	f004 f969 	bl	8005704 <xTaskCreate>
 8001432:	6038      	str	r0, [r7, #0]
        NULL,
        2,
        NULL
    );

    if (notifyTaskHandle != pdPASS || plcOprateTaskHandle != pdPASS)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <main+0x70>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d001      	beq.n	8001444 <main+0x74>
    {
        Error_Handler();
 8001440:	f000 f9f8 	bl	8001834 <Error_Handler>
    }

    /* Start scheduler */
    vTaskStartScheduler();
 8001444:	f004 fada 	bl	80059fc <vTaskStartScheduler>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    while (1) {}
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <main+0x78>
 800144c:	20000210 	.word	0x20000210
 8001450:	20000430 	.word	0x20000430
 8001454:	0800a18c 	.word	0x0800a18c
 8001458:	08001151 	.word	0x08001151
 800145c:	0800a19c 	.word	0x0800a19c
 8001460:	08000f15 	.word	0x08000f15

08001464 <SystemClock_Config>:
}

void SystemClock_Config(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	@ 0x50
 8001468:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2234      	movs	r2, #52	@ 0x34
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f006 fd28 	bl	8007ec8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <SystemClock_Config+0xe0>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a2c      	ldr	r2, [pc, #176]	@ (8001544 <SystemClock_Config+0xe0>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
 8001498:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <SystemClock_Config+0xe0>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <SystemClock_Config+0xe4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <SystemClock_Config+0xe4>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <SystemClock_Config+0xe4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c8:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 360;
 80014d8:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80014dc:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014de:	2302      	movs	r3, #2
 80014e0:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(& RCC_OscInitStruct) != HAL_OK) {
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fba0 	bl	8003c34 <HAL_RCC_OscConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x9a>
        Error_Handler();
 80014fa:	f000 f99b 	bl	8001834 <Error_Handler>
    }

    if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80014fe:	f001 ffff 	bl	8003500 <HAL_PWREx_EnableOverDrive>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0xa8>
        Error_Handler();
 8001508:	f000 f994 	bl	8001834 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800150c:	230f      	movs	r3, #15
 800150e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2302      	movs	r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001518:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800151c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(& RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2105      	movs	r1, #5
 800152a:	4618      	mov	r0, r3
 800152c:	f002 f838 	bl	80035a0 <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0xd6>
        Error_Handler();
 8001536:	f000 f97d 	bl	8001834 <Error_Handler>
    }
}
 800153a:	bf00      	nop
 800153c:	3750      	adds	r7, #80	@ 0x50
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <MX_USART1_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(& huart1) != HAL_OK) {
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_USART1_UART_Init+0x4c>)
 8001584:	f002 fdf4 	bl	8004170 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 800158e:	f000 f951 	bl	8001834 <Error_Handler>
    }
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200003a0 	.word	0x200003a0
 800159c:	40011000 	.word	0x40011000

080015a0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <MX_USART2_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(& huart2) != HAL_OK) {
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART2_UART_Init+0x4c>)
 80015d8:	f002 fdca 	bl	8004170 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80015e2:	f000 f927 	bl	8001834 <Error_Handler>
    }
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200003e8 	.word	0x200003e8
 80015f0:	40004400 	.word	0x40004400

080015f4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a33      	ldr	r2, [pc, #204]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <MX_GPIO_Init+0xec>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <MX_GPIO_Init+0xec>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a2c      	ldr	r2, [pc, #176]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b2a      	ldr	r3, [pc, #168]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a25      	ldr	r2, [pc, #148]	@ (80016e0 <MX_GPIO_Init+0xec>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a1e      	ldr	r2, [pc, #120]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <MX_GPIO_Init+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	21e0      	movs	r1, #224	@ 0xe0
 800167e:	4819      	ldr	r0, [pc, #100]	@ (80016e4 <MX_GPIO_Init+0xf0>)
 8001680:	f001 ff24 	bl	80034cc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin Start */
    GPIO_InitStruct.Pin = B1_Pin;
 8001684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800168a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, & GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <MX_GPIO_Init+0xf4>)
 800169c:	f001 fd6a 	bl	8003174 <HAL_GPIO_Init>

    /*Configure GPIO pin : B2_Pin Stop */
    GPIO_InitStruct.Pin = B2_Pin;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B2_GPIO_Port, & GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <MX_GPIO_Init+0xf4>)
 80016b6:	f001 fd5d 	bl	8003174 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD2_Pin PA6 PA7 */
    GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 80016ba:	23e0      	movs	r3, #224	@ 0xe0
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, & GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <MX_GPIO_Init+0xf0>)
 80016d2:	f001 fd4f 	bl	8003174 <HAL_GPIO_Init>
}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020800 	.word	0x40020800

080016ec <MX_DMA_Init>:

void MX_DMA_Init(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_DMA_Init+0x3c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <MX_DMA_Init+0x3c>)
 80016fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_DMA_Init+0x3c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	2038      	movs	r0, #56	@ 0x38
 8001714:	f001 f987 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001718:	2038      	movs	r0, #56	@ 0x38
 800171a:	f001 f9a0 	bl	8002a5e <HAL_NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]

    hadc1.Instance = ADC1;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001740:	4a21      	ldr	r2, [pc, #132]	@ (80017c8 <MX_ADC1_Init+0x9c>)
 8001742:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001746:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800174a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <MX_ADC1_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_ADC1_Init+0x98>)
 800175a:	2201      	movs	r2, #1
 800175c:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_ADC1_Init+0x98>)
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <MX_ADC1_Init+0xa0>)
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_ADC1_Init+0x98>)
 800177a:	2201      	movs	r2, #1
 800177c:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = ENABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_ADC1_Init+0x98>)
 8001788:	2201      	movs	r2, #1
 800178a:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <MX_ADC1_Init+0x98>)
 800178e:	f000 fb2f 	bl	8001df0 <HAL_ADC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 8001798:	f000 f84c 	bl	8001834 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_1;
 800179c:	2301      	movs	r3, #1
 800179e:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_ADC1_Init+0x98>)
 80017ae:	f000 fda5 	bl	80022fc <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0x90>
    {
    Error_Handler();
 80017b8:	f000 f83c 	bl	8001834 <Error_Handler>
    }
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000430 	.word	0x20000430
 80017c8:	40012000 	.word	0x40012000
 80017cc:	0f000001 	.word	0x0f000001

080017d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a07      	ldr	r2, [pc, #28]	@ (80017fc <HAL_ADC_ConvCpltCallback+0x2c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d107      	bne.n	80017f2 <HAL_ADC_ConvCpltCallback+0x22>
        // buffer AI[0..7] đã đầy: xử lý hoặc đánh dấu
        DataReadyFlag = 1;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_ADC_ConvCpltCallback+0x30>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
        // khởi động lại DMA để tiếp tục đọc (nếu muốn vòng lặp liên tục)
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AI, 8);
 80017e8:	2208      	movs	r2, #8
 80017ea:	4906      	ldr	r1, [pc, #24]	@ (8001804 <HAL_ADC_ConvCpltCallback+0x34>)
 80017ec:	4806      	ldr	r0, [pc, #24]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x38>)
 80017ee:	f000 fc53 	bl	8002098 <HAL_ADC_Start_DMA>
    }
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012000 	.word	0x40012000
 8001800:	200004d8 	.word	0x200004d8
 8001804:	20000210 	.word	0x20000210
 8001808:	20000430 	.word	0x20000430

0800180c <PLC_Init>:

static void PLC_Init(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    xQueuePLC = xQueueCreate(10, sizeof(PLC_DataFrame_t));
 8001810:	2200      	movs	r2, #0
 8001812:	2108      	movs	r1, #8
 8001814:	200a      	movs	r0, #10
 8001816:	f003 fac6 	bl	8004da6 <xQueueGenericCreate>
 800181a:	4603      	mov	r3, r0
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <PLC_Init+0x24>)
 800181e:	6013      	str	r3, [r2, #0]

    if (xQueuePLC == NULL) {
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <PLC_Init+0x24>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <PLC_Init+0x20>
        Error_Handler();
 8001828:	f000 f804 	bl	8001834 <Error_Handler>
    }
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200002a0 	.word	0x200002a0

08001834 <Error_Handler>:

void Error_Handler(void) {
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_MspInit+0x54>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <HAL_MspInit+0x54>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001854:	6453      	str	r3, [r2, #68]	@ 0x44
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_MspInit+0x54>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_MspInit+0x54>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <HAL_MspInit+0x54>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <HAL_MspInit+0x54>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	210f      	movs	r1, #15
 8001882:	f06f 0001 	mvn.w	r0, #1
 8001886:	f001 f8ce 	bl	8002a26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a33      	ldr	r2, [pc, #204]	@ (8001984 <HAL_ADC_MspInit+0xec>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d15f      	bne.n	800197a <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <HAL_ADC_MspInit+0xf0>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	4a31      	ldr	r2, [pc, #196]	@ (8001988 <HAL_ADC_MspInit+0xf0>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001988 <HAL_ADC_MspInit+0xf0>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <HAL_ADC_MspInit+0xf0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a2a      	ldr	r2, [pc, #168]	@ (8001988 <HAL_ADC_MspInit+0xf0>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <HAL_ADC_MspInit+0xf0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018f2:	2302      	movs	r3, #2
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f6:	2303      	movs	r3, #3
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4821      	ldr	r0, [pc, #132]	@ (800198c <HAL_ADC_MspInit+0xf4>)
 8001906:	f001 fc35 	bl	8003174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 800190c:	4a21      	ldr	r2, [pc, #132]	@ (8001994 <HAL_ADC_MspInit+0xfc>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001910:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001924:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001928:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 800192c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001930:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001938:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 800193c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800194e:	4810      	ldr	r0, [pc, #64]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001950:	f001 f8a0 	bl	8002a94 <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800195a:	f7ff ff6b 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a0b      	ldr	r2, [pc, #44]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001962:	639a      	str	r2, [r3, #56]	@ 0x38
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <HAL_ADC_MspInit+0xf8>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2105      	movs	r1, #5
 800196e:	2012      	movs	r0, #18
 8001970:	f001 f859 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001974:	2012      	movs	r0, #18
 8001976:	f001 f872 	bl	8002a5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40012000 	.word	0x40012000
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	20000478 	.word	0x20000478
 8001994:	40026410 	.word	0x40026410

08001998 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a32      	ldr	r2, [pc, #200]	@ (8001a80 <HAL_UART_MspInit+0xe8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12d      	bne.n	8001a16 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	4a30      	ldr	r2, [pc, #192]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a29      	ldr	r2, [pc, #164]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a04:	2307      	movs	r3, #7
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481e      	ldr	r0, [pc, #120]	@ (8001a88 <HAL_UART_MspInit+0xf0>)
 8001a10:	f001 fbb0 	bl	8003174 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a14:	e030      	b.n	8001a78 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a8c <HAL_UART_MspInit+0xf4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d12b      	bne.n	8001a78 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 8001a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a0f      	ldr	r2, [pc, #60]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <HAL_UART_MspInit+0xec>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a58:	230c      	movs	r3, #12
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <HAL_UART_MspInit+0xf0>)
 8001a74:	f001 fb7e 	bl	8003174 <HAL_GPIO_Init>
}
 8001a78:	bf00      	nop
 8001a7a:	3730      	adds	r7, #48	@ 0x30
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40004400 	.word	0x40004400

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f971 	bl	8001db0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ace:	f004 fbe3 	bl	8006298 <xTaskGetSchedulerState>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d001      	beq.n	8001adc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ad8:	f005 f9de 	bl	8006e98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <ADC_IRQHandler+0x10>)
 8001ae6:	f000 f9c6 	bl	8001e76 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000430 	.word	0x20000430

08001af4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <DMA2_Stream0_IRQHandler+0x10>)
 8001afa:	f001 f8d1 	bl	8002ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000478 	.word	0x20000478

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_kill>:

int _kill(int pid, int sig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b22:	f006 fa23 	bl	8007f6c <__errno>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2216      	movs	r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe7 	bl	8001b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <_exit+0x12>

08001b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e00a      	b.n	8001b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b60:	f3af 8000 	nop.w
 8001b64:	4601      	mov	r1, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbf0      	blt.n	8001b60 <_read+0x12>
  }

  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e009      	b.n	8001bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	60ba      	str	r2, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf1      	blt.n	8001b9a <_write+0x12>
  }
  return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_close>:

int _close(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_isatty>:

int _isatty(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f006 f988 	bl	8007f6c <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20020000 	.word	0x20020000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200004dc 	.word	0x200004dc
 8001c90:	20004f80 	.word	0x20004f80

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cbc:	f7ff ffea 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f006 f947 	bl	8007f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fb71 	bl	80013d0 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cfc:	0800a56c 	.word	0x0800a56c
  ldr r2, =_sbss
 8001d00:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d04:	20004f80 	.word	0x20004f80

08001d08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <CAN1_RX0_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fe6b 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fd7e 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fe83 	bl	8002a7a <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 fe4b 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000004 	.word	0x20000004
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	20000008 	.word	0x20000008

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	200004e0 	.word	0x200004e0

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200004e0 	.word	0x200004e0

08001df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e033      	b.n	8001e6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fd42 	bl	8001898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e36:	f023 0302 	bic.w	r3, r3, #2
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fb8c 	bl	8002560 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5e:	e001      	b.n	8001e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d049      	beq.n	8001f40 <HAL_ADC_IRQHandler+0xca>
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d046      	beq.n	8001f40 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12b      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d127      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d119      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0220 	bic.w	r2, r2, #32
 8001f0a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fc4d 	bl	80017d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f06f 0212 	mvn.w	r2, #18
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d057      	beq.n	8002006 <HAL_ADC_IRQHandler+0x190>
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d054      	beq.n	8002006 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d139      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f88:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12b      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d124      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d11d      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d119      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fd0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fc30 	bl	800285c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 020c 	mvn.w	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002014:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d017      	beq.n	800204c <HAL_ADC_IRQHandler+0x1d6>
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d014      	beq.n	800204c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10d      	bne.n	800204c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f949 	bl	80022d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0201 	mvn.w	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800205a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d015      	beq.n	800208e <HAL_ADC_IRQHandler+0x218>
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d012      	beq.n	800208e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	f043 0202 	orr.w	r2, r3, #2
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f932 	bl	80022e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0220 	mvn.w	r2, #32
 800208c:	601a      	str	r2, [r3, #0]
  }
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Start_DMA+0x22>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e0eb      	b.n	8002292 <HAL_ADC_Start_DMA+0x1fa>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d018      	beq.n	8002102 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020e0:	4b6e      	ldr	r3, [pc, #440]	@ (800229c <HAL_ADC_Start_DMA+0x204>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	@ (80022a0 <HAL_ADC_Start_DMA+0x208>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9a      	lsrs	r2, r3, #18
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002110:	d107      	bne.n	8002122 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002120:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	f040 80a3 	bne.w	8002278 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800215c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002170:	d106      	bne.n	8002180 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f023 0206 	bic.w	r2, r3, #6
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
 800217e:	e002      	b.n	8002186 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800218e:	4b45      	ldr	r3, [pc, #276]	@ (80022a4 <HAL_ADC_Start_DMA+0x20c>)
 8002190:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	4a44      	ldr	r2, [pc, #272]	@ (80022a8 <HAL_ADC_Start_DMA+0x210>)
 8002198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219e:	4a43      	ldr	r2, [pc, #268]	@ (80022ac <HAL_ADC_Start_DMA+0x214>)
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	4a42      	ldr	r2, [pc, #264]	@ (80022b0 <HAL_ADC_Start_DMA+0x218>)
 80021a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021c2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021d2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	334c      	adds	r3, #76	@ 0x4c
 80021de:	4619      	mov	r1, r3
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f000 fd04 	bl	8002bf0 <HAL_DMA_Start_IT>
 80021e8:	4603      	mov	r3, r0
 80021ea:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d12a      	bne.n	800224e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2d      	ldr	r2, [pc, #180]	@ (80022b4 <HAL_ADC_Start_DMA+0x21c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d015      	beq.n	800222e <HAL_ADC_Start_DMA+0x196>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2c      	ldr	r2, [pc, #176]	@ (80022b8 <HAL_ADC_Start_DMA+0x220>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d105      	bne.n	8002218 <HAL_ADC_Start_DMA+0x180>
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_ADC_Start_DMA+0x20c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a27      	ldr	r2, [pc, #156]	@ (80022bc <HAL_ADC_Start_DMA+0x224>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d136      	bne.n	8002290 <HAL_ADC_Start_DMA+0x1f8>
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_ADC_Start_DMA+0x20c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d130      	bne.n	8002290 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d129      	bne.n	8002290 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	e020      	b.n	8002290 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a18      	ldr	r2, [pc, #96]	@ (80022b4 <HAL_ADC_Start_DMA+0x21c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d11b      	bne.n	8002290 <HAL_ADC_Start_DMA+0x1f8>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d114      	bne.n	8002290 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	e00b      	b.n	8002290 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	f043 0210 	orr.w	r2, r3, #16
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002290:	7ffb      	ldrb	r3, [r7, #31]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000004 	.word	0x20000004
 80022a0:	431bde83 	.word	0x431bde83
 80022a4:	40012300 	.word	0x40012300
 80022a8:	08002759 	.word	0x08002759
 80022ac:	08002813 	.word	0x08002813
 80022b0:	0800282f 	.word	0x0800282f
 80022b4:	40012000 	.word	0x40012000
 80022b8:	40012100 	.word	0x40012100
 80022bc:	40012200 	.word	0x40012200

080022c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1c>
 8002314:	2302      	movs	r3, #2
 8002316:	e113      	b.n	8002540 <HAL_ADC_ConfigChannel+0x244>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b09      	cmp	r3, #9
 8002326:	d925      	bls.n	8002374 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	2207      	movs	r2, #7
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43da      	mvns	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	400a      	ands	r2, r1
 800234c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68d9      	ldr	r1, [r3, #12]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	4603      	mov	r3, r0
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4403      	add	r3, r0
 8002366:	3b1e      	subs	r3, #30
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	e022      	b.n	80023ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	2207      	movs	r2, #7
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4403      	add	r3, r0
 80023b0:	409a      	lsls	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d824      	bhi.n	800240c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b05      	subs	r3, #5
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b05      	subs	r3, #5
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	@ 0x34
 800240a:	e04c      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d824      	bhi.n	800245e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b23      	subs	r3, #35	@ 0x23
 8002426:	221f      	movs	r2, #31
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43da      	mvns	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	400a      	ands	r2, r1
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4618      	mov	r0, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b23      	subs	r3, #35	@ 0x23
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
 800245c:	e023      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b41      	subs	r3, #65	@ 0x41
 8002470:	221f      	movs	r2, #31
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b41      	subs	r3, #65	@ 0x41
 800249a:	fa00 f203 	lsl.w	r2, r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a6:	4b29      	ldr	r3, [pc, #164]	@ (800254c <HAL_ADC_ConfigChannel+0x250>)
 80024a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_ADC_ConfigChannel+0x254>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d10f      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x1d8>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d10b      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_ADC_ConfigChannel+0x254>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d12b      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x23a>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_ADC_ConfigChannel+0x258>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x1f4>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b11      	cmp	r3, #17
 80024ee:	d122      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <HAL_ADC_ConfigChannel+0x258>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d111      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002512:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_ADC_ConfigChannel+0x25c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a11      	ldr	r2, [pc, #68]	@ (800255c <HAL_ADC_ConfigChannel+0x260>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	0c9a      	lsrs	r2, r3, #18
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002528:	e002      	b.n	8002530 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3b01      	subs	r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f9      	bne.n	800252a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40012300 	.word	0x40012300
 8002550:	40012000 	.word	0x40012000
 8002554:	10000012 	.word	0x10000012
 8002558:	20000004 	.word	0x20000004
 800255c:	431bde83 	.word	0x431bde83

08002560 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002568:	4b79      	ldr	r3, [pc, #484]	@ (8002750 <ADC_Init+0x1f0>)
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	4a58      	ldr	r2, [pc, #352]	@ (8002754 <ADC_Init+0x1f4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d022      	beq.n	800263e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6899      	ldr	r1, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e00f      	b.n	800265e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800265c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0202 	bic.w	r2, r2, #2
 800266c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7e1b      	ldrb	r3, [r3, #24]
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	3b01      	subs	r3, #1
 80026b8:	035a      	lsls	r2, r3, #13
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e007      	b.n	80026d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	051a      	lsls	r2, r3, #20
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002716:	025a      	lsls	r2, r3, #9
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	029a      	lsls	r2, r3, #10
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012300 	.word	0x40012300
 8002754:	0f000001 	.word	0x0f000001

08002758 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800276e:	2b00      	cmp	r3, #0
 8002770:	d13c      	bne.n	80027ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d12b      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002790:	2b00      	cmp	r3, #0
 8002792:	d127      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d119      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0220 	bic.w	r2, r2, #32
 80027be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7fe fff3 	bl	80017d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027ea:	e00e      	b.n	800280a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff fd75 	bl	80022e8 <HAL_ADC_ErrorCallback>
}
 80027fe:	e004      	b.n	800280a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff fd4d 	bl	80022c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2240      	movs	r2, #64	@ 0x40
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fd4a 	bl	80022e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	@ (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	@ (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	@ (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	@ 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	@ 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff29 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff3e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff31 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff f99a 	bl	8001dd8 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e099      	b.n	8002be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad0:	e00f      	b.n	8002af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad2:	f7ff f981 	bl	8001dd8 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d908      	bls.n	8002af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e078      	b.n	8002be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e8      	bne.n	8002ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4b38      	ldr	r3, [pc, #224]	@ (8002bec <HAL_DMA_Init+0x158>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	4313      	orrs	r3, r2
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f023 0307 	bic.w	r3, r3, #7
 8002b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d117      	bne.n	8002bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fa6f 	bl	800307c <DMA_CheckFifoParam>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2240      	movs	r2, #64	@ 0x40
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e016      	b.n	8002be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa26 	bl	8003010 <DMA_CalcBaseAndBitshift>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	223f      	movs	r2, #63	@ 0x3f
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	f010803f 	.word	0xf010803f

08002bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_DMA_Start_IT+0x26>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e040      	b.n	8002c98 <HAL_DMA_Start_IT+0xa8>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d12f      	bne.n	8002c8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9b8 	bl	8002fb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	223f      	movs	r2, #63	@ 0x3f
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0216 	orr.w	r2, r2, #22
 8002c5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e005      	b.n	8002c96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee8 <HAL_DMA_IRQHandler+0x248>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a8e      	ldr	r2, [pc, #568]	@ (8002eec <HAL_DMA_IRQHandler+0x24c>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cca:	2208      	movs	r2, #8
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d10:	2201      	movs	r2, #1
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	2201      	movs	r2, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	2204      	movs	r2, #4
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	2204      	movs	r2, #4
 8002d66:	409a      	lsls	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d043      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03c      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d024      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
 8002dce:	e01f      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
 8002de0:	e016      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0208 	bic.w	r2, r2, #8
 8002dfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e14:	2220      	movs	r2, #32
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 808f 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8087 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	2220      	movs	r2, #32
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d136      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0216 	bic.w	r2, r2, #22
 8002e58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x1da>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	223f      	movs	r2, #63	@ 0x3f
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d07e      	beq.n	8002fac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
        }
        return;
 8002eb6:	e079      	b.n	8002fac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01d      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d031      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
 8002ee4:	e02c      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004
 8002eec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d023      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e01e      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0210 	bic.w	r2, r2, #16
 8002f1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d032      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d307      	bcc.n	8002f88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f2      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x2cc>
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	e000      	b.n	8002fae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fac:	bf00      	nop
    }
  }
}
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b40      	cmp	r3, #64	@ 0x40
 8002fe0:	d108      	bne.n	8002ff4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ff2:	e007      	b.n	8003004 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3b10      	subs	r3, #16
 8003020:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <DMA_CalcBaseAndBitshift+0x64>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800302a:	4a13      	ldr	r2, [pc, #76]	@ (8003078 <DMA_CalcBaseAndBitshift+0x68>)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d909      	bls.n	8003052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003050:	e007      	b.n	8003062 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	aaaaaaab 	.word	0xaaaaaaab
 8003078:	0800a1dc 	.word	0x0800a1dc

0800307c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11f      	bne.n	80030d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d856      	bhi.n	800314a <DMA_CheckFifoParam+0xce>
 800309c:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <DMA_CheckFifoParam+0x28>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030b5 	.word	0x080030b5
 80030a8:	080030c7 	.word	0x080030c7
 80030ac:	080030b5 	.word	0x080030b5
 80030b0:	0800314b 	.word	0x0800314b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d046      	beq.n	800314e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e043      	b.n	800314e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ce:	d140      	bne.n	8003152 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d4:	e03d      	b.n	8003152 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030de:	d121      	bne.n	8003124 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d837      	bhi.n	8003156 <DMA_CheckFifoParam+0xda>
 80030e6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <DMA_CheckFifoParam+0x70>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	08003103 	.word	0x08003103
 80030f4:	080030fd 	.word	0x080030fd
 80030f8:	08003115 	.word	0x08003115
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003100:	e030      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d025      	beq.n	800315a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003112:	e022      	b.n	800315a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800311c:	d11f      	bne.n	800315e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003122:	e01c      	b.n	800315e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d903      	bls.n	8003132 <DMA_CheckFifoParam+0xb6>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d003      	beq.n	8003138 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003130:	e018      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      break;
 8003136:	e015      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	e00b      	b.n	8003162 <DMA_CheckFifoParam+0xe6>
      break;
 800314a:	bf00      	nop
 800314c:	e00a      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
 8003150:	e008      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 8003152:	bf00      	nop
 8003154:	e006      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 8003156:	bf00      	nop
 8003158:	e004      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
 800315c:	e002      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;   
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
    }
  } 
  
  return status; 
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	@ 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e165      	b.n	800345c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003190:	2201      	movs	r2, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f040 8154 	bne.w	8003456 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d005      	beq.n	80031c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d130      	bne.n	8003228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 0201 	and.w	r2, r3, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b03      	cmp	r3, #3
 8003232:	d017      	beq.n	8003264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d123      	bne.n	80032b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	08da      	lsrs	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3208      	adds	r2, #8
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0203 	and.w	r2, r3, #3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80ae 	beq.w	8003456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003474 <HAL_GPIO_Init+0x300>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	4a5c      	ldr	r2, [pc, #368]	@ (8003474 <HAL_GPIO_Init+0x300>)
 8003304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003308:	6453      	str	r3, [r2, #68]	@ 0x44
 800330a:	4b5a      	ldr	r3, [pc, #360]	@ (8003474 <HAL_GPIO_Init+0x300>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003316:	4a58      	ldr	r2, [pc, #352]	@ (8003478 <HAL_GPIO_Init+0x304>)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	3302      	adds	r3, #2
 800331e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4f      	ldr	r2, [pc, #316]	@ (800347c <HAL_GPIO_Init+0x308>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d025      	beq.n	800338e <HAL_GPIO_Init+0x21a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4e      	ldr	r2, [pc, #312]	@ (8003480 <HAL_GPIO_Init+0x30c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01f      	beq.n	800338a <HAL_GPIO_Init+0x216>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4d      	ldr	r2, [pc, #308]	@ (8003484 <HAL_GPIO_Init+0x310>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d019      	beq.n	8003386 <HAL_GPIO_Init+0x212>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4c      	ldr	r2, [pc, #304]	@ (8003488 <HAL_GPIO_Init+0x314>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_GPIO_Init+0x20e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a4b      	ldr	r2, [pc, #300]	@ (800348c <HAL_GPIO_Init+0x318>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00d      	beq.n	800337e <HAL_GPIO_Init+0x20a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4a      	ldr	r2, [pc, #296]	@ (8003490 <HAL_GPIO_Init+0x31c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <HAL_GPIO_Init+0x206>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a49      	ldr	r2, [pc, #292]	@ (8003494 <HAL_GPIO_Init+0x320>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_GPIO_Init+0x202>
 8003372:	2306      	movs	r3, #6
 8003374:	e00c      	b.n	8003390 <HAL_GPIO_Init+0x21c>
 8003376:	2307      	movs	r3, #7
 8003378:	e00a      	b.n	8003390 <HAL_GPIO_Init+0x21c>
 800337a:	2305      	movs	r3, #5
 800337c:	e008      	b.n	8003390 <HAL_GPIO_Init+0x21c>
 800337e:	2304      	movs	r3, #4
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x21c>
 8003382:	2303      	movs	r3, #3
 8003384:	e004      	b.n	8003390 <HAL_GPIO_Init+0x21c>
 8003386:	2302      	movs	r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_Init+0x21c>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_GPIO_Init+0x21c>
 800338e:	2300      	movs	r3, #0
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f002 0203 	and.w	r2, r2, #3
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4093      	lsls	r3, r2
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a0:	4935      	ldr	r1, [pc, #212]	@ (8003478 <HAL_GPIO_Init+0x304>)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <HAL_GPIO_Init+0x324>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d2:	4a31      	ldr	r2, [pc, #196]	@ (8003498 <HAL_GPIO_Init+0x324>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003498 <HAL_GPIO_Init+0x324>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033fc:	4a26      	ldr	r2, [pc, #152]	@ (8003498 <HAL_GPIO_Init+0x324>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003402:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <HAL_GPIO_Init+0x324>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003426:	4a1c      	ldr	r2, [pc, #112]	@ (8003498 <HAL_GPIO_Init+0x324>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800342c:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_GPIO_Init+0x324>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003450:	4a11      	ldr	r2, [pc, #68]	@ (8003498 <HAL_GPIO_Init+0x324>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3301      	adds	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	f67f ae96 	bls.w	8003190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3724      	adds	r7, #36	@ 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40013800 	.word	0x40013800
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400
 8003484:	40020800 	.word	0x40020800
 8003488:	40020c00 	.word	0x40020c00
 800348c:	40021000 	.word	0x40021000
 8003490:	40021400 	.word	0x40021400
 8003494:	40021800 	.word	0x40021800
 8003498:	40013c00 	.word	0x40013c00

0800349c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e001      	b.n	80034be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
 80034d8:	4613      	mov	r3, r2
 80034da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034dc:	787b      	ldrb	r3, [r7, #1]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034e8:	e003      	b.n	80034f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	041a      	lsls	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	619a      	str	r2, [r3, #24]
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <HAL_PWREx_EnableOverDrive+0x90>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	4a1f      	ldr	r2, [pc, #124]	@ (8003590 <HAL_PWREx_EnableOverDrive+0x90>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	@ 0x40
 800351a:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <HAL_PWREx_EnableOverDrive+0x90>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_PWREx_EnableOverDrive+0x94>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352c:	f7fe fc54 	bl	8001dd8 <HAL_GetTick>
 8003530:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003532:	e009      	b.n	8003548 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003534:	f7fe fc50 	bl	8001dd8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003542:	d901      	bls.n	8003548 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e01f      	b.n	8003588 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003548:	4b13      	ldr	r3, [pc, #76]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003554:	d1ee      	bne.n	8003534 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003556:	4b11      	ldr	r3, [pc, #68]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800355c:	f7fe fc3c 	bl	8001dd8 <HAL_GetTick>
 8003560:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003562:	e009      	b.n	8003578 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003564:	f7fe fc38 	bl	8001dd8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003572:	d901      	bls.n	8003578 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e007      	b.n	8003588 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003578:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003584:	d1ee      	bne.n	8003564 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40023800 	.word	0x40023800
 8003594:	420e0040 	.word	0x420e0040
 8003598:	40007000 	.word	0x40007000
 800359c:	420e0044 	.word	0x420e0044

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cc      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b68      	ldr	r3, [pc, #416]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d90c      	bls.n	80035dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b65      	ldr	r3, [pc, #404]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b63      	ldr	r3, [pc, #396]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b8      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f4:	4b59      	ldr	r3, [pc, #356]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a58      	ldr	r2, [pc, #352]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800360c:	4b53      	ldr	r3, [pc, #332]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a52      	ldr	r2, [pc, #328]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b50      	ldr	r3, [pc, #320]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	494d      	ldr	r1, [pc, #308]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d044      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4b47      	ldr	r3, [pc, #284]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d119      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e07f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d003      	beq.n	800365e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	2b03      	cmp	r3, #3
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b3f      	ldr	r3, [pc, #252]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e067      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b37      	ldr	r3, [pc, #220]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4934      	ldr	r1, [pc, #208]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fe fba2 	bl	8001dd8 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fe fb9e 	bl	8001dd8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e04f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2b      	ldr	r3, [pc, #172]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d20c      	bcs.n	80036e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b22      	ldr	r3, [pc, #136]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e032      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f4:	4b19      	ldr	r3, [pc, #100]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4916      	ldr	r1, [pc, #88]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003712:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	490e      	ldr	r1, [pc, #56]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003726:	f000 f855 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800372a:	4602      	mov	r2, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	490a      	ldr	r1, [pc, #40]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	5ccb      	ldrb	r3, [r1, r3]
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a09      	ldr	r2, [pc, #36]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fb02 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00
 800375c:	40023800 	.word	0x40023800
 8003760:	0800a1c4 	.word	0x0800a1c4
 8003764:	20000004 	.word	0x20000004
 8003768:	20000008 	.word	0x20000008

0800376c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003770:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <HAL_RCC_GetHCLKFreq+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000004 	.word	0x20000004

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003788:	f7ff fff0 	bl	800376c <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	@ (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	0800a1d4 	.word	0x0800a1d4

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b0:	f7ff ffdc 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0b5b      	lsrs	r3, r3, #13
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4903      	ldr	r1, [pc, #12]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	0800a1d4 	.word	0x0800a1d4

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d8:	b0ae      	sub	sp, #184	@ 0xb8
 80037da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fa:	4bcb      	ldr	r3, [pc, #812]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b0c      	cmp	r3, #12
 8003804:	f200 8206 	bhi.w	8003c14 <HAL_RCC_GetSysClockFreq+0x440>
 8003808:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <HAL_RCC_GetSysClockFreq+0x3c>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003845 	.word	0x08003845
 8003814:	08003c15 	.word	0x08003c15
 8003818:	08003c15 	.word	0x08003c15
 800381c:	08003c15 	.word	0x08003c15
 8003820:	0800384d 	.word	0x0800384d
 8003824:	08003c15 	.word	0x08003c15
 8003828:	08003c15 	.word	0x08003c15
 800382c:	08003c15 	.word	0x08003c15
 8003830:	08003855 	.word	0x08003855
 8003834:	08003c15 	.word	0x08003c15
 8003838:	08003c15 	.word	0x08003c15
 800383c:	08003c15 	.word	0x08003c15
 8003840:	08003a45 	.word	0x08003a45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003844:	4bb9      	ldr	r3, [pc, #740]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x358>)
 8003846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800384a:	e1e7      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800384c:	4bb8      	ldr	r3, [pc, #736]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800384e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003852:	e1e3      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003854:	4bb4      	ldr	r3, [pc, #720]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800385c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003860:	4bb1      	ldr	r3, [pc, #708]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d071      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386c:	4bae      	ldr	r3, [pc, #696]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	2200      	movs	r2, #0
 8003874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003878:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800387c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003884:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800388e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003892:	4622      	mov	r2, r4
 8003894:	462b      	mov	r3, r5
 8003896:	f04f 0000 	mov.w	r0, #0
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	0159      	lsls	r1, r3, #5
 80038a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a4:	0150      	lsls	r0, r2, #5
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4621      	mov	r1, r4
 80038ac:	1a51      	subs	r1, r2, r1
 80038ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80038b0:	4629      	mov	r1, r5
 80038b2:	eb63 0301 	sbc.w	r3, r3, r1
 80038b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80038c4:	4649      	mov	r1, r9
 80038c6:	018b      	lsls	r3, r1, #6
 80038c8:	4641      	mov	r1, r8
 80038ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ce:	4641      	mov	r1, r8
 80038d0:	018a      	lsls	r2, r1, #6
 80038d2:	4641      	mov	r1, r8
 80038d4:	1a51      	subs	r1, r2, r1
 80038d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038d8:	4649      	mov	r1, r9
 80038da:	eb63 0301 	sbc.w	r3, r3, r1
 80038de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80038ec:	4649      	mov	r1, r9
 80038ee:	00cb      	lsls	r3, r1, #3
 80038f0:	4641      	mov	r1, r8
 80038f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f6:	4641      	mov	r1, r8
 80038f8:	00ca      	lsls	r2, r1, #3
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	4622      	mov	r2, r4
 8003902:	189b      	adds	r3, r3, r2
 8003904:	633b      	str	r3, [r7, #48]	@ 0x30
 8003906:	462b      	mov	r3, r5
 8003908:	460a      	mov	r2, r1
 800390a:	eb42 0303 	adc.w	r3, r2, r3
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800391c:	4629      	mov	r1, r5
 800391e:	024b      	lsls	r3, r1, #9
 8003920:	4621      	mov	r1, r4
 8003922:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003926:	4621      	mov	r1, r4
 8003928:	024a      	lsls	r2, r1, #9
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003938:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800393c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003940:	f7fd f952 	bl	8000be8 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4613      	mov	r3, r2
 800394a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800394e:	e067      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003950:	4b75      	ldr	r3, [pc, #468]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800395c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800396a:	2300      	movs	r3, #0
 800396c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800396e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	f04f 0000 	mov.w	r0, #0
 800397a:	f04f 0100 	mov.w	r1, #0
 800397e:	0159      	lsls	r1, r3, #5
 8003980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003984:	0150      	lsls	r0, r2, #5
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4621      	mov	r1, r4
 800398c:	1a51      	subs	r1, r2, r1
 800398e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003990:	4629      	mov	r1, r5
 8003992:	eb63 0301 	sbc.w	r3, r3, r1
 8003996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80039a4:	4649      	mov	r1, r9
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	4641      	mov	r1, r8
 80039aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ae:	4641      	mov	r1, r8
 80039b0:	018a      	lsls	r2, r1, #6
 80039b2:	4641      	mov	r1, r8
 80039b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80039b8:	4649      	mov	r1, r9
 80039ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d2:	4692      	mov	sl, r2
 80039d4:	469b      	mov	fp, r3
 80039d6:	4623      	mov	r3, r4
 80039d8:	eb1a 0303 	adds.w	r3, sl, r3
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	462b      	mov	r3, r5
 80039e0:	eb4b 0303 	adc.w	r3, fp, r3
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039f2:	4629      	mov	r1, r5
 80039f4:	028b      	lsls	r3, r1, #10
 80039f6:	4621      	mov	r1, r4
 80039f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039fc:	4621      	mov	r1, r4
 80039fe:	028a      	lsls	r2, r1, #10
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a08:	2200      	movs	r2, #0
 8003a0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a12:	f7fd f8e9 	bl	8000be8 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a20:	4b41      	ldr	r3, [pc, #260]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a42:	e0eb      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b38      	ldr	r3, [pc, #224]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a50:	4b35      	ldr	r3, [pc, #212]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d06b      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5c:	4b32      	ldr	r3, [pc, #200]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	2200      	movs	r2, #0
 8003a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a70:	2300      	movs	r3, #0
 8003a72:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003a78:	4622      	mov	r2, r4
 8003a7a:	462b      	mov	r3, r5
 8003a7c:	f04f 0000 	mov.w	r0, #0
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	0159      	lsls	r1, r3, #5
 8003a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a8a:	0150      	lsls	r0, r2, #5
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4621      	mov	r1, r4
 8003a92:	1a51      	subs	r1, r2, r1
 8003a94:	61b9      	str	r1, [r7, #24]
 8003a96:	4629      	mov	r1, r5
 8003a98:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003aaa:	4659      	mov	r1, fp
 8003aac:	018b      	lsls	r3, r1, #6
 8003aae:	4651      	mov	r1, sl
 8003ab0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	018a      	lsls	r2, r1, #6
 8003ab8:	4651      	mov	r1, sl
 8003aba:	ebb2 0801 	subs.w	r8, r2, r1
 8003abe:	4659      	mov	r1, fp
 8003ac0:	eb63 0901 	sbc.w	r9, r3, r1
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad8:	4690      	mov	r8, r2
 8003ada:	4699      	mov	r9, r3
 8003adc:	4623      	mov	r3, r4
 8003ade:	eb18 0303 	adds.w	r3, r8, r3
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	462b      	mov	r3, r5
 8003ae6:	eb49 0303 	adc.w	r3, r9, r3
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003af8:	4629      	mov	r1, r5
 8003afa:	024b      	lsls	r3, r1, #9
 8003afc:	4621      	mov	r1, r4
 8003afe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b02:	4621      	mov	r1, r4
 8003b04:	024a      	lsls	r2, r1, #9
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b0e:	2200      	movs	r2, #0
 8003b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b18:	f7fd f866 	bl	8000be8 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b26:	e065      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x420>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b34:	4b3d      	ldr	r3, [pc, #244]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	4611      	mov	r1, r2
 8003b40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b46:	2300      	movs	r3, #0
 8003b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003b4e:	4642      	mov	r2, r8
 8003b50:	464b      	mov	r3, r9
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	0159      	lsls	r1, r3, #5
 8003b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b60:	0150      	lsls	r0, r2, #5
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4641      	mov	r1, r8
 8003b68:	1a51      	subs	r1, r2, r1
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b80:	4659      	mov	r1, fp
 8003b82:	018b      	lsls	r3, r1, #6
 8003b84:	4651      	mov	r1, sl
 8003b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	018a      	lsls	r2, r1, #6
 8003b8e:	4651      	mov	r1, sl
 8003b90:	1a54      	subs	r4, r2, r1
 8003b92:	4659      	mov	r1, fp
 8003b94:	eb63 0501 	sbc.w	r5, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	00eb      	lsls	r3, r5, #3
 8003ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba6:	00e2      	lsls	r2, r4, #3
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	4643      	mov	r3, r8
 8003bae:	18e3      	adds	r3, r4, r3
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	eb45 0303 	adc.w	r3, r5, r3
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	028b      	lsls	r3, r1, #10
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	028a      	lsls	r2, r1, #10
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bdc:	2200      	movs	r2, #0
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003be2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003be6:	f7fc ffff 	bl	8000be8 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4613      	mov	r3, r2
 8003bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0f1b      	lsrs	r3, r3, #28
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c12:	e003      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	37b8      	adds	r7, #184	@ 0xb8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400

08003c34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e28d      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8083 	beq.w	8003d5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c54:	4b94      	ldr	r3, [pc, #592]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d019      	beq.n	8003c94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c60:	4b91      	ldr	r3, [pc, #580]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c6c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c78:	d00c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d112      	bne.n	8003cac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c86:	4b88      	ldr	r3, [pc, #544]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c92:	d10b      	bne.n	8003cac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	4b84      	ldr	r3, [pc, #528]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05b      	beq.n	8003d58 <HAL_RCC_OscConfig+0x124>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d157      	bne.n	8003d58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e25a      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb4:	d106      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x90>
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7b      	ldr	r2, [pc, #492]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e01d      	b.n	8003d00 <HAL_RCC_OscConfig+0xcc>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xb4>
 8003cce:	4b76      	ldr	r3, [pc, #472]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a75      	ldr	r2, [pc, #468]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b73      	ldr	r3, [pc, #460]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a72      	ldr	r2, [pc, #456]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0xcc>
 8003ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6e      	ldr	r2, [pc, #440]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe f866 	bl	8001dd8 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fe f862 	bl	8001dd8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	@ 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e21f      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b61      	ldr	r3, [pc, #388]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0xdc>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe f852 	bl	8001dd8 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fe f84e 	bl	8001dd8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	@ 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e20b      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	4b57      	ldr	r3, [pc, #348]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x104>
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d06f      	beq.n	8003e46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d66:	4b50      	ldr	r3, [pc, #320]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d017      	beq.n	8003da2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d72:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d105      	bne.n	8003d8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d11c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d96:	4b44      	ldr	r3, [pc, #272]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d116      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da2:	4b41      	ldr	r3, [pc, #260]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_RCC_OscConfig+0x186>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d001      	beq.n	8003dba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e1d3      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4937      	ldr	r1, [pc, #220]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dce:	e03a      	b.n	8003e46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d020      	beq.n	8003e1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd8:	4b34      	ldr	r3, [pc, #208]	@ (8003eac <HAL_RCC_OscConfig+0x278>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fd fffb 	bl	8001dd8 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de6:	f7fd fff7 	bl	8001dd8 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e1b4      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e04:	4b28      	ldr	r3, [pc, #160]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4925      	ldr	r1, [pc, #148]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
 8003e18:	e015      	b.n	8003e46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1a:	4b24      	ldr	r3, [pc, #144]	@ (8003eac <HAL_RCC_OscConfig+0x278>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fd ffda 	bl	8001dd8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e28:	f7fd ffd6 	bl	8001dd8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e193      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d036      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5a:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fd ffba 	bl	8001dd8 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e68:	f7fd ffb6 	bl	8001dd8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e173      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x234>
 8003e86:	e01b      	b.n	8003ec0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e88:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fd ffa3 	bl	8001dd8 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	e00e      	b.n	8003eb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e96:	f7fd ff9f 	bl	8001dd8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d907      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e15c      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	42470000 	.word	0x42470000
 8003eb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ea      	bne.n	8003e96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8097 	beq.w	8003ffc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed2:	4b83      	ldr	r3, [pc, #524]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10f      	bne.n	8003efe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eee:	4b7c      	ldr	r3, [pc, #496]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	4b79      	ldr	r3, [pc, #484]	@ (80040e4 <HAL_RCC_OscConfig+0x4b0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d118      	bne.n	8003f3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0a:	4b76      	ldr	r3, [pc, #472]	@ (80040e4 <HAL_RCC_OscConfig+0x4b0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	@ (80040e4 <HAL_RCC_OscConfig+0x4b0>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f16:	f7fd ff5f 	bl	8001dd8 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fd ff5b 	bl	8001dd8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e118      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	4b6c      	ldr	r3, [pc, #432]	@ (80040e4 <HAL_RCC_OscConfig+0x4b0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d106      	bne.n	8003f52 <HAL_RCC_OscConfig+0x31e>
 8003f44:	4b66      	ldr	r3, [pc, #408]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f48:	4a65      	ldr	r2, [pc, #404]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f50:	e01c      	b.n	8003f8c <HAL_RCC_OscConfig+0x358>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x340>
 8003f5a:	4b61      	ldr	r3, [pc, #388]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	4a60      	ldr	r2, [pc, #384]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f66:	4b5e      	ldr	r3, [pc, #376]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0x358>
 8003f74:	4b5a      	ldr	r3, [pc, #360]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f78:	4a59      	ldr	r2, [pc, #356]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f80:	4b57      	ldr	r3, [pc, #348]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f84:	4a56      	ldr	r2, [pc, #344]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003f86:	f023 0304 	bic.w	r3, r3, #4
 8003f8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd ff20 	bl	8001dd8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fd ff1c 	bl	8001dd8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0d7      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0ee      	beq.n	8003f9c <HAL_RCC_OscConfig+0x368>
 8003fbe:	e014      	b.n	8003fea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fd ff0a 	bl	8001dd8 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fd ff06 	bl	8001dd8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e0c1      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fde:	4b40      	ldr	r3, [pc, #256]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ee      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80ad 	beq.w	8004160 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004006:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b08      	cmp	r3, #8
 8004010:	d060      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d145      	bne.n	80040a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b33      	ldr	r3, [pc, #204]	@ (80040e8 <HAL_RCC_OscConfig+0x4b4>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd feda 	bl	8001dd8 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fed6 	bl	8001dd8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e093      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	019b      	lsls	r3, r3, #6
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	3b01      	subs	r3, #1
 8004060:	041b      	lsls	r3, r3, #16
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	061b      	lsls	r3, r3, #24
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	071b      	lsls	r3, r3, #28
 8004072:	491b      	ldr	r1, [pc, #108]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004078:	4b1b      	ldr	r3, [pc, #108]	@ (80040e8 <HAL_RCC_OscConfig+0x4b4>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fd feab 	bl	8001dd8 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004086:	f7fd fea7 	bl	8001dd8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e064      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x452>
 80040a4:	e05c      	b.n	8004160 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a6:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <HAL_RCC_OscConfig+0x4b4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd fe94 	bl	8001dd8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fd fe90 	bl	8001dd8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04d      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x480>
 80040d2:	e045      	b.n	8004160 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d107      	bne.n	80040ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e040      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40007000 	.word	0x40007000
 80040e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ec:	4b1f      	ldr	r3, [pc, #124]	@ (800416c <HAL_RCC_OscConfig+0x538>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d030      	beq.n	800415c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d129      	bne.n	800415c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d122      	bne.n	800415c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004124:	4293      	cmp	r3, r2
 8004126:	d119      	bne.n	800415c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	3b01      	subs	r3, #1
 8004136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d10f      	bne.n	800415c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d107      	bne.n	800415c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800

08004170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e042      	b.n	8004208 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fbfe 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	@ 0x24
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f973 	bl	80044a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	@ 0x28
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b20      	cmp	r3, #32
 800422e:	d175      	bne.n	800431c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Transmit+0x2c>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e06e      	b.n	800431e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2221      	movs	r2, #33	@ 0x21
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800424e:	f7fd fdc3 	bl	8001dd8 <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	88fa      	ldrh	r2, [r7, #6]
 800425e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004268:	d108      	bne.n	800427c <HAL_UART_Transmit+0x6c>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	e003      	b.n	8004284 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004284:	e02e      	b.n	80042e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	2180      	movs	r1, #128	@ 0x80
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f848 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e03a      	b.n	800431e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3302      	adds	r3, #2
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e007      	b.n	80042d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1cb      	bne.n	8004286 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2140      	movs	r1, #64	@ 0x40
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f814 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004336:	e03b      	b.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d037      	beq.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fd fd4a 	bl	8001dd8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	6a3a      	ldr	r2, [r7, #32]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <UART_WaitOnFlagUntilTimeout+0x30>
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e03a      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d023      	beq.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b80      	cmp	r3, #128	@ 0x80
 800436c:	d020      	beq.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b40      	cmp	r3, #64	@ 0x40
 8004372:	d01d      	beq.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b08      	cmp	r3, #8
 8004380:	d116      	bne.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f81d 	bl	80043d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2208      	movs	r2, #8
 80043a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e00f      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d0b4      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b095      	sub	sp, #84	@ 0x54
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004400:	643a      	str	r2, [r7, #64]	@ 0x40
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800440e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	61fb      	str	r3, [r7, #28]
   return(result);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3314      	adds	r3, #20
 8004432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004434:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800443a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e5      	bne.n	8004414 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444c:	2b01      	cmp	r3, #1
 800444e:	d119      	bne.n	8004484 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	647b      	str	r3, [r7, #68]	@ 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004470:	61ba      	str	r2, [r7, #24]
 8004472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6979      	ldr	r1, [r7, #20]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	613b      	str	r3, [r7, #16]
   return(result);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004492:	bf00      	nop
 8004494:	3754      	adds	r7, #84	@ 0x54
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b0c0      	sub	sp, #256	@ 0x100
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044f8:	f021 010c 	bic.w	r1, r1, #12
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004506:	430b      	orrs	r3, r1
 8004508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	6999      	ldr	r1, [r3, #24]
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	ea40 0301 	orr.w	r3, r0, r1
 8004526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8f      	ldr	r3, [pc, #572]	@ (800476c <UART_SetConfig+0x2cc>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d005      	beq.n	8004540 <UART_SetConfig+0xa0>
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b8d      	ldr	r3, [pc, #564]	@ (8004770 <UART_SetConfig+0x2d0>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d104      	bne.n	800454a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7ff f934 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8004544:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004548:	e003      	b.n	8004552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454a:	f7ff f91b 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 800454e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800455c:	f040 810c 	bne.w	8004778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800456a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800456e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	1891      	adds	r1, r2, r2
 8004578:	65b9      	str	r1, [r7, #88]	@ 0x58
 800457a:	415b      	adcs	r3, r3
 800457c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800457e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004582:	4621      	mov	r1, r4
 8004584:	eb12 0801 	adds.w	r8, r2, r1
 8004588:	4629      	mov	r1, r5
 800458a:	eb43 0901 	adc.w	r9, r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a2:	4690      	mov	r8, r2
 80045a4:	4699      	mov	r9, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	eb18 0303 	adds.w	r3, r8, r3
 80045ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045b0:	462b      	mov	r3, r5
 80045b2:	eb49 0303 	adc.w	r3, r9, r3
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045ce:	460b      	mov	r3, r1
 80045d0:	18db      	adds	r3, r3, r3
 80045d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d4:	4613      	mov	r3, r2
 80045d6:	eb42 0303 	adc.w	r3, r2, r3
 80045da:	657b      	str	r3, [r7, #84]	@ 0x54
 80045dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045e4:	f7fc fb00 	bl	8000be8 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b61      	ldr	r3, [pc, #388]	@ (8004774 <UART_SetConfig+0x2d4>)
 80045ee:	fba3 2302 	umull	r2, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	011c      	lsls	r4, r3, #4
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004600:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004610:	415b      	adcs	r3, r3
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004618:	4641      	mov	r1, r8
 800461a:	eb12 0a01 	adds.w	sl, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb43 0b01 	adc.w	fp, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004638:	4692      	mov	sl, r2
 800463a:	469b      	mov	fp, r3
 800463c:	4643      	mov	r3, r8
 800463e:	eb1a 0303 	adds.w	r3, sl, r3
 8004642:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004646:	464b      	mov	r3, r9
 8004648:	eb4b 0303 	adc.w	r3, fp, r3
 800464c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800465c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004664:	460b      	mov	r3, r1
 8004666:	18db      	adds	r3, r3, r3
 8004668:	643b      	str	r3, [r7, #64]	@ 0x40
 800466a:	4613      	mov	r3, r2
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
 8004672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800467a:	f7fc fab5 	bl	8000be8 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4611      	mov	r1, r2
 8004684:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <UART_SetConfig+0x2d4>)
 8004686:	fba3 2301 	umull	r2, r3, r3, r1
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2264      	movs	r2, #100	@ 0x64
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	1acb      	subs	r3, r1, r3
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800469a:	4b36      	ldr	r3, [pc, #216]	@ (8004774 <UART_SetConfig+0x2d4>)
 800469c:	fba3 2302 	umull	r2, r3, r3, r2
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046a8:	441c      	add	r4, r3
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046c4:	415b      	adcs	r3, r3
 80046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004718:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800471c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004720:	460b      	mov	r3, r1
 8004722:	18db      	adds	r3, r3, r3
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004726:	4613      	mov	r3, r2
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004736:	f7fc fa57 	bl	8000be8 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <UART_SetConfig+0x2d4>)
 8004740:	fba3 1302 	umull	r1, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	2164      	movs	r1, #100	@ 0x64
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	3332      	adds	r3, #50	@ 0x32
 8004752:	4a08      	ldr	r2, [pc, #32]	@ (8004774 <UART_SetConfig+0x2d4>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	f003 0207 	and.w	r2, r3, #7
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4422      	add	r2, r4
 8004766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004768:	e106      	b.n	8004978 <UART_SetConfig+0x4d8>
 800476a:	bf00      	nop
 800476c:	40011000 	.word	0x40011000
 8004770:	40011400 	.word	0x40011400
 8004774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800477c:	2200      	movs	r2, #0
 800477e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004782:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800478a:	4642      	mov	r2, r8
 800478c:	464b      	mov	r3, r9
 800478e:	1891      	adds	r1, r2, r2
 8004790:	6239      	str	r1, [r7, #32]
 8004792:	415b      	adcs	r3, r3
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
 8004796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479a:	4641      	mov	r1, r8
 800479c:	1854      	adds	r4, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0501 	adc.w	r5, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	00eb      	lsls	r3, r5, #3
 80047ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b2:	00e2      	lsls	r2, r4, #3
 80047b4:	4614      	mov	r4, r2
 80047b6:	461d      	mov	r5, r3
 80047b8:	4643      	mov	r3, r8
 80047ba:	18e3      	adds	r3, r4, r3
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047c0:	464b      	mov	r3, r9
 80047c2:	eb45 0303 	adc.w	r3, r5, r3
 80047c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047e6:	4629      	mov	r1, r5
 80047e8:	008b      	lsls	r3, r1, #2
 80047ea:	4621      	mov	r1, r4
 80047ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f0:	4621      	mov	r1, r4
 80047f2:	008a      	lsls	r2, r1, #2
 80047f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047f8:	f7fc f9f6 	bl	8000be8 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4b60      	ldr	r3, [pc, #384]	@ (8004984 <UART_SetConfig+0x4e4>)
 8004802:	fba3 2302 	umull	r2, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	011c      	lsls	r4, r3, #4
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004814:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	61b9      	str	r1, [r7, #24]
 8004824:	415b      	adcs	r3, r3
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6139      	str	r1, [r7, #16]
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004876:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004884:	4649      	mov	r1, r9
 8004886:	008b      	lsls	r3, r1, #2
 8004888:	4641      	mov	r1, r8
 800488a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488e:	4641      	mov	r1, r8
 8004890:	008a      	lsls	r2, r1, #2
 8004892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004896:	f7fc f9a7 	bl	8000be8 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	4b38      	ldr	r3, [pc, #224]	@ (8004984 <UART_SetConfig+0x4e4>)
 80048a2:	fba3 2301 	umull	r2, r3, r3, r1
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2264      	movs	r2, #100	@ 0x64
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	1acb      	subs	r3, r1, r3
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	3332      	adds	r3, #50	@ 0x32
 80048b4:	4a33      	ldr	r2, [pc, #204]	@ (8004984 <UART_SetConfig+0x4e4>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c0:	441c      	add	r4, r3
 80048c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c6:	2200      	movs	r2, #0
 80048c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80048ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80048cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	1891      	adds	r1, r2, r2
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	415b      	adcs	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e0:	4641      	mov	r1, r8
 80048e2:	1851      	adds	r1, r2, r1
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	4649      	mov	r1, r9
 80048e8:	414b      	adcs	r3, r1
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048f8:	4659      	mov	r1, fp
 80048fa:	00cb      	lsls	r3, r1, #3
 80048fc:	4651      	mov	r1, sl
 80048fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004902:	4651      	mov	r1, sl
 8004904:	00ca      	lsls	r2, r1, #3
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	4603      	mov	r3, r0
 800490c:	4642      	mov	r2, r8
 800490e:	189b      	adds	r3, r3, r2
 8004910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004912:	464b      	mov	r3, r9
 8004914:	460a      	mov	r2, r1
 8004916:	eb42 0303 	adc.w	r3, r2, r3
 800491a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	663b      	str	r3, [r7, #96]	@ 0x60
 8004926:	667a      	str	r2, [r7, #100]	@ 0x64
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004934:	4649      	mov	r1, r9
 8004936:	008b      	lsls	r3, r1, #2
 8004938:	4641      	mov	r1, r8
 800493a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493e:	4641      	mov	r1, r8
 8004940:	008a      	lsls	r2, r1, #2
 8004942:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004946:	f7fc f94f 	bl	8000be8 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <UART_SetConfig+0x4e4>)
 8004950:	fba3 1302 	umull	r1, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	2164      	movs	r1, #100	@ 0x64
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	3332      	adds	r3, #50	@ 0x32
 8004962:	4a08      	ldr	r2, [pc, #32]	@ (8004984 <UART_SetConfig+0x4e4>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	f003 020f 	and.w	r2, r3, #15
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4422      	add	r2, r4
 8004976:	609a      	str	r2, [r3, #8]
}
 8004978:	bf00      	nop
 800497a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800497e:	46bd      	mov	sp, r7
 8004980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004984:	51eb851f 	.word	0x51eb851f

08004988 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800498e:	f3ef 8305 	mrs	r3, IPSR
 8004992:	603b      	str	r3, [r7, #0]
  return(result);
 8004994:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800499a:	f06f 0305 	mvn.w	r3, #5
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	e00c      	b.n	80049bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049a2:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <osKernelInitialize+0x44>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d105      	bne.n	80049b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049aa:	4b08      	ldr	r3, [pc, #32]	@ (80049cc <osKernelInitialize+0x44>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	e002      	b.n	80049bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049bc:	687b      	ldr	r3, [r7, #4]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	200004e4 	.word	0x200004e4

080049d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d8:	f3ef 8305 	mrs	r3, IPSR
 80049dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80049de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <osDelay+0x1c>
    stat = osErrorISR;
 80049e4:	f06f 0305 	mvn.w	r3, #5
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	e007      	b.n	80049fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 ffca 	bl	8005990 <vTaskDelay>
    }
  }

  return (stat);
 80049fc:	68fb      	ldr	r3, [r7, #12]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a07      	ldr	r2, [pc, #28]	@ (8004a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a06      	ldr	r2, [pc, #24]	@ (8004a38 <vApplicationGetIdleTaskMemory+0x30>)
 8004a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2280      	movs	r2, #128	@ 0x80
 8004a24:	601a      	str	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	200004e8 	.word	0x200004e8
 8004a38:	20000544 	.word	0x20000544

08004a3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a07      	ldr	r2, [pc, #28]	@ (8004a68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a06      	ldr	r2, [pc, #24]	@ (8004a6c <vApplicationGetTimerTaskMemory+0x30>)
 8004a52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a5a:	601a      	str	r2, [r3, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000744 	.word	0x20000744
 8004a6c:	200007a0 	.word	0x200007a0

08004a70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f103 0208 	add.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f103 0208 	add.w	r2, r3, #8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f103 0208 	add.w	r2, r3, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d103      	bne.n	8004b32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e00c      	b.n	8004b4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3308      	adds	r3, #8
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e002      	b.n	8004b40 <vListInsert+0x2e>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d2f6      	bcs.n	8004b3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6892      	ldr	r2, [r2, #8]
 8004b9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6852      	ldr	r2, [r2, #4]
 8004ba4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d103      	bne.n	8004bb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10b      	bne.n	8004c04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c04:	f002 f8b8 	bl	8006d78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	3b01      	subs	r3, #1
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	22ff      	movs	r2, #255	@ 0xff
 8004c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	22ff      	movs	r2, #255	@ 0xff
 8004c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d114      	bne.n	8004c84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01a      	beq.n	8004c98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3310      	adds	r3, #16
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f956 	bl	8005f18 <xTaskRemoveFromEventList>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d012      	beq.n	8004c98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <xQueueGenericReset+0xd0>)
 8004c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	e009      	b.n	8004c98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3310      	adds	r3, #16
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fef1 	bl	8004a70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3324      	adds	r3, #36	@ 0x24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff feec 	bl	8004a70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c98:	f002 f8a0 	bl	8006ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c9c:	2301      	movs	r3, #1
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	@ 0x38
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <xQueueGenericCreateStatic+0x56>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <xQueueGenericCreateStatic+0x5a>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericCreateStatic+0x5c>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	623b      	str	r3, [r7, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <xQueueGenericCreateStatic+0x84>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <xQueueGenericCreateStatic+0x88>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <xQueueGenericCreateStatic+0x8a>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	61fb      	str	r3, [r7, #28]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d52:	2350      	movs	r3, #80	@ 0x50
 8004d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b50      	cmp	r3, #80	@ 0x50
 8004d5a:	d00b      	beq.n	8004d74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	61bb      	str	r3, [r7, #24]
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00d      	beq.n	8004d9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f840 	bl	8004e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3730      	adds	r7, #48	@ 0x30
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08a      	sub	sp, #40	@ 0x28
 8004daa:	af02      	add	r7, sp, #8
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	613b      	str	r3, [r7, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	e7fd      	b.n	8004dce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	3350      	adds	r3, #80	@ 0x50
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 f8eb 	bl	8006fbc <pvPortMalloc>
 8004de6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3350      	adds	r3, #80	@ 0x50
 8004df6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e00:	79fa      	ldrb	r2, [r7, #7]
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f805 	bl	8004e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e12:	69bb      	ldr	r3, [r7, #24]
	}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	69b8      	ldr	r0, [r7, #24]
 8004e4e:	f7ff fec3 	bl	8004bd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08e      	sub	sp, #56	@ 0x38
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <xQueueGenericSend+0x34>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <xQueueGenericSend+0x42>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <xQueueGenericSend+0x46>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <xQueueGenericSend+0x48>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <xQueueGenericSend+0x64>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSend+0x72>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSend+0x76>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSend+0x78>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <xQueueGenericSend+0x94>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	623b      	str	r3, [r7, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef8:	f001 f9ce 	bl	8006298 <xTaskGetSchedulerState>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <xQueueGenericSend+0xa4>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xQueueGenericSend+0xa8>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <xQueueGenericSend+0xaa>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <xQueueGenericSend+0xc6>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61fb      	str	r3, [r7, #28]
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f2a:	f001 ff25 	bl	8006d78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <xQueueGenericSend+0xdc>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d129      	bne.n	8004f94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f46:	f000 fa0f 	bl	8005368 <prvCopyDataToQueue>
 8004f4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	3324      	adds	r3, #36	@ 0x24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 ffdd 	bl	8005f18 <xTaskRemoveFromEventList>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d013      	beq.n	8004f8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f64:	4b3f      	ldr	r3, [pc, #252]	@ (8005064 <xQueueGenericSend+0x200>)
 8004f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	e00a      	b.n	8004f8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f7c:	4b39      	ldr	r3, [pc, #228]	@ (8005064 <xQueueGenericSend+0x200>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f8c:	f001 ff26 	bl	8006ddc <vPortExitCritical>
				return pdPASS;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e063      	b.n	800505c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f9a:	f001 ff1f 	bl	8006ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e05c      	b.n	800505c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 f817 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fb6:	f001 ff11 	bl	8006ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fba:	f000 fd87 	bl	8005acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fbe:	f001 fedb 	bl	8006d78 <vPortEnterCritical>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fc8:	b25b      	sxtb	r3, r3
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d103      	bne.n	8004fd8 <xQueueGenericSend+0x174>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d103      	bne.n	8004fee <xQueueGenericSend+0x18a>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fee:	f001 fef5 	bl	8006ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff2:	1d3a      	adds	r2, r7, #4
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 f806 	bl	800600c <xTaskCheckForTimeOut>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d124      	bne.n	8005050 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005006:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005008:	f000 faa6 	bl	8005558 <prvIsQueueFull>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	3310      	adds	r3, #16
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ff2a 	bl	8005e74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005022:	f000 fa31 	bl	8005488 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005026:	f000 fd5f 	bl	8005ae8 <xTaskResumeAll>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	f47f af7c 	bne.w	8004f2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005032:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <xQueueGenericSend+0x200>)
 8005034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	e772      	b.n	8004f2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005046:	f000 fa1f 	bl	8005488 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504a:	f000 fd4d 	bl	8005ae8 <xTaskResumeAll>
 800504e:	e76c      	b.n	8004f2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005052:	f000 fa19 	bl	8005488 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005056:	f000 fd47 	bl	8005ae8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800505a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800505c:	4618      	mov	r0, r3
 800505e:	3738      	adds	r7, #56	@ 0x38
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b090      	sub	sp, #64	@ 0x40
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <xQueueGenericSendFromISR+0x3e>
 800509e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <xQueueGenericSendFromISR+0x42>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <xQueueGenericSendFromISR+0x44>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d103      	bne.n	80050d6 <xQueueGenericSendFromISR+0x6e>
 80050ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <xQueueGenericSendFromISR+0x72>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueGenericSendFromISR+0x74>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050f8:	f001 ff1e 	bl	8006f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	61fa      	str	r2, [r7, #28]
 8005112:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005114:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005116:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	429a      	cmp	r2, r3
 8005122:	d302      	bcc.n	800512a <xQueueGenericSendFromISR+0xc2>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d12f      	bne.n	800518a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005130:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005140:	f000 f912 	bl	8005368 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005144:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d112      	bne.n	8005174 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	3324      	adds	r3, #36	@ 0x24
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fedc 	bl	8005f18 <xTaskRemoveFromEventList>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00e      	beq.n	8005184 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e007      	b.n	8005184 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005174:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005178:	3301      	adds	r3, #1
 800517a:	b2db      	uxtb	r3, r3
 800517c:	b25a      	sxtb	r2, r3
 800517e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005184:	2301      	movs	r3, #1
 8005186:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005188:	e001      	b.n	800518e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800518a:	2300      	movs	r3, #0
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005190:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005198:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800519a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800519c:	4618      	mov	r0, r3
 800519e:	3740      	adds	r7, #64	@ 0x40
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	@ 0x30
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <xQueueReceive+0x32>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	623b      	str	r3, [r7, #32]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <xQueueReceive+0x40>
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <xQueueReceive+0x44>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <xQueueReceive+0x46>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <xQueueReceive+0x62>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	61fb      	str	r3, [r7, #28]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005206:	f001 f847 	bl	8006298 <xTaskGetSchedulerState>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <xQueueReceive+0x72>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <xQueueReceive+0x76>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueReceive+0x78>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueReceive+0x94>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61bb      	str	r3, [r7, #24]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005238:	f001 fd9e 	bl	8006d78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01f      	beq.n	8005288 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800524c:	f000 f8f6 	bl	800543c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00f      	beq.n	8005280 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	3310      	adds	r3, #16
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fe57 	bl	8005f18 <xTaskRemoveFromEventList>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005270:	4b3c      	ldr	r3, [pc, #240]	@ (8005364 <xQueueReceive+0x1c0>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005280:	f001 fdac 	bl	8006ddc <vPortExitCritical>
				return pdPASS;
 8005284:	2301      	movs	r3, #1
 8005286:	e069      	b.n	800535c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d103      	bne.n	8005296 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800528e:	f001 fda5 	bl	8006ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005292:	2300      	movs	r3, #0
 8005294:	e062      	b.n	800535c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800529c:	f107 0310 	add.w	r3, r7, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fe9d 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052aa:	f001 fd97 	bl	8006ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ae:	f000 fc0d 	bl	8005acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052b2:	f001 fd61 	bl	8006d78 <vPortEnterCritical>
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d103      	bne.n	80052cc <xQueueReceive+0x128>
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052d2:	b25b      	sxtb	r3, r3
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d103      	bne.n	80052e2 <xQueueReceive+0x13e>
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052e2:	f001 fd7b 	bl	8006ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052e6:	1d3a      	adds	r2, r7, #4
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fe8c 	bl	800600c <xTaskCheckForTimeOut>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d123      	bne.n	8005342 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052fc:	f000 f916 	bl	800552c <prvIsQueueEmpty>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	3324      	adds	r3, #36	@ 0x24
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fdb0 	bl	8005e74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005316:	f000 f8b7 	bl	8005488 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800531a:	f000 fbe5 	bl	8005ae8 <xTaskResumeAll>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d189      	bne.n	8005238 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005324:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <xQueueReceive+0x1c0>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	e780      	b.n	8005238 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005338:	f000 f8a6 	bl	8005488 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800533c:	f000 fbd4 	bl	8005ae8 <xTaskResumeAll>
 8005340:	e77a      	b.n	8005238 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005344:	f000 f8a0 	bl	8005488 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005348:	f000 fbce 	bl	8005ae8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800534c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800534e:	f000 f8ed 	bl	800552c <prvIsQueueEmpty>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	f43f af6f 	beq.w	8005238 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800535a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800535c:	4618      	mov	r0, r3
 800535e:	3730      	adds	r7, #48	@ 0x30
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d14d      	bne.n	800542a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 ff9e 	bl	80062d4 <xTaskPriorityDisinherit>
 8005398:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	609a      	str	r2, [r3, #8]
 80053a0:	e043      	b.n	800542a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d119      	bne.n	80053dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6858      	ldr	r0, [r3, #4]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b0:	461a      	mov	r2, r3
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	f002 fe07 	bl	8007fc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d32b      	bcc.n	800542a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	605a      	str	r2, [r3, #4]
 80053da:	e026      	b.n	800542a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68d8      	ldr	r0, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	461a      	mov	r2, r3
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	f002 fded 	bl	8007fc6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f4:	425b      	negs	r3, r3
 80053f6:	441a      	add	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d207      	bcs.n	8005418 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	425b      	negs	r3, r3
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d105      	bne.n	800542a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3b01      	subs	r3, #1
 8005428:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005432:	697b      	ldr	r3, [r7, #20]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d018      	beq.n	8005480 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	d303      	bcc.n	8005470 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68d9      	ldr	r1, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005478:	461a      	mov	r2, r3
 800547a:	6838      	ldr	r0, [r7, #0]
 800547c:	f002 fda3 	bl	8007fc6 <memcpy>
	}
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005490:	f001 fc72 	bl	8006d78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800549a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800549c:	e011      	b.n	80054c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d012      	beq.n	80054cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3324      	adds	r3, #36	@ 0x24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fd34 	bl	8005f18 <xTaskRemoveFromEventList>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054b6:	f000 fe0d 	bl	80060d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	3b01      	subs	r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dce9      	bgt.n	800549e <prvUnlockQueue+0x16>
 80054ca:	e000      	b.n	80054ce <prvUnlockQueue+0x46>
					break;
 80054cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	22ff      	movs	r2, #255	@ 0xff
 80054d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80054d6:	f001 fc81 	bl	8006ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054da:	f001 fc4d 	bl	8006d78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054e6:	e011      	b.n	800550c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d012      	beq.n	8005516 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3310      	adds	r3, #16
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fd0f 	bl	8005f18 <xTaskRemoveFromEventList>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005500:	f000 fde8 	bl	80060d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005504:	7bbb      	ldrb	r3, [r7, #14]
 8005506:	3b01      	subs	r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800550c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005510:	2b00      	cmp	r3, #0
 8005512:	dce9      	bgt.n	80054e8 <prvUnlockQueue+0x60>
 8005514:	e000      	b.n	8005518 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005516:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	22ff      	movs	r2, #255	@ 0xff
 800551c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005520:	f001 fc5c 	bl	8006ddc <vPortExitCritical>
}
 8005524:	bf00      	nop
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005534:	f001 fc20 	bl	8006d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e001      	b.n	800554a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800554a:	f001 fc47 	bl	8006ddc <vPortExitCritical>

	return xReturn;
 800554e:	68fb      	ldr	r3, [r7, #12]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005560:	f001 fc0a 	bl	8006d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	429a      	cmp	r2, r3
 800556e:	d102      	bne.n	8005576 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005570:	2301      	movs	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e001      	b.n	800557a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557a:	f001 fc2f 	bl	8006ddc <vPortExitCritical>

	return xReturn;
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e014      	b.n	80055c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005598:	4a0f      	ldr	r2, [pc, #60]	@ (80055d8 <vQueueAddToRegistry+0x50>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055a4:	490c      	ldr	r1, [pc, #48]	@ (80055d8 <vQueueAddToRegistry+0x50>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055ae:	4a0a      	ldr	r2, [pc, #40]	@ (80055d8 <vQueueAddToRegistry+0x50>)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ba:	e006      	b.n	80055ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b07      	cmp	r3, #7
 80055c6:	d9e7      	bls.n	8005598 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000ba0 	.word	0x20000ba0

080055dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055ec:	f001 fbc4 	bl	8006d78 <vPortEnterCritical>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d103      	bne.n	8005606 <vQueueWaitForMessageRestricted+0x2a>
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800560c:	b25b      	sxtb	r3, r3
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d103      	bne.n	800561c <vQueueWaitForMessageRestricted+0x40>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800561c:	f001 fbde 	bl	8006ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3324      	adds	r3, #36	@ 0x24
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fc45 	bl	8005ec0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005636:	6978      	ldr	r0, [r7, #20]
 8005638:	f7ff ff26 	bl	8005488 <prvUnlockQueue>
	}
 800563c:	bf00      	nop
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	@ 0x38
 8005648:	af04      	add	r7, sp, #16
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	623b      	str	r3, [r7, #32]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	61fb      	str	r3, [r7, #28]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800568e:	235c      	movs	r3, #92	@ 0x5c
 8005690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b5c      	cmp	r3, #92	@ 0x5c
 8005696:	d00b      	beq.n	80056b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	61bb      	str	r3, [r7, #24]
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	e7fd      	b.n	80056ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01e      	beq.n	80056f6 <xTaskCreateStatic+0xb2>
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01b      	beq.n	80056f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056d0:	2300      	movs	r3, #0
 80056d2:	9303      	str	r3, [sp, #12]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	9302      	str	r3, [sp, #8]
 80056d8:	f107 0314 	add.w	r3, r7, #20
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f850 	bl	800578e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056f0:	f000 f8de 	bl	80058b0 <prvAddNewTaskToReadyList>
 80056f4:	e001      	b.n	80056fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056fa:	697b      	ldr	r3, [r7, #20]
	}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3728      	adds	r7, #40	@ 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08c      	sub	sp, #48	@ 0x30
 8005708:	af04      	add	r7, sp, #16
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4618      	mov	r0, r3
 800571a:	f001 fc4f 	bl	8006fbc <pvPortMalloc>
 800571e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00e      	beq.n	8005744 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005726:	205c      	movs	r0, #92	@ 0x5c
 8005728:	f001 fc48 	bl	8006fbc <pvPortMalloc>
 800572c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30
 800573a:	e005      	b.n	8005748 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800573c:	6978      	ldr	r0, [r7, #20]
 800573e:	f001 fd0b 	bl	8007158 <vPortFree>
 8005742:	e001      	b.n	8005748 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d017      	beq.n	800577e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	2300      	movs	r3, #0
 800575a:	9303      	str	r3, [sp, #12]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	9302      	str	r3, [sp, #8]
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f80e 	bl	800578e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005772:	69f8      	ldr	r0, [r7, #28]
 8005774:	f000 f89c 	bl	80058b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e002      	b.n	8005784 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005784:	69bb      	ldr	r3, [r7, #24]
	}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b088      	sub	sp, #32
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	461a      	mov	r2, r3
 80057a6:	21a5      	movs	r1, #165	@ 0xa5
 80057a8:	f002 fb8e 	bl	8007ec8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057b6:	3b01      	subs	r3, #1
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	617b      	str	r3, [r7, #20]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01f      	beq.n	800582e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	e012      	b.n	800581a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	7819      	ldrb	r1, [r3, #0]
 80057fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	3334      	adds	r3, #52	@ 0x34
 8005804:	460a      	mov	r2, r1
 8005806:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	2b0f      	cmp	r3, #15
 800581e:	d9e9      	bls.n	80057f4 <prvInitialiseNewTask+0x66>
 8005820:	e000      	b.n	8005824 <prvInitialiseNewTask+0x96>
			{
				break;
 8005822:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800582c:	e003      	b.n	8005836 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	2b37      	cmp	r3, #55	@ 0x37
 800583a:	d901      	bls.n	8005840 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800583c:	2337      	movs	r3, #55	@ 0x37
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005844:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800584a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	2200      	movs	r2, #0
 8005850:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	3304      	adds	r3, #4
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff f92a 	bl	8004ab0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	3318      	adds	r3, #24
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff f925 	bl	8004ab0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800587a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	2200      	movs	r2, #0
 8005880:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	69b8      	ldr	r0, [r7, #24]
 8005890:	f001 f93e 	bl	8006b10 <pxPortInitialiseStack>
 8005894:	4602      	mov	r2, r0
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a6:	bf00      	nop
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058b8:	f001 fa5e 	bl	8006d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005974 <prvAddNewTaskToReadyList+0xc4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005974 <prvAddNewTaskToReadyList+0xc4>)
 80058c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005978 <prvAddNewTaskToReadyList+0xc8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <prvAddNewTaskToReadyList+0xc8>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058d4:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <prvAddNewTaskToReadyList+0xc4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d110      	bne.n	80058fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058dc:	f000 fc1e 	bl	800611c <prvInitialiseTaskLists>
 80058e0:	e00d      	b.n	80058fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058e2:	4b26      	ldr	r3, [pc, #152]	@ (800597c <prvAddNewTaskToReadyList+0xcc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058ea:	4b23      	ldr	r3, [pc, #140]	@ (8005978 <prvAddNewTaskToReadyList+0xc8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d802      	bhi.n	80058fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005978 <prvAddNewTaskToReadyList+0xc8>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058fe:	4b20      	ldr	r3, [pc, #128]	@ (8005980 <prvAddNewTaskToReadyList+0xd0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a1e      	ldr	r2, [pc, #120]	@ (8005980 <prvAddNewTaskToReadyList+0xd0>)
 8005906:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005908:	4b1d      	ldr	r3, [pc, #116]	@ (8005980 <prvAddNewTaskToReadyList+0xd0>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005914:	4b1b      	ldr	r3, [pc, #108]	@ (8005984 <prvAddNewTaskToReadyList+0xd4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d903      	bls.n	8005924 <prvAddNewTaskToReadyList+0x74>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	4a18      	ldr	r2, [pc, #96]	@ (8005984 <prvAddNewTaskToReadyList+0xd4>)
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <prvAddNewTaskToReadyList+0xd8>)
 8005932:	441a      	add	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7ff f8c5 	bl	8004aca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005940:	f001 fa4c 	bl	8006ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005944:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <prvAddNewTaskToReadyList+0xcc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800594c:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <prvAddNewTaskToReadyList+0xc8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005956:	429a      	cmp	r2, r3
 8005958:	d207      	bcs.n	800596a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800595a:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <prvAddNewTaskToReadyList+0xdc>)
 800595c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	200010b4 	.word	0x200010b4
 8005978:	20000be0 	.word	0x20000be0
 800597c:	200010c0 	.word	0x200010c0
 8005980:	200010d0 	.word	0x200010d0
 8005984:	200010bc 	.word	0x200010bc
 8005988:	20000be4 	.word	0x20000be4
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d018      	beq.n	80059d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059a2:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <vTaskDelay+0x64>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <vTaskDelay+0x32>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60bb      	str	r3, [r7, #8]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059c2:	f000 f883 	bl	8005acc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059c6:	2100      	movs	r1, #0
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fcf3 	bl	80063b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059ce:	f000 f88b 	bl	8005ae8 <xTaskResumeAll>
 80059d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d107      	bne.n	80059ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80059da:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <vTaskDelay+0x68>)
 80059dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	200010dc 	.word	0x200010dc
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a0a:	463a      	mov	r2, r7
 8005a0c:	1d39      	adds	r1, r7, #4
 8005a0e:	f107 0308 	add.w	r3, r7, #8
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fff8 	bl	8004a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	9202      	str	r2, [sp, #8]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	460a      	mov	r2, r1
 8005a2a:	4922      	ldr	r1, [pc, #136]	@ (8005ab4 <vTaskStartScheduler+0xb8>)
 8005a2c:	4822      	ldr	r0, [pc, #136]	@ (8005ab8 <vTaskStartScheduler+0xbc>)
 8005a2e:	f7ff fe09 	bl	8005644 <xTaskCreateStatic>
 8005a32:	4603      	mov	r3, r0
 8005a34:	4a21      	ldr	r2, [pc, #132]	@ (8005abc <vTaskStartScheduler+0xc0>)
 8005a36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a38:	4b20      	ldr	r3, [pc, #128]	@ (8005abc <vTaskStartScheduler+0xc0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e001      	b.n	8005a4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d102      	bne.n	8005a56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a50:	f000 fd04 	bl	800645c <xTimerCreateTimerTask>
 8005a54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d116      	bne.n	8005a8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	613b      	str	r3, [r7, #16]
}
 8005a6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a70:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <vTaskStartScheduler+0xc4>)
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a78:	4b12      	ldr	r3, [pc, #72]	@ (8005ac4 <vTaskStartScheduler+0xc8>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a7e:	4b12      	ldr	r3, [pc, #72]	@ (8005ac8 <vTaskStartScheduler+0xcc>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a84:	f001 f8d4 	bl	8006c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a88:	e00f      	b.n	8005aaa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d10b      	bne.n	8005aaa <vTaskStartScheduler+0xae>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <vTaskStartScheduler+0xaa>
}
 8005aaa:	bf00      	nop
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	0800a1ac 	.word	0x0800a1ac
 8005ab8:	080060ed 	.word	0x080060ed
 8005abc:	200010d8 	.word	0x200010d8
 8005ac0:	200010d4 	.word	0x200010d4
 8005ac4:	200010c0 	.word	0x200010c0
 8005ac8:	200010b8 	.word	0x200010b8

08005acc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ad0:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <vTaskSuspendAll+0x18>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	4a03      	ldr	r2, [pc, #12]	@ (8005ae4 <vTaskSuspendAll+0x18>)
 8005ad8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ada:	bf00      	nop
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	200010dc 	.word	0x200010dc

08005ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005af6:	4b42      	ldr	r3, [pc, #264]	@ (8005c00 <xTaskResumeAll+0x118>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <xTaskResumeAll+0x2e>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	603b      	str	r3, [r7, #0]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b16:	f001 f92f 	bl	8006d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b1a:	4b39      	ldr	r3, [pc, #228]	@ (8005c00 <xTaskResumeAll+0x118>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <xTaskResumeAll+0x118>)
 8005b22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b24:	4b36      	ldr	r3, [pc, #216]	@ (8005c00 <xTaskResumeAll+0x118>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d162      	bne.n	8005bf2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b2c:	4b35      	ldr	r3, [pc, #212]	@ (8005c04 <xTaskResumeAll+0x11c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d05e      	beq.n	8005bf2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b34:	e02f      	b.n	8005b96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b36:	4b34      	ldr	r3, [pc, #208]	@ (8005c08 <xTaskResumeAll+0x120>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3318      	adds	r3, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff f81e 	bl	8004b84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff f819 	bl	8004b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b56:	4b2d      	ldr	r3, [pc, #180]	@ (8005c0c <xTaskResumeAll+0x124>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d903      	bls.n	8005b66 <xTaskResumeAll+0x7e>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	4a2a      	ldr	r2, [pc, #168]	@ (8005c0c <xTaskResumeAll+0x124>)
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4a27      	ldr	r2, [pc, #156]	@ (8005c10 <xTaskResumeAll+0x128>)
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f7fe ffa4 	bl	8004aca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b86:	4b23      	ldr	r3, [pc, #140]	@ (8005c14 <xTaskResumeAll+0x12c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d302      	bcc.n	8005b96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b90:	4b21      	ldr	r3, [pc, #132]	@ (8005c18 <xTaskResumeAll+0x130>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b96:	4b1c      	ldr	r3, [pc, #112]	@ (8005c08 <xTaskResumeAll+0x120>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1cb      	bne.n	8005b36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ba4:	f000 fb58 	bl	8006258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c1c <xTaskResumeAll+0x134>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bb4:	f000 f846 	bl	8005c44 <xTaskIncrementTick>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005bbe:	4b16      	ldr	r3, [pc, #88]	@ (8005c18 <xTaskResumeAll+0x130>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f1      	bne.n	8005bb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005bd0:	4b12      	ldr	r3, [pc, #72]	@ (8005c1c <xTaskResumeAll+0x134>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bd6:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <xTaskResumeAll+0x130>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005be2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c20 <xTaskResumeAll+0x138>)
 8005be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bf2:	f001 f8f3 	bl	8006ddc <vPortExitCritical>

	return xAlreadyYielded;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	200010dc 	.word	0x200010dc
 8005c04:	200010b4 	.word	0x200010b4
 8005c08:	20001074 	.word	0x20001074
 8005c0c:	200010bc 	.word	0x200010bc
 8005c10:	20000be4 	.word	0x20000be4
 8005c14:	20000be0 	.word	0x20000be0
 8005c18:	200010c8 	.word	0x200010c8
 8005c1c:	200010c4 	.word	0x200010c4
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c2a:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <xTaskGetTickCount+0x1c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c30:	687b      	ldr	r3, [r7, #4]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	200010b8 	.word	0x200010b8

08005c44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8005d8c <xTaskIncrementTick+0x148>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f040 8090 	bne.w	8005d78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c58:	4b4d      	ldr	r3, [pc, #308]	@ (8005d90 <xTaskIncrementTick+0x14c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c60:	4a4b      	ldr	r2, [pc, #300]	@ (8005d90 <xTaskIncrementTick+0x14c>)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d121      	bne.n	8005cb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c6c:	4b49      	ldr	r3, [pc, #292]	@ (8005d94 <xTaskIncrementTick+0x150>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	603b      	str	r3, [r7, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	e7fd      	b.n	8005c8a <xTaskIncrementTick+0x46>
 8005c8e:	4b41      	ldr	r3, [pc, #260]	@ (8005d94 <xTaskIncrementTick+0x150>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	4b40      	ldr	r3, [pc, #256]	@ (8005d98 <xTaskIncrementTick+0x154>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3e      	ldr	r2, [pc, #248]	@ (8005d94 <xTaskIncrementTick+0x150>)
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d98 <xTaskIncrementTick+0x154>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8005d9c <xTaskIncrementTick+0x158>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8005d9c <xTaskIncrementTick+0x158>)
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	f000 fad4 	bl	8006258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8005da0 <xTaskIncrementTick+0x15c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d349      	bcc.n	8005d4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cba:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <xTaskIncrementTick+0x150>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc4:	4b36      	ldr	r3, [pc, #216]	@ (8005da0 <xTaskIncrementTick+0x15c>)
 8005cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cca:	601a      	str	r2, [r3, #0]
					break;
 8005ccc:	e03f      	b.n	8005d4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cce:	4b31      	ldr	r3, [pc, #196]	@ (8005d94 <xTaskIncrementTick+0x150>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d203      	bcs.n	8005cee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8005da0 <xTaskIncrementTick+0x15c>)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cec:	e02f      	b.n	8005d4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe ff46 	bl	8004b84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	3318      	adds	r3, #24
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe ff3d 	bl	8004b84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0e:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <xTaskIncrementTick+0x160>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d903      	bls.n	8005d1e <xTaskIncrementTick+0xda>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1a:	4a22      	ldr	r2, [pc, #136]	@ (8005da4 <xTaskIncrementTick+0x160>)
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <xTaskIncrementTick+0x164>)
 8005d2c:	441a      	add	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7fe fec8 	bl	8004aca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dac <xTaskIncrementTick+0x168>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d3b8      	bcc.n	8005cba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d4c:	e7b5      	b.n	8005cba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d4e:	4b17      	ldr	r3, [pc, #92]	@ (8005dac <xTaskIncrementTick+0x168>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d54:	4914      	ldr	r1, [pc, #80]	@ (8005da8 <xTaskIncrementTick+0x164>)
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d901      	bls.n	8005d6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d6a:	4b11      	ldr	r3, [pc, #68]	@ (8005db0 <xTaskIncrementTick+0x16c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e004      	b.n	8005d82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d78:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <xTaskIncrementTick+0x170>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005db4 <xTaskIncrementTick+0x170>)
 8005d80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d82:	697b      	ldr	r3, [r7, #20]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	200010dc 	.word	0x200010dc
 8005d90:	200010b8 	.word	0x200010b8
 8005d94:	2000106c 	.word	0x2000106c
 8005d98:	20001070 	.word	0x20001070
 8005d9c:	200010cc 	.word	0x200010cc
 8005da0:	200010d4 	.word	0x200010d4
 8005da4:	200010bc 	.word	0x200010bc
 8005da8:	20000be4 	.word	0x20000be4
 8005dac:	20000be0 	.word	0x20000be0
 8005db0:	200010c8 	.word	0x200010c8
 8005db4:	200010c4 	.word	0x200010c4

08005db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dbe:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <vTaskSwitchContext+0xa8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dc6:	4b27      	ldr	r3, [pc, #156]	@ (8005e64 <vTaskSwitchContext+0xac>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dcc:	e042      	b.n	8005e54 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005dce:	4b25      	ldr	r3, [pc, #148]	@ (8005e64 <vTaskSwitchContext+0xac>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd4:	4b24      	ldr	r3, [pc, #144]	@ (8005e68 <vTaskSwitchContext+0xb0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e011      	b.n	8005e00 <vTaskSwitchContext+0x48>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <vTaskSwitchContext+0x42>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	607b      	str	r3, [r7, #4]
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	e7fd      	b.n	8005df6 <vTaskSwitchContext+0x3e>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	491a      	ldr	r1, [pc, #104]	@ (8005e6c <vTaskSwitchContext+0xb4>)
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0e3      	beq.n	8005ddc <vTaskSwitchContext+0x24>
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a13      	ldr	r2, [pc, #76]	@ (8005e6c <vTaskSwitchContext+0xb4>)
 8005e20:	4413      	add	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	3308      	adds	r3, #8
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d104      	bne.n	8005e44 <vTaskSwitchContext+0x8c>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	4a09      	ldr	r2, [pc, #36]	@ (8005e70 <vTaskSwitchContext+0xb8>)
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4a06      	ldr	r2, [pc, #24]	@ (8005e68 <vTaskSwitchContext+0xb0>)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6013      	str	r3, [r2, #0]
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	200010dc 	.word	0x200010dc
 8005e64:	200010c8 	.word	0x200010c8
 8005e68:	200010bc 	.word	0x200010bc
 8005e6c:	20000be4 	.word	0x20000be4
 8005e70:	20000be0 	.word	0x20000be0

08005e74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60fb      	str	r3, [r7, #12]
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	e7fd      	b.n	8005e98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e9c:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <vTaskPlaceOnEventList+0x48>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3318      	adds	r3, #24
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fe fe34 	bl	8004b12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005eaa:	2101      	movs	r1, #1
 8005eac:	6838      	ldr	r0, [r7, #0]
 8005eae:	f000 fa81 	bl	80063b4 <prvAddCurrentTaskToDelayedList>
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000be0 	.word	0x20000be0

08005ec0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	617b      	str	r3, [r7, #20]
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	e7fd      	b.n	8005ee6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eea:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <vTaskPlaceOnEventListRestricted+0x54>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3318      	adds	r3, #24
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f7fe fde9 	bl	8004aca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005efe:	f04f 33ff 	mov.w	r3, #4294967295
 8005f02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f000 fa54 	bl	80063b4 <prvAddCurrentTaskToDelayedList>
	}
 8005f0c:	bf00      	nop
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000be0 	.word	0x20000be0

08005f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60fb      	str	r3, [r7, #12]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	3318      	adds	r3, #24
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fe1a 	bl	8004b84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f50:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc8 <xTaskRemoveFromEventList+0xb0>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11d      	bne.n	8005f94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fe11 	bl	8004b84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f66:	4b19      	ldr	r3, [pc, #100]	@ (8005fcc <xTaskRemoveFromEventList+0xb4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d903      	bls.n	8005f76 <xTaskRemoveFromEventList+0x5e>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	4a16      	ldr	r2, [pc, #88]	@ (8005fcc <xTaskRemoveFromEventList+0xb4>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a13      	ldr	r2, [pc, #76]	@ (8005fd0 <xTaskRemoveFromEventList+0xb8>)
 8005f84:	441a      	add	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fe fd9c 	bl	8004aca <vListInsertEnd>
 8005f92:	e005      	b.n	8005fa0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3318      	adds	r3, #24
 8005f98:	4619      	mov	r1, r3
 8005f9a:	480e      	ldr	r0, [pc, #56]	@ (8005fd4 <xTaskRemoveFromEventList+0xbc>)
 8005f9c:	f7fe fd95 	bl	8004aca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd8 <xTaskRemoveFromEventList+0xc0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d905      	bls.n	8005fba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <xTaskRemoveFromEventList+0xc4>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e001      	b.n	8005fbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fbe:	697b      	ldr	r3, [r7, #20]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	200010dc 	.word	0x200010dc
 8005fcc:	200010bc 	.word	0x200010bc
 8005fd0:	20000be4 	.word	0x20000be4
 8005fd4:	20001074 	.word	0x20001074
 8005fd8:	20000be0 	.word	0x20000be0
 8005fdc:	200010c8 	.word	0x200010c8

08005fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fe8:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <vTaskInternalSetTimeOutState+0x24>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ff0:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <vTaskInternalSetTimeOutState+0x28>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	605a      	str	r2, [r3, #4]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	200010cc 	.word	0x200010cc
 8006008:	200010b8 	.word	0x200010b8

0800600c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10b      	bne.n	8006034 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	613b      	str	r3, [r7, #16]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	60fb      	str	r3, [r7, #12]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006052:	f000 fe91 	bl	8006d78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006056:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <xTaskCheckForTimeOut+0xc0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606e:	d102      	bne.n	8006076 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	e023      	b.n	80060be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b15      	ldr	r3, [pc, #84]	@ (80060d0 <xTaskCheckForTimeOut+0xc4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d007      	beq.n	8006092 <xTaskCheckForTimeOut+0x86>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e015      	b.n	80060be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	429a      	cmp	r2, r3
 800609a:	d20b      	bcs.n	80060b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1ad2      	subs	r2, r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff99 	bl	8005fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	e004      	b.n	80060be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060be:	f000 fe8d 	bl	8006ddc <vPortExitCritical>

	return xReturn;
 80060c2:	69fb      	ldr	r3, [r7, #28]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200010b8 	.word	0x200010b8
 80060d0:	200010cc 	.word	0x200010cc

080060d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060d8:	4b03      	ldr	r3, [pc, #12]	@ (80060e8 <vTaskMissedYield+0x14>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
}
 80060de:	bf00      	nop
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	200010c8 	.word	0x200010c8

080060ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060f4:	f000 f852 	bl	800619c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060f8:	4b06      	ldr	r3, [pc, #24]	@ (8006114 <prvIdleTask+0x28>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d9f9      	bls.n	80060f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006100:	4b05      	ldr	r3, [pc, #20]	@ (8006118 <prvIdleTask+0x2c>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006110:	e7f0      	b.n	80060f4 <prvIdleTask+0x8>
 8006112:	bf00      	nop
 8006114:	20000be4 	.word	0x20000be4
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	e00c      	b.n	8006142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a12      	ldr	r2, [pc, #72]	@ (800617c <prvInitialiseTaskLists+0x60>)
 8006134:	4413      	add	r3, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe fc9a 	bl	8004a70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3301      	adds	r3, #1
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b37      	cmp	r3, #55	@ 0x37
 8006146:	d9ef      	bls.n	8006128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006148:	480d      	ldr	r0, [pc, #52]	@ (8006180 <prvInitialiseTaskLists+0x64>)
 800614a:	f7fe fc91 	bl	8004a70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800614e:	480d      	ldr	r0, [pc, #52]	@ (8006184 <prvInitialiseTaskLists+0x68>)
 8006150:	f7fe fc8e 	bl	8004a70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006154:	480c      	ldr	r0, [pc, #48]	@ (8006188 <prvInitialiseTaskLists+0x6c>)
 8006156:	f7fe fc8b 	bl	8004a70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800615a:	480c      	ldr	r0, [pc, #48]	@ (800618c <prvInitialiseTaskLists+0x70>)
 800615c:	f7fe fc88 	bl	8004a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006160:	480b      	ldr	r0, [pc, #44]	@ (8006190 <prvInitialiseTaskLists+0x74>)
 8006162:	f7fe fc85 	bl	8004a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006166:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <prvInitialiseTaskLists+0x78>)
 8006168:	4a05      	ldr	r2, [pc, #20]	@ (8006180 <prvInitialiseTaskLists+0x64>)
 800616a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800616c:	4b0a      	ldr	r3, [pc, #40]	@ (8006198 <prvInitialiseTaskLists+0x7c>)
 800616e:	4a05      	ldr	r2, [pc, #20]	@ (8006184 <prvInitialiseTaskLists+0x68>)
 8006170:	601a      	str	r2, [r3, #0]
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000be4 	.word	0x20000be4
 8006180:	20001044 	.word	0x20001044
 8006184:	20001058 	.word	0x20001058
 8006188:	20001074 	.word	0x20001074
 800618c:	20001088 	.word	0x20001088
 8006190:	200010a0 	.word	0x200010a0
 8006194:	2000106c 	.word	0x2000106c
 8006198:	20001070 	.word	0x20001070

0800619c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a2:	e019      	b.n	80061d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061a4:	f000 fde8 	bl	8006d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a8:	4b10      	ldr	r3, [pc, #64]	@ (80061ec <prvCheckTasksWaitingTermination+0x50>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe fce5 	bl	8004b84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061ba:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <prvCheckTasksWaitingTermination+0x54>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3b01      	subs	r3, #1
 80061c0:	4a0b      	ldr	r2, [pc, #44]	@ (80061f0 <prvCheckTasksWaitingTermination+0x54>)
 80061c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c4:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <prvCheckTasksWaitingTermination+0x58>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	4a0a      	ldr	r2, [pc, #40]	@ (80061f4 <prvCheckTasksWaitingTermination+0x58>)
 80061cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ce:	f000 fe05 	bl	8006ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f810 	bl	80061f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061d8:	4b06      	ldr	r3, [pc, #24]	@ (80061f4 <prvCheckTasksWaitingTermination+0x58>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e1      	bne.n	80061a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20001088 	.word	0x20001088
 80061f0:	200010b4 	.word	0x200010b4
 80061f4:	2000109c 	.word	0x2000109c

080061f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006206:	2b00      	cmp	r3, #0
 8006208:	d108      	bne.n	800621c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ffa2 	bl	8007158 <vPortFree>
				vPortFree( pxTCB );
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 ff9f 	bl	8007158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800621a:	e019      	b.n	8006250 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006222:	2b01      	cmp	r3, #1
 8006224:	d103      	bne.n	800622e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 ff96 	bl	8007158 <vPortFree>
	}
 800622c:	e010      	b.n	8006250 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006234:	2b02      	cmp	r3, #2
 8006236:	d00b      	beq.n	8006250 <prvDeleteTCB+0x58>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	60fb      	str	r3, [r7, #12]
}
 800624a:	bf00      	nop
 800624c:	bf00      	nop
 800624e:	e7fd      	b.n	800624c <prvDeleteTCB+0x54>
	}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625e:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <prvResetNextTaskUnblockTime+0x38>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006268:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <prvResetNextTaskUnblockTime+0x3c>)
 800626a:	f04f 32ff 	mov.w	r2, #4294967295
 800626e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006270:	e008      	b.n	8006284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006272:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <prvResetNextTaskUnblockTime+0x38>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a04      	ldr	r2, [pc, #16]	@ (8006294 <prvResetNextTaskUnblockTime+0x3c>)
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	2000106c 	.word	0x2000106c
 8006294:	200010d4 	.word	0x200010d4

08006298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <xTaskGetSchedulerState+0x34>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062a6:	2301      	movs	r3, #1
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	e008      	b.n	80062be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ac:	4b08      	ldr	r3, [pc, #32]	@ (80062d0 <xTaskGetSchedulerState+0x38>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062b4:	2302      	movs	r3, #2
 80062b6:	607b      	str	r3, [r7, #4]
 80062b8:	e001      	b.n	80062be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062ba:	2300      	movs	r3, #0
 80062bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062be:	687b      	ldr	r3, [r7, #4]
	}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	200010c0 	.word	0x200010c0
 80062d0:	200010dc 	.word	0x200010dc

080062d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d058      	beq.n	800639c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062ea:	4b2f      	ldr	r3, [pc, #188]	@ (80063a8 <xTaskPriorityDisinherit+0xd4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d00b      	beq.n	800630c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	60fb      	str	r3, [r7, #12]
}
 8006306:	bf00      	nop
 8006308:	bf00      	nop
 800630a:	e7fd      	b.n	8006308 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60bb      	str	r3, [r7, #8]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006330:	1e5a      	subs	r2, r3, #1
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800633e:	429a      	cmp	r2, r3
 8006340:	d02c      	beq.n	800639c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006346:	2b00      	cmp	r3, #0
 8006348:	d128      	bne.n	800639c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	3304      	adds	r3, #4
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fc18 	bl	8004b84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636c:	4b0f      	ldr	r3, [pc, #60]	@ (80063ac <xTaskPriorityDisinherit+0xd8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d903      	bls.n	800637c <xTaskPriorityDisinherit+0xa8>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	4a0c      	ldr	r2, [pc, #48]	@ (80063ac <xTaskPriorityDisinherit+0xd8>)
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4a09      	ldr	r2, [pc, #36]	@ (80063b0 <xTaskPriorityDisinherit+0xdc>)
 800638a:	441a      	add	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	3304      	adds	r3, #4
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f7fe fb99 	bl	8004aca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800639c:	697b      	ldr	r3, [r7, #20]
	}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000be0 	.word	0x20000be0
 80063ac:	200010bc 	.word	0x200010bc
 80063b0:	20000be4 	.word	0x20000be4

080063b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063be:	4b21      	ldr	r3, [pc, #132]	@ (8006444 <prvAddCurrentTaskToDelayedList+0x90>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063c4:	4b20      	ldr	r3, [pc, #128]	@ (8006448 <prvAddCurrentTaskToDelayedList+0x94>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fbda 	bl	8004b84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d10a      	bne.n	80063ee <prvAddCurrentTaskToDelayedList+0x3a>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063de:	4b1a      	ldr	r3, [pc, #104]	@ (8006448 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4819      	ldr	r0, [pc, #100]	@ (800644c <prvAddCurrentTaskToDelayedList+0x98>)
 80063e8:	f7fe fb6f 	bl	8004aca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063ec:	e026      	b.n	800643c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4413      	add	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063f6:	4b14      	ldr	r3, [pc, #80]	@ (8006448 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	429a      	cmp	r2, r3
 8006404:	d209      	bcs.n	800641a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006406:	4b12      	ldr	r3, [pc, #72]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b0f      	ldr	r3, [pc, #60]	@ (8006448 <prvAddCurrentTaskToDelayedList+0x94>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3304      	adds	r3, #4
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f7fe fb7d 	bl	8004b12 <vListInsert>
}
 8006418:	e010      	b.n	800643c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800641a:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <prvAddCurrentTaskToDelayedList+0xa0>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <prvAddCurrentTaskToDelayedList+0x94>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7fe fb73 	bl	8004b12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <prvAddCurrentTaskToDelayedList+0xa4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d202      	bcs.n	800643c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	200010b8 	.word	0x200010b8
 8006448:	20000be0 	.word	0x20000be0
 800644c:	200010a0 	.word	0x200010a0
 8006450:	20001070 	.word	0x20001070
 8006454:	2000106c 	.word	0x2000106c
 8006458:	200010d4 	.word	0x200010d4

0800645c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	@ 0x28
 8006460:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006466:	f000 fb13 	bl	8006a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800646a:	4b1d      	ldr	r3, [pc, #116]	@ (80064e0 <xTimerCreateTimerTask+0x84>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d021      	beq.n	80064b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800647a:	1d3a      	adds	r2, r7, #4
 800647c:	f107 0108 	add.w	r1, r7, #8
 8006480:	f107 030c 	add.w	r3, r7, #12
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe fad9 	bl	8004a3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	9202      	str	r2, [sp, #8]
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	2302      	movs	r3, #2
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	2300      	movs	r3, #0
 800649a:	460a      	mov	r2, r1
 800649c:	4911      	ldr	r1, [pc, #68]	@ (80064e4 <xTimerCreateTimerTask+0x88>)
 800649e:	4812      	ldr	r0, [pc, #72]	@ (80064e8 <xTimerCreateTimerTask+0x8c>)
 80064a0:	f7ff f8d0 	bl	8005644 <xTaskCreateStatic>
 80064a4:	4603      	mov	r3, r0
 80064a6:	4a11      	ldr	r2, [pc, #68]	@ (80064ec <xTimerCreateTimerTask+0x90>)
 80064a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064aa:	4b10      	ldr	r3, [pc, #64]	@ (80064ec <xTimerCreateTimerTask+0x90>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064b2:	2301      	movs	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	613b      	str	r3, [r7, #16]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064d4:	697b      	ldr	r3, [r7, #20]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20001110 	.word	0x20001110
 80064e4:	0800a1b4 	.word	0x0800a1b4
 80064e8:	08006629 	.word	0x08006629
 80064ec:	20001114 	.word	0x20001114

080064f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	@ 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064fe:	2300      	movs	r3, #0
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <xTimerGenericCommand+0x30>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	623b      	str	r3, [r7, #32]
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	e7fd      	b.n	800651c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006520:	4b19      	ldr	r3, [pc, #100]	@ (8006588 <xTimerGenericCommand+0x98>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d02a      	beq.n	800657e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b05      	cmp	r3, #5
 8006538:	dc18      	bgt.n	800656c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800653a:	f7ff fead 	bl	8006298 <xTaskGetSchedulerState>
 800653e:	4603      	mov	r3, r0
 8006540:	2b02      	cmp	r3, #2
 8006542:	d109      	bne.n	8006558 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006544:	4b10      	ldr	r3, [pc, #64]	@ (8006588 <xTimerGenericCommand+0x98>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	f107 0110 	add.w	r1, r7, #16
 800654c:	2300      	movs	r3, #0
 800654e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006550:	f7fe fc88 	bl	8004e64 <xQueueGenericSend>
 8006554:	6278      	str	r0, [r7, #36]	@ 0x24
 8006556:	e012      	b.n	800657e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006558:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <xTimerGenericCommand+0x98>)
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	f107 0110 	add.w	r1, r7, #16
 8006560:	2300      	movs	r3, #0
 8006562:	2200      	movs	r2, #0
 8006564:	f7fe fc7e 	bl	8004e64 <xQueueGenericSend>
 8006568:	6278      	str	r0, [r7, #36]	@ 0x24
 800656a:	e008      	b.n	800657e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800656c:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <xTimerGenericCommand+0x98>)
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	f107 0110 	add.w	r1, r7, #16
 8006574:	2300      	movs	r3, #0
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	f7fe fd76 	bl	8005068 <xQueueGenericSendFromISR>
 800657c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006580:	4618      	mov	r0, r3
 8006582:	3728      	adds	r7, #40	@ 0x28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20001110 	.word	0x20001110

0800658c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af02      	add	r7, sp, #8
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006596:	4b23      	ldr	r3, [pc, #140]	@ (8006624 <prvProcessExpiredTimer+0x98>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe faed 	bl	8004b84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d023      	beq.n	8006600 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	699a      	ldr	r2, [r3, #24]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	18d1      	adds	r1, r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	6978      	ldr	r0, [r7, #20]
 80065c6:	f000 f8d5 	bl	8006774 <prvInsertTimerInActiveList>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d020      	beq.n	8006612 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065d0:	2300      	movs	r3, #0
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	2100      	movs	r1, #0
 80065da:	6978      	ldr	r0, [r7, #20]
 80065dc:	f7ff ff88 	bl	80064f0 <xTimerGenericCommand>
 80065e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d114      	bne.n	8006612 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	60fb      	str	r3, [r7, #12]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	b2da      	uxtb	r2, r3
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	4798      	blx	r3
}
 800661a:	bf00      	nop
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20001108 	.word	0x20001108

08006628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f859 	bl	80066ec <prvGetNextExpireTime>
 800663a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4619      	mov	r1, r3
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f805 	bl	8006650 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006646:	f000 f8d7 	bl	80067f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800664a:	bf00      	nop
 800664c:	e7f0      	b.n	8006630 <prvTimerTask+0x8>
	...

08006650 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800665a:	f7ff fa37 	bl	8005acc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800665e:	f107 0308 	add.w	r3, r7, #8
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f866 	bl	8006734 <prvSampleTimeNow>
 8006668:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d130      	bne.n	80066d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <prvProcessTimerOrBlockTask+0x3c>
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	429a      	cmp	r2, r3
 800667c:	d806      	bhi.n	800668c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800667e:	f7ff fa33 	bl	8005ae8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ff81 	bl	800658c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800668a:	e024      	b.n	80066d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006692:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <prvProcessTimerOrBlockTask+0x90>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <prvProcessTimerOrBlockTask+0x50>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <prvProcessTimerOrBlockTask+0x52>
 80066a0:	2300      	movs	r3, #0
 80066a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066a4:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <prvProcessTimerOrBlockTask+0x94>)
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	f7fe ff93 	bl	80055dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066b6:	f7ff fa17 	bl	8005ae8 <xTaskResumeAll>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066c0:	4b09      	ldr	r3, [pc, #36]	@ (80066e8 <prvProcessTimerOrBlockTask+0x98>)
 80066c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
}
 80066d0:	e001      	b.n	80066d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066d2:	f7ff fa09 	bl	8005ae8 <xTaskResumeAll>
}
 80066d6:	bf00      	nop
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	2000110c 	.word	0x2000110c
 80066e4:	20001110 	.word	0x20001110
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006730 <prvGetNextExpireTime+0x44>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <prvGetNextExpireTime+0x16>
 80066fe:	2201      	movs	r2, #1
 8006700:	e000      	b.n	8006704 <prvGetNextExpireTime+0x18>
 8006702:	2200      	movs	r2, #0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006710:	4b07      	ldr	r3, [pc, #28]	@ (8006730 <prvGetNextExpireTime+0x44>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e001      	b.n	8006720 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006720:	68fb      	ldr	r3, [r7, #12]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20001108 	.word	0x20001108

08006734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800673c:	f7ff fa72 	bl	8005c24 <xTaskGetTickCount>
 8006740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006742:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <prvSampleTimeNow+0x3c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	429a      	cmp	r2, r3
 800674a:	d205      	bcs.n	8006758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800674c:	f000 f93a 	bl	80069c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e002      	b.n	800675e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800675e:	4a04      	ldr	r2, [pc, #16]	@ (8006770 <prvSampleTimeNow+0x3c>)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006764:	68fb      	ldr	r3, [r7, #12]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20001118 	.word	0x20001118

08006774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	429a      	cmp	r2, r3
 8006798:	d812      	bhi.n	80067c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d302      	bcc.n	80067ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e01b      	b.n	80067e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067ae:	4b10      	ldr	r3, [pc, #64]	@ (80067f0 <prvInsertTimerInActiveList+0x7c>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f7fe f9aa 	bl	8004b12 <vListInsert>
 80067be:	e012      	b.n	80067e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d206      	bcs.n	80067d6 <prvInsertTimerInActiveList+0x62>
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d302      	bcc.n	80067d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067d0:	2301      	movs	r3, #1
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	e007      	b.n	80067e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067d6:	4b07      	ldr	r3, [pc, #28]	@ (80067f4 <prvInsertTimerInActiveList+0x80>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3304      	adds	r3, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f7fe f996 	bl	8004b12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067e6:	697b      	ldr	r3, [r7, #20]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	2000110c 	.word	0x2000110c
 80067f4:	20001108 	.word	0x20001108

080067f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08e      	sub	sp, #56	@ 0x38
 80067fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067fe:	e0ce      	b.n	800699e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	da19      	bge.n	800683a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	3304      	adds	r3, #4
 800680a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800680c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	61fb      	str	r3, [r7, #28]
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006830:	6850      	ldr	r0, [r2, #4]
 8006832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006834:	6892      	ldr	r2, [r2, #8]
 8006836:	4611      	mov	r1, r2
 8006838:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f2c0 80ae 	blt.w	800699e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe f996 	bl	8004b84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006858:	463b      	mov	r3, r7
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff ff6a 	bl	8006734 <prvSampleTimeNow>
 8006860:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b09      	cmp	r3, #9
 8006866:	f200 8097 	bhi.w	8006998 <prvProcessReceivedCommands+0x1a0>
 800686a:	a201      	add	r2, pc, #4	@ (adr r2, 8006870 <prvProcessReceivedCommands+0x78>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	08006899 	.word	0x08006899
 8006874:	08006899 	.word	0x08006899
 8006878:	08006899 	.word	0x08006899
 800687c:	0800690f 	.word	0x0800690f
 8006880:	08006923 	.word	0x08006923
 8006884:	0800696f 	.word	0x0800696f
 8006888:	08006899 	.word	0x08006899
 800688c:	08006899 	.word	0x08006899
 8006890:	0800690f 	.word	0x0800690f
 8006894:	08006923 	.word	0x08006923
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	18d1      	adds	r1, r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068b8:	f7ff ff5c 	bl	8006774 <prvInsertTimerInActiveList>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d06c      	beq.n	800699c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d061      	beq.n	800699c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	441a      	add	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	2100      	movs	r1, #0
 80068e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068ea:	f7ff fe01 	bl	80064f0 <xTimerGenericCommand>
 80068ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d152      	bne.n	800699c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61bb      	str	r3, [r7, #24]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	b2da      	uxtb	r2, r3
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006920:	e03d      	b.n	800699e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	b2da      	uxtb	r2, r3
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	617b      	str	r3, [r7, #20]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	18d1      	adds	r1, r2, r3
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006968:	f7ff ff04 	bl	8006774 <prvInsertTimerInActiveList>
					break;
 800696c:	e017      	b.n	800699e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800697c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800697e:	f000 fbeb 	bl	8007158 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006982:	e00c      	b.n	800699e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006996:	e002      	b.n	800699e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006998:	bf00      	nop
 800699a:	e000      	b.n	800699e <prvProcessReceivedCommands+0x1a6>
					break;
 800699c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800699e:	4b08      	ldr	r3, [pc, #32]	@ (80069c0 <prvProcessReceivedCommands+0x1c8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	1d39      	adds	r1, r7, #4
 80069a4:	2200      	movs	r2, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fbfc 	bl	80051a4 <xQueueReceive>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f47f af26 	bne.w	8006800 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	3730      	adds	r7, #48	@ 0x30
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20001110 	.word	0x20001110

080069c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ca:	e049      	b.n	8006a60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006a88 <prvSwitchTimerLists+0xc4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006a88 <prvSwitchTimerLists+0xc4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe f8cd 	bl	8004b84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02f      	beq.n	8006a60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4413      	add	r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d90e      	bls.n	8006a30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a88 <prvSwitchTimerLists+0xc4>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7fe f872 	bl	8004b12 <vListInsert>
 8006a2e:	e017      	b.n	8006a60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a30:	2300      	movs	r3, #0
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2300      	movs	r3, #0
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	2100      	movs	r1, #0
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff fd58 	bl	80064f0 <xTimerGenericCommand>
 8006a40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	603b      	str	r3, [r7, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a60:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <prvSwitchTimerLists+0xc4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1b0      	bne.n	80069cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <prvSwitchTimerLists+0xc4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a70:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <prvSwitchTimerLists+0xc8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a04      	ldr	r2, [pc, #16]	@ (8006a88 <prvSwitchTimerLists+0xc4>)
 8006a76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a78:	4a04      	ldr	r2, [pc, #16]	@ (8006a8c <prvSwitchTimerLists+0xc8>)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6013      	str	r3, [r2, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20001108 	.word	0x20001108
 8006a8c:	2000110c 	.word	0x2000110c

08006a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a96:	f000 f96f 	bl	8006d78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a9a:	4b15      	ldr	r3, [pc, #84]	@ (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d120      	bne.n	8006ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006aa2:	4814      	ldr	r0, [pc, #80]	@ (8006af4 <prvCheckForValidListAndQueue+0x64>)
 8006aa4:	f7fd ffe4 	bl	8004a70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006aa8:	4813      	ldr	r0, [pc, #76]	@ (8006af8 <prvCheckForValidListAndQueue+0x68>)
 8006aaa:	f7fd ffe1 	bl	8004a70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006aae:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <prvCheckForValidListAndQueue+0x6c>)
 8006ab0:	4a10      	ldr	r2, [pc, #64]	@ (8006af4 <prvCheckForValidListAndQueue+0x64>)
 8006ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ab4:	4b12      	ldr	r3, [pc, #72]	@ (8006b00 <prvCheckForValidListAndQueue+0x70>)
 8006ab6:	4a10      	ldr	r2, [pc, #64]	@ (8006af8 <prvCheckForValidListAndQueue+0x68>)
 8006ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006aba:	2300      	movs	r3, #0
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4b11      	ldr	r3, [pc, #68]	@ (8006b04 <prvCheckForValidListAndQueue+0x74>)
 8006ac0:	4a11      	ldr	r2, [pc, #68]	@ (8006b08 <prvCheckForValidListAndQueue+0x78>)
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	200a      	movs	r0, #10
 8006ac6:	f7fe f8f1 	bl	8004cac <xQueueGenericCreateStatic>
 8006aca:	4603      	mov	r3, r0
 8006acc:	4a08      	ldr	r2, [pc, #32]	@ (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ad0:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <prvCheckForValidListAndQueue+0x60>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	490b      	ldr	r1, [pc, #44]	@ (8006b0c <prvCheckForValidListAndQueue+0x7c>)
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fd52 	bl	8005588 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ae4:	f000 f97a 	bl	8006ddc <vPortExitCritical>
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20001110 	.word	0x20001110
 8006af4:	200010e0 	.word	0x200010e0
 8006af8:	200010f4 	.word	0x200010f4
 8006afc:	20001108 	.word	0x20001108
 8006b00:	2000110c 	.word	0x2000110c
 8006b04:	200011bc 	.word	0x200011bc
 8006b08:	2000111c 	.word	0x2000111c
 8006b0c:	0800a1bc 	.word	0x0800a1bc

08006b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3b04      	subs	r3, #4
 8006b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3b04      	subs	r3, #4
 8006b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b40:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <pxPortInitialiseStack+0x64>)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3b14      	subs	r3, #20
 8006b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3b04      	subs	r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f06f 0202 	mvn.w	r2, #2
 8006b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3b20      	subs	r3, #32
 8006b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	08006b79 	.word	0x08006b79

08006b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b82:	4b13      	ldr	r3, [pc, #76]	@ (8006bd0 <prvTaskExitError+0x58>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d00b      	beq.n	8006ba4 <prvTaskExitError+0x2c>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60fb      	str	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <prvTaskExitError+0x28>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	60bb      	str	r3, [r7, #8]
}
 8006bb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bb8:	bf00      	nop
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0fc      	beq.n	8006bba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000010 	.word	0x20000010
	...

08006be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006be0:	4b07      	ldr	r3, [pc, #28]	@ (8006c00 <pxCurrentTCBConst2>)
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	6808      	ldr	r0, [r1, #0]
 8006be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	f380 8809 	msr	PSP, r0
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8811 	msr	BASEPRI, r0
 8006bfa:	4770      	bx	lr
 8006bfc:	f3af 8000 	nop.w

08006c00 <pxCurrentTCBConst2>:
 8006c00:	20000be0 	.word	0x20000be0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop

08006c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c08:	4808      	ldr	r0, [pc, #32]	@ (8006c2c <prvPortStartFirstTask+0x24>)
 8006c0a:	6800      	ldr	r0, [r0, #0]
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f380 8808 	msr	MSP, r0
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8814 	msr	CONTROL, r0
 8006c1a:	b662      	cpsie	i
 8006c1c:	b661      	cpsie	f
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	df00      	svc	0
 8006c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed08 	.word	0xe000ed08

08006c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c36:	4b47      	ldr	r3, [pc, #284]	@ (8006d54 <xPortStartScheduler+0x124>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a47      	ldr	r2, [pc, #284]	@ (8006d58 <xPortStartScheduler+0x128>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10b      	bne.n	8006c58 <xPortStartScheduler+0x28>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	60fb      	str	r3, [r7, #12]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c58:	4b3e      	ldr	r3, [pc, #248]	@ (8006d54 <xPortStartScheduler+0x124>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d5c <xPortStartScheduler+0x12c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d10b      	bne.n	8006c7a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	613b      	str	r3, [r7, #16]
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c7a:	4b39      	ldr	r3, [pc, #228]	@ (8006d60 <xPortStartScheduler+0x130>)
 8006c7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	22ff      	movs	r2, #255	@ 0xff
 8006c8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	4b31      	ldr	r3, [pc, #196]	@ (8006d64 <xPortStartScheduler+0x134>)
 8006ca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ca2:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006ca4:	2207      	movs	r2, #7
 8006ca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ca8:	e009      	b.n	8006cbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006caa:	4b2f      	ldr	r3, [pc, #188]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc6:	2b80      	cmp	r3, #128	@ 0x80
 8006cc8:	d0ef      	beq.n	8006caa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cca:	4b27      	ldr	r3, [pc, #156]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1c3 0307 	rsb	r3, r3, #7
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d00b      	beq.n	8006cee <xPortStartScheduler+0xbe>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	60bb      	str	r3, [r7, #8]
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	e7fd      	b.n	8006cea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cee:	4b1e      	ldr	r3, [pc, #120]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d00:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d0c:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a16      	ldr	r2, [pc, #88]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d18:	4b14      	ldr	r3, [pc, #80]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a13      	ldr	r2, [pc, #76]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d24:	f000 f8da 	bl	8006edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d28:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <xPortStartScheduler+0x140>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d2e:	f000 f8f9 	bl	8006f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d32:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <xPortStartScheduler+0x144>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a0f      	ldr	r2, [pc, #60]	@ (8006d74 <xPortStartScheduler+0x144>)
 8006d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d3e:	f7ff ff63 	bl	8006c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d42:	f7ff f839 	bl	8005db8 <vTaskSwitchContext>
	prvTaskExitError();
 8006d46:	f7ff ff17 	bl	8006b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	e000ed00 	.word	0xe000ed00
 8006d58:	410fc271 	.word	0x410fc271
 8006d5c:	410fc270 	.word	0x410fc270
 8006d60:	e000e400 	.word	0xe000e400
 8006d64:	2000120c 	.word	0x2000120c
 8006d68:	20001210 	.word	0x20001210
 8006d6c:	e000ed20 	.word	0xe000ed20
 8006d70:	20000010 	.word	0x20000010
 8006d74:	e000ef34 	.word	0xe000ef34

08006d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d92:	4b10      	ldr	r3, [pc, #64]	@ (8006dd4 <vPortEnterCritical+0x5c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3301      	adds	r3, #1
 8006d98:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd4 <vPortEnterCritical+0x5c>)
 8006d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <vPortEnterCritical+0x5c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d110      	bne.n	8006dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006da4:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <vPortEnterCritical+0x60>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	603b      	str	r3, [r7, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <vPortEnterCritical+0x4a>
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000010 	.word	0x20000010
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006de2:	4b12      	ldr	r3, [pc, #72]	@ (8006e2c <vPortExitCritical+0x50>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <vPortExitCritical+0x26>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	607b      	str	r3, [r7, #4]
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	e7fd      	b.n	8006dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e02:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <vPortExitCritical+0x50>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	4a08      	ldr	r2, [pc, #32]	@ (8006e2c <vPortExitCritical+0x50>)
 8006e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e0c:	4b07      	ldr	r3, [pc, #28]	@ (8006e2c <vPortExitCritical+0x50>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <vPortExitCritical+0x44>
 8006e14:	2300      	movs	r3, #0
 8006e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f383 8811 	msr	BASEPRI, r3
}
 8006e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	20000010 	.word	0x20000010

08006e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e30:	f3ef 8009 	mrs	r0, PSP
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <pxCurrentTCBConst>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	f01e 0f10 	tst.w	lr, #16
 8006e40:	bf08      	it	eq
 8006e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e54:	f380 8811 	msr	BASEPRI, r0
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f7fe ffaa 	bl	8005db8 <vTaskSwitchContext>
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f380 8811 	msr	BASEPRI, r0
 8006e6c:	bc09      	pop	{r0, r3}
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	6808      	ldr	r0, [r1, #0]
 8006e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e76:	f01e 0f10 	tst.w	lr, #16
 8006e7a:	bf08      	it	eq
 8006e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e80:	f380 8809 	msr	PSP, r0
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst>:
 8006e90:	20000be0 	.word	0x20000be0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f7fe fec7 	bl	8005c44 <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <xPortSysTickHandler+0x40>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f14 <vPortSetupTimerInterrupt+0x38>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <vPortSetupTimerInterrupt+0x3c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8006f1c <vPortSetupTimerInterrupt+0x40>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	4a09      	ldr	r2, [pc, #36]	@ (8006f20 <vPortSetupTimerInterrupt+0x44>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	4b04      	ldr	r3, [pc, #16]	@ (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	e000e010 	.word	0xe000e010
 8006f14:	e000e018 	.word	0xe000e018
 8006f18:	20000004 	.word	0x20000004
 8006f1c:	10624dd3 	.word	0x10624dd3
 8006f20:	e000e014 	.word	0xe000e014

08006f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f34 <vPortEnableVFP+0x10>
 8006f28:	6801      	ldr	r1, [r0, #0]
 8006f2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006f2e:	6001      	str	r1, [r0, #0]
 8006f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f32:	bf00      	nop
 8006f34:	e000ed88 	.word	0xe000ed88

08006f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f3e:	f3ef 8305 	mrs	r3, IPSR
 8006f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	d915      	bls.n	8006f76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <vPortValidateInterruptPriority+0x74>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f54:	4b16      	ldr	r3, [pc, #88]	@ (8006fb0 <vPortValidateInterruptPriority+0x78>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	7afa      	ldrb	r2, [r7, #11]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d20b      	bcs.n	8006f76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	607b      	str	r3, [r7, #4]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f76:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <vPortValidateInterruptPriority+0x7c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <vPortValidateInterruptPriority+0x80>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d90b      	bls.n	8006f9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	603b      	str	r3, [r7, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vPortValidateInterruptPriority+0x62>
	}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	e000e3f0 	.word	0xe000e3f0
 8006fb0:	2000120c 	.word	0x2000120c
 8006fb4:	e000ed0c 	.word	0xe000ed0c
 8006fb8:	20001210 	.word	0x20001210

08006fbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	@ 0x28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fc8:	f7fe fd80 	bl	8005acc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8007140 <pvPortMalloc+0x184>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fd4:	f000 f924 	bl	8007220 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8007144 <pvPortMalloc+0x188>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 8095 	bne.w	8007110 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01e      	beq.n	800702a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006fec:	2208      	movs	r2, #8
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d015      	beq.n	800702a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f023 0307 	bic.w	r3, r3, #7
 8007004:	3308      	adds	r3, #8
 8007006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <pvPortMalloc+0x6e>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	617b      	str	r3, [r7, #20]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d06f      	beq.n	8007110 <pvPortMalloc+0x154>
 8007030:	4b45      	ldr	r3, [pc, #276]	@ (8007148 <pvPortMalloc+0x18c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	429a      	cmp	r2, r3
 8007038:	d86a      	bhi.n	8007110 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800703a:	4b44      	ldr	r3, [pc, #272]	@ (800714c <pvPortMalloc+0x190>)
 800703c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800703e:	4b43      	ldr	r3, [pc, #268]	@ (800714c <pvPortMalloc+0x190>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007044:	e004      	b.n	8007050 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d903      	bls.n	8007062 <pvPortMalloc+0xa6>
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f1      	bne.n	8007046 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007062:	4b37      	ldr	r3, [pc, #220]	@ (8007140 <pvPortMalloc+0x184>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007068:	429a      	cmp	r2, r3
 800706a:	d051      	beq.n	8007110 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2208      	movs	r2, #8
 8007072:	4413      	add	r3, r2
 8007074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	1ad2      	subs	r2, r2, r3
 8007086:	2308      	movs	r3, #8
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	429a      	cmp	r2, r3
 800708c:	d920      	bls.n	80070d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800708e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <pvPortMalloc+0xfc>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	e7fd      	b.n	80070b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	1ad2      	subs	r2, r2, r3
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070ca:	69b8      	ldr	r0, [r7, #24]
 80070cc:	f000 f90a 	bl	80072e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <pvPortMalloc+0x18c>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	4a1b      	ldr	r2, [pc, #108]	@ (8007148 <pvPortMalloc+0x18c>)
 80070dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070de:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <pvPortMalloc+0x18c>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <pvPortMalloc+0x194>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d203      	bcs.n	80070f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ea:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <pvPortMalloc+0x18c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a18      	ldr	r2, [pc, #96]	@ (8007150 <pvPortMalloc+0x194>)
 80070f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <pvPortMalloc+0x188>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007106:	4b13      	ldr	r3, [pc, #76]	@ (8007154 <pvPortMalloc+0x198>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	4a11      	ldr	r2, [pc, #68]	@ (8007154 <pvPortMalloc+0x198>)
 800710e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007110:	f7fe fcea 	bl	8005ae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <pvPortMalloc+0x17a>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	60fb      	str	r3, [r7, #12]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <pvPortMalloc+0x176>
	return pvReturn;
 8007136:	69fb      	ldr	r3, [r7, #28]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	@ 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20004e1c 	.word	0x20004e1c
 8007144:	20004e30 	.word	0x20004e30
 8007148:	20004e20 	.word	0x20004e20
 800714c:	20004e14 	.word	0x20004e14
 8007150:	20004e24 	.word	0x20004e24
 8007154:	20004e28 	.word	0x20004e28

08007158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d04f      	beq.n	800720a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800716a:	2308      	movs	r3, #8
 800716c:	425b      	negs	r3, r3
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4b25      	ldr	r3, [pc, #148]	@ (8007214 <vPortFree+0xbc>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4013      	ands	r3, r2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <vPortFree+0x46>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60fb      	str	r3, [r7, #12]
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <vPortFree+0x66>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60bb      	str	r3, [r7, #8]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	4b14      	ldr	r3, [pc, #80]	@ (8007214 <vPortFree+0xbc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01e      	beq.n	800720a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d11a      	bne.n	800720a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007214 <vPortFree+0xbc>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	43db      	mvns	r3, r3
 80071de:	401a      	ands	r2, r3
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071e4:	f7fe fc72 	bl	8005acc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007218 <vPortFree+0xc0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4413      	add	r3, r2
 80071f2:	4a09      	ldr	r2, [pc, #36]	@ (8007218 <vPortFree+0xc0>)
 80071f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071f6:	6938      	ldr	r0, [r7, #16]
 80071f8:	f000 f874 	bl	80072e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071fc:	4b07      	ldr	r3, [pc, #28]	@ (800721c <vPortFree+0xc4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3301      	adds	r3, #1
 8007202:	4a06      	ldr	r2, [pc, #24]	@ (800721c <vPortFree+0xc4>)
 8007204:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007206:	f7fe fc6f 	bl	8005ae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800720a:	bf00      	nop
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20004e30 	.word	0x20004e30
 8007218:	20004e20 	.word	0x20004e20
 800721c:	20004e2c 	.word	0x20004e2c

08007220 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007226:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800722a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800722c:	4b27      	ldr	r3, [pc, #156]	@ (80072cc <prvHeapInit+0xac>)
 800722e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00c      	beq.n	8007254 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3307      	adds	r3, #7
 800723e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	4a1f      	ldr	r2, [pc, #124]	@ (80072cc <prvHeapInit+0xac>)
 8007250:	4413      	add	r3, r2
 8007252:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007258:	4a1d      	ldr	r2, [pc, #116]	@ (80072d0 <prvHeapInit+0xb0>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800725e:	4b1c      	ldr	r3, [pc, #112]	@ (80072d0 <prvHeapInit+0xb0>)
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800726c:	2208      	movs	r2, #8
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <prvHeapInit+0xb4>)
 8007280:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007282:	4b14      	ldr	r3, [pc, #80]	@ (80072d4 <prvHeapInit+0xb4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2200      	movs	r2, #0
 8007288:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800728a:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <prvHeapInit+0xb4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	1ad2      	subs	r2, r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072a0:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <prvHeapInit+0xb4>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	4a0a      	ldr	r2, [pc, #40]	@ (80072d8 <prvHeapInit+0xb8>)
 80072ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4a09      	ldr	r2, [pc, #36]	@ (80072dc <prvHeapInit+0xbc>)
 80072b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072b8:	4b09      	ldr	r3, [pc, #36]	@ (80072e0 <prvHeapInit+0xc0>)
 80072ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072be:	601a      	str	r2, [r3, #0]
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	20001214 	.word	0x20001214
 80072d0:	20004e14 	.word	0x20004e14
 80072d4:	20004e1c 	.word	0x20004e1c
 80072d8:	20004e24 	.word	0x20004e24
 80072dc:	20004e20 	.word	0x20004e20
 80072e0:	20004e30 	.word	0x20004e30

080072e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072ec:	4b28      	ldr	r3, [pc, #160]	@ (8007390 <prvInsertBlockIntoFreeList+0xac>)
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e002      	b.n	80072f8 <prvInsertBlockIntoFreeList+0x14>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d8f7      	bhi.n	80072f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	4413      	add	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d108      	bne.n	8007326 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	441a      	add	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	441a      	add	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d118      	bne.n	800736c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b15      	ldr	r3, [pc, #84]	@ (8007394 <prvInsertBlockIntoFreeList+0xb0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d00d      	beq.n	8007362 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	441a      	add	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e008      	b.n	8007374 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <prvInsertBlockIntoFreeList+0xb0>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e003      	b.n	8007374 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d002      	beq.n	8007382 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20004e14 	.word	0x20004e14
 8007394:	20004e1c 	.word	0x20004e1c

08007398 <__cvt>:
 8007398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	ec57 6b10 	vmov	r6, r7, d0
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	460c      	mov	r4, r1
 80073a4:	4619      	mov	r1, r3
 80073a6:	463b      	mov	r3, r7
 80073a8:	bfbb      	ittet	lt
 80073aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073ae:	461f      	movlt	r7, r3
 80073b0:	2300      	movge	r3, #0
 80073b2:	232d      	movlt	r3, #45	@ 0x2d
 80073b4:	700b      	strb	r3, [r1, #0]
 80073b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80073bc:	4691      	mov	r9, r2
 80073be:	f023 0820 	bic.w	r8, r3, #32
 80073c2:	bfbc      	itt	lt
 80073c4:	4632      	movlt	r2, r6
 80073c6:	4616      	movlt	r6, r2
 80073c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073cc:	d005      	beq.n	80073da <__cvt+0x42>
 80073ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80073d2:	d100      	bne.n	80073d6 <__cvt+0x3e>
 80073d4:	3401      	adds	r4, #1
 80073d6:	2102      	movs	r1, #2
 80073d8:	e000      	b.n	80073dc <__cvt+0x44>
 80073da:	2103      	movs	r1, #3
 80073dc:	ab03      	add	r3, sp, #12
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	ab02      	add	r3, sp, #8
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	ec47 6b10 	vmov	d0, r6, r7
 80073e8:	4653      	mov	r3, sl
 80073ea:	4622      	mov	r2, r4
 80073ec:	f000 fe84 	bl	80080f8 <_dtoa_r>
 80073f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80073f4:	4605      	mov	r5, r0
 80073f6:	d119      	bne.n	800742c <__cvt+0x94>
 80073f8:	f019 0f01 	tst.w	r9, #1
 80073fc:	d00e      	beq.n	800741c <__cvt+0x84>
 80073fe:	eb00 0904 	add.w	r9, r0, r4
 8007402:	2200      	movs	r2, #0
 8007404:	2300      	movs	r3, #0
 8007406:	4630      	mov	r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	f7f9 fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 800740e:	b108      	cbz	r0, 8007414 <__cvt+0x7c>
 8007410:	f8cd 900c 	str.w	r9, [sp, #12]
 8007414:	2230      	movs	r2, #48	@ 0x30
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	454b      	cmp	r3, r9
 800741a:	d31e      	bcc.n	800745a <__cvt+0xc2>
 800741c:	9b03      	ldr	r3, [sp, #12]
 800741e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007420:	1b5b      	subs	r3, r3, r5
 8007422:	4628      	mov	r0, r5
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	b004      	add	sp, #16
 8007428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007430:	eb00 0904 	add.w	r9, r0, r4
 8007434:	d1e5      	bne.n	8007402 <__cvt+0x6a>
 8007436:	7803      	ldrb	r3, [r0, #0]
 8007438:	2b30      	cmp	r3, #48	@ 0x30
 800743a:	d10a      	bne.n	8007452 <__cvt+0xba>
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	f7f9 fb60 	bl	8000b08 <__aeabi_dcmpeq>
 8007448:	b918      	cbnz	r0, 8007452 <__cvt+0xba>
 800744a:	f1c4 0401 	rsb	r4, r4, #1
 800744e:	f8ca 4000 	str.w	r4, [sl]
 8007452:	f8da 3000 	ldr.w	r3, [sl]
 8007456:	4499      	add	r9, r3
 8007458:	e7d3      	b.n	8007402 <__cvt+0x6a>
 800745a:	1c59      	adds	r1, r3, #1
 800745c:	9103      	str	r1, [sp, #12]
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e7d9      	b.n	8007416 <__cvt+0x7e>

08007462 <__exponent>:
 8007462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007464:	2900      	cmp	r1, #0
 8007466:	bfba      	itte	lt
 8007468:	4249      	neglt	r1, r1
 800746a:	232d      	movlt	r3, #45	@ 0x2d
 800746c:	232b      	movge	r3, #43	@ 0x2b
 800746e:	2909      	cmp	r1, #9
 8007470:	7002      	strb	r2, [r0, #0]
 8007472:	7043      	strb	r3, [r0, #1]
 8007474:	dd29      	ble.n	80074ca <__exponent+0x68>
 8007476:	f10d 0307 	add.w	r3, sp, #7
 800747a:	461d      	mov	r5, r3
 800747c:	270a      	movs	r7, #10
 800747e:	461a      	mov	r2, r3
 8007480:	fbb1 f6f7 	udiv	r6, r1, r7
 8007484:	fb07 1416 	mls	r4, r7, r6, r1
 8007488:	3430      	adds	r4, #48	@ 0x30
 800748a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800748e:	460c      	mov	r4, r1
 8007490:	2c63      	cmp	r4, #99	@ 0x63
 8007492:	f103 33ff 	add.w	r3, r3, #4294967295
 8007496:	4631      	mov	r1, r6
 8007498:	dcf1      	bgt.n	800747e <__exponent+0x1c>
 800749a:	3130      	adds	r1, #48	@ 0x30
 800749c:	1e94      	subs	r4, r2, #2
 800749e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074a2:	1c41      	adds	r1, r0, #1
 80074a4:	4623      	mov	r3, r4
 80074a6:	42ab      	cmp	r3, r5
 80074a8:	d30a      	bcc.n	80074c0 <__exponent+0x5e>
 80074aa:	f10d 0309 	add.w	r3, sp, #9
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	42ac      	cmp	r4, r5
 80074b2:	bf88      	it	hi
 80074b4:	2300      	movhi	r3, #0
 80074b6:	3302      	adds	r3, #2
 80074b8:	4403      	add	r3, r0
 80074ba:	1a18      	subs	r0, r3, r0
 80074bc:	b003      	add	sp, #12
 80074be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80074c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80074c8:	e7ed      	b.n	80074a6 <__exponent+0x44>
 80074ca:	2330      	movs	r3, #48	@ 0x30
 80074cc:	3130      	adds	r1, #48	@ 0x30
 80074ce:	7083      	strb	r3, [r0, #2]
 80074d0:	70c1      	strb	r1, [r0, #3]
 80074d2:	1d03      	adds	r3, r0, #4
 80074d4:	e7f1      	b.n	80074ba <__exponent+0x58>
	...

080074d8 <_printf_float>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	b08d      	sub	sp, #52	@ 0x34
 80074de:	460c      	mov	r4, r1
 80074e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80074e4:	4616      	mov	r6, r2
 80074e6:	461f      	mov	r7, r3
 80074e8:	4605      	mov	r5, r0
 80074ea:	f000 fcf5 	bl	8007ed8 <_localeconv_r>
 80074ee:	6803      	ldr	r3, [r0, #0]
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7f8 fedc 	bl	80002b0 <strlen>
 80074f8:	2300      	movs	r3, #0
 80074fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80074fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007500:	9005      	str	r0, [sp, #20]
 8007502:	3307      	adds	r3, #7
 8007504:	f023 0307 	bic.w	r3, r3, #7
 8007508:	f103 0208 	add.w	r2, r3, #8
 800750c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007510:	f8d4 b000 	ldr.w	fp, [r4]
 8007514:	f8c8 2000 	str.w	r2, [r8]
 8007518:	e9d3 8900 	ldrd	r8, r9, [r3]
 800751c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	f8cd 8018 	str.w	r8, [sp, #24]
 8007526:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800752a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800752e:	4b9c      	ldr	r3, [pc, #624]	@ (80077a0 <_printf_float+0x2c8>)
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	f7f9 fb1a 	bl	8000b6c <__aeabi_dcmpun>
 8007538:	bb70      	cbnz	r0, 8007598 <_printf_float+0xc0>
 800753a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800753e:	4b98      	ldr	r3, [pc, #608]	@ (80077a0 <_printf_float+0x2c8>)
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	f7f9 faf4 	bl	8000b30 <__aeabi_dcmple>
 8007548:	bb30      	cbnz	r0, 8007598 <_printf_float+0xc0>
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f9 fae3 	bl	8000b1c <__aeabi_dcmplt>
 8007556:	b110      	cbz	r0, 800755e <_printf_float+0x86>
 8007558:	232d      	movs	r3, #45	@ 0x2d
 800755a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800755e:	4a91      	ldr	r2, [pc, #580]	@ (80077a4 <_printf_float+0x2cc>)
 8007560:	4b91      	ldr	r3, [pc, #580]	@ (80077a8 <_printf_float+0x2d0>)
 8007562:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007566:	bf8c      	ite	hi
 8007568:	4690      	movhi	r8, r2
 800756a:	4698      	movls	r8, r3
 800756c:	2303      	movs	r3, #3
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	f02b 0304 	bic.w	r3, fp, #4
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	9700      	str	r7, [sp, #0]
 800757c:	4633      	mov	r3, r6
 800757e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007580:	4621      	mov	r1, r4
 8007582:	4628      	mov	r0, r5
 8007584:	f000 f9d2 	bl	800792c <_printf_common>
 8007588:	3001      	adds	r0, #1
 800758a:	f040 808d 	bne.w	80076a8 <_printf_float+0x1d0>
 800758e:	f04f 30ff 	mov.w	r0, #4294967295
 8007592:	b00d      	add	sp, #52	@ 0x34
 8007594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	4640      	mov	r0, r8
 800759e:	4649      	mov	r1, r9
 80075a0:	f7f9 fae4 	bl	8000b6c <__aeabi_dcmpun>
 80075a4:	b140      	cbz	r0, 80075b8 <_printf_float+0xe0>
 80075a6:	464b      	mov	r3, r9
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfbc      	itt	lt
 80075ac:	232d      	movlt	r3, #45	@ 0x2d
 80075ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075b2:	4a7e      	ldr	r2, [pc, #504]	@ (80077ac <_printf_float+0x2d4>)
 80075b4:	4b7e      	ldr	r3, [pc, #504]	@ (80077b0 <_printf_float+0x2d8>)
 80075b6:	e7d4      	b.n	8007562 <_printf_float+0x8a>
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80075be:	9206      	str	r2, [sp, #24]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	d13b      	bne.n	800763c <_printf_float+0x164>
 80075c4:	2306      	movs	r3, #6
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075cc:	2300      	movs	r3, #0
 80075ce:	6022      	str	r2, [r4, #0]
 80075d0:	9303      	str	r3, [sp, #12]
 80075d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80075d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80075d8:	ab09      	add	r3, sp, #36	@ 0x24
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	6861      	ldr	r1, [r4, #4]
 80075de:	ec49 8b10 	vmov	d0, r8, r9
 80075e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80075e6:	4628      	mov	r0, r5
 80075e8:	f7ff fed6 	bl	8007398 <__cvt>
 80075ec:	9b06      	ldr	r3, [sp, #24]
 80075ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075f0:	2b47      	cmp	r3, #71	@ 0x47
 80075f2:	4680      	mov	r8, r0
 80075f4:	d129      	bne.n	800764a <_printf_float+0x172>
 80075f6:	1cc8      	adds	r0, r1, #3
 80075f8:	db02      	blt.n	8007600 <_printf_float+0x128>
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	4299      	cmp	r1, r3
 80075fe:	dd41      	ble.n	8007684 <_printf_float+0x1ac>
 8007600:	f1aa 0a02 	sub.w	sl, sl, #2
 8007604:	fa5f fa8a 	uxtb.w	sl, sl
 8007608:	3901      	subs	r1, #1
 800760a:	4652      	mov	r2, sl
 800760c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007610:	9109      	str	r1, [sp, #36]	@ 0x24
 8007612:	f7ff ff26 	bl	8007462 <__exponent>
 8007616:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007618:	1813      	adds	r3, r2, r0
 800761a:	2a01      	cmp	r2, #1
 800761c:	4681      	mov	r9, r0
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	dc02      	bgt.n	8007628 <_printf_float+0x150>
 8007622:	6822      	ldr	r2, [r4, #0]
 8007624:	07d2      	lsls	r2, r2, #31
 8007626:	d501      	bpl.n	800762c <_printf_float+0x154>
 8007628:	3301      	adds	r3, #1
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0a2      	beq.n	800757a <_printf_float+0xa2>
 8007634:	232d      	movs	r3, #45	@ 0x2d
 8007636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763a:	e79e      	b.n	800757a <_printf_float+0xa2>
 800763c:	9a06      	ldr	r2, [sp, #24]
 800763e:	2a47      	cmp	r2, #71	@ 0x47
 8007640:	d1c2      	bne.n	80075c8 <_printf_float+0xf0>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1c0      	bne.n	80075c8 <_printf_float+0xf0>
 8007646:	2301      	movs	r3, #1
 8007648:	e7bd      	b.n	80075c6 <_printf_float+0xee>
 800764a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800764e:	d9db      	bls.n	8007608 <_printf_float+0x130>
 8007650:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007654:	d118      	bne.n	8007688 <_printf_float+0x1b0>
 8007656:	2900      	cmp	r1, #0
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	dd0b      	ble.n	8007674 <_printf_float+0x19c>
 800765c:	6121      	str	r1, [r4, #16]
 800765e:	b913      	cbnz	r3, 8007666 <_printf_float+0x18e>
 8007660:	6822      	ldr	r2, [r4, #0]
 8007662:	07d0      	lsls	r0, r2, #31
 8007664:	d502      	bpl.n	800766c <_printf_float+0x194>
 8007666:	3301      	adds	r3, #1
 8007668:	440b      	add	r3, r1
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800766e:	f04f 0900 	mov.w	r9, #0
 8007672:	e7db      	b.n	800762c <_printf_float+0x154>
 8007674:	b913      	cbnz	r3, 800767c <_printf_float+0x1a4>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	07d2      	lsls	r2, r2, #31
 800767a:	d501      	bpl.n	8007680 <_printf_float+0x1a8>
 800767c:	3302      	adds	r3, #2
 800767e:	e7f4      	b.n	800766a <_printf_float+0x192>
 8007680:	2301      	movs	r3, #1
 8007682:	e7f2      	b.n	800766a <_printf_float+0x192>
 8007684:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800768a:	4299      	cmp	r1, r3
 800768c:	db05      	blt.n	800769a <_printf_float+0x1c2>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	6121      	str	r1, [r4, #16]
 8007692:	07d8      	lsls	r0, r3, #31
 8007694:	d5ea      	bpl.n	800766c <_printf_float+0x194>
 8007696:	1c4b      	adds	r3, r1, #1
 8007698:	e7e7      	b.n	800766a <_printf_float+0x192>
 800769a:	2900      	cmp	r1, #0
 800769c:	bfd4      	ite	le
 800769e:	f1c1 0202 	rsble	r2, r1, #2
 80076a2:	2201      	movgt	r2, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	e7e0      	b.n	800766a <_printf_float+0x192>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	055a      	lsls	r2, r3, #21
 80076ac:	d407      	bmi.n	80076be <_printf_float+0x1e6>
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	4642      	mov	r2, r8
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	d12b      	bne.n	8007714 <_printf_float+0x23c>
 80076bc:	e767      	b.n	800758e <_printf_float+0xb6>
 80076be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076c2:	f240 80dd 	bls.w	8007880 <_printf_float+0x3a8>
 80076c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	f7f9 fa1b 	bl	8000b08 <__aeabi_dcmpeq>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d033      	beq.n	800773e <_printf_float+0x266>
 80076d6:	4a37      	ldr	r2, [pc, #220]	@ (80077b4 <_printf_float+0x2dc>)
 80076d8:	2301      	movs	r3, #1
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f af54 	beq.w	800758e <_printf_float+0xb6>
 80076e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80076ea:	4543      	cmp	r3, r8
 80076ec:	db02      	blt.n	80076f4 <_printf_float+0x21c>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	07d8      	lsls	r0, r3, #31
 80076f2:	d50f      	bpl.n	8007714 <_printf_float+0x23c>
 80076f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f af45 	beq.w	800758e <_printf_float+0xb6>
 8007704:	f04f 0900 	mov.w	r9, #0
 8007708:	f108 38ff 	add.w	r8, r8, #4294967295
 800770c:	f104 0a1a 	add.w	sl, r4, #26
 8007710:	45c8      	cmp	r8, r9
 8007712:	dc09      	bgt.n	8007728 <_printf_float+0x250>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	079b      	lsls	r3, r3, #30
 8007718:	f100 8103 	bmi.w	8007922 <_printf_float+0x44a>
 800771c:	68e0      	ldr	r0, [r4, #12]
 800771e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007720:	4298      	cmp	r0, r3
 8007722:	bfb8      	it	lt
 8007724:	4618      	movlt	r0, r3
 8007726:	e734      	b.n	8007592 <_printf_float+0xba>
 8007728:	2301      	movs	r3, #1
 800772a:	4652      	mov	r2, sl
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f af2b 	beq.w	800758e <_printf_float+0xb6>
 8007738:	f109 0901 	add.w	r9, r9, #1
 800773c:	e7e8      	b.n	8007710 <_printf_float+0x238>
 800773e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	dc39      	bgt.n	80077b8 <_printf_float+0x2e0>
 8007744:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <_printf_float+0x2dc>)
 8007746:	2301      	movs	r3, #1
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af1d 	beq.w	800758e <_printf_float+0xb6>
 8007754:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007758:	ea59 0303 	orrs.w	r3, r9, r3
 800775c:	d102      	bne.n	8007764 <_printf_float+0x28c>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	07d9      	lsls	r1, r3, #31
 8007762:	d5d7      	bpl.n	8007714 <_printf_float+0x23c>
 8007764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	f43f af0d 	beq.w	800758e <_printf_float+0xb6>
 8007774:	f04f 0a00 	mov.w	sl, #0
 8007778:	f104 0b1a 	add.w	fp, r4, #26
 800777c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777e:	425b      	negs	r3, r3
 8007780:	4553      	cmp	r3, sl
 8007782:	dc01      	bgt.n	8007788 <_printf_float+0x2b0>
 8007784:	464b      	mov	r3, r9
 8007786:	e793      	b.n	80076b0 <_printf_float+0x1d8>
 8007788:	2301      	movs	r3, #1
 800778a:	465a      	mov	r2, fp
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f aefb 	beq.w	800758e <_printf_float+0xb6>
 8007798:	f10a 0a01 	add.w	sl, sl, #1
 800779c:	e7ee      	b.n	800777c <_printf_float+0x2a4>
 800779e:	bf00      	nop
 80077a0:	7fefffff 	.word	0x7fefffff
 80077a4:	0800a1e8 	.word	0x0800a1e8
 80077a8:	0800a1e4 	.word	0x0800a1e4
 80077ac:	0800a1f0 	.word	0x0800a1f0
 80077b0:	0800a1ec 	.word	0x0800a1ec
 80077b4:	0800a1f4 	.word	0x0800a1f4
 80077b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077be:	4553      	cmp	r3, sl
 80077c0:	bfa8      	it	ge
 80077c2:	4653      	movge	r3, sl
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	4699      	mov	r9, r3
 80077c8:	dc36      	bgt.n	8007838 <_printf_float+0x360>
 80077ca:	f04f 0b00 	mov.w	fp, #0
 80077ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077d2:	f104 021a 	add.w	r2, r4, #26
 80077d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077d8:	9306      	str	r3, [sp, #24]
 80077da:	eba3 0309 	sub.w	r3, r3, r9
 80077de:	455b      	cmp	r3, fp
 80077e0:	dc31      	bgt.n	8007846 <_printf_float+0x36e>
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	459a      	cmp	sl, r3
 80077e6:	dc3a      	bgt.n	800785e <_printf_float+0x386>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	07da      	lsls	r2, r3, #31
 80077ec:	d437      	bmi.n	800785e <_printf_float+0x386>
 80077ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f0:	ebaa 0903 	sub.w	r9, sl, r3
 80077f4:	9b06      	ldr	r3, [sp, #24]
 80077f6:	ebaa 0303 	sub.w	r3, sl, r3
 80077fa:	4599      	cmp	r9, r3
 80077fc:	bfa8      	it	ge
 80077fe:	4699      	movge	r9, r3
 8007800:	f1b9 0f00 	cmp.w	r9, #0
 8007804:	dc33      	bgt.n	800786e <_printf_float+0x396>
 8007806:	f04f 0800 	mov.w	r8, #0
 800780a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800780e:	f104 0b1a 	add.w	fp, r4, #26
 8007812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007814:	ebaa 0303 	sub.w	r3, sl, r3
 8007818:	eba3 0309 	sub.w	r3, r3, r9
 800781c:	4543      	cmp	r3, r8
 800781e:	f77f af79 	ble.w	8007714 <_printf_float+0x23c>
 8007822:	2301      	movs	r3, #1
 8007824:	465a      	mov	r2, fp
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f aeae 	beq.w	800758e <_printf_float+0xb6>
 8007832:	f108 0801 	add.w	r8, r8, #1
 8007836:	e7ec      	b.n	8007812 <_printf_float+0x33a>
 8007838:	4642      	mov	r2, r8
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	d1c2      	bne.n	80077ca <_printf_float+0x2f2>
 8007844:	e6a3      	b.n	800758e <_printf_float+0xb6>
 8007846:	2301      	movs	r3, #1
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	9206      	str	r2, [sp, #24]
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f ae9c 	beq.w	800758e <_printf_float+0xb6>
 8007856:	9a06      	ldr	r2, [sp, #24]
 8007858:	f10b 0b01 	add.w	fp, fp, #1
 800785c:	e7bb      	b.n	80077d6 <_printf_float+0x2fe>
 800785e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	d1c0      	bne.n	80077ee <_printf_float+0x316>
 800786c:	e68f      	b.n	800758e <_printf_float+0xb6>
 800786e:	9a06      	ldr	r2, [sp, #24]
 8007870:	464b      	mov	r3, r9
 8007872:	4442      	add	r2, r8
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	d1c3      	bne.n	8007806 <_printf_float+0x32e>
 800787e:	e686      	b.n	800758e <_printf_float+0xb6>
 8007880:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007884:	f1ba 0f01 	cmp.w	sl, #1
 8007888:	dc01      	bgt.n	800788e <_printf_float+0x3b6>
 800788a:	07db      	lsls	r3, r3, #31
 800788c:	d536      	bpl.n	80078fc <_printf_float+0x424>
 800788e:	2301      	movs	r3, #1
 8007890:	4642      	mov	r2, r8
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	f43f ae78 	beq.w	800758e <_printf_float+0xb6>
 800789e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	f43f ae70 	beq.w	800758e <_printf_float+0xb6>
 80078ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078b2:	2200      	movs	r2, #0
 80078b4:	2300      	movs	r3, #0
 80078b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ba:	f7f9 f925 	bl	8000b08 <__aeabi_dcmpeq>
 80078be:	b9c0      	cbnz	r0, 80078f2 <_printf_float+0x41a>
 80078c0:	4653      	mov	r3, sl
 80078c2:	f108 0201 	add.w	r2, r8, #1
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d10c      	bne.n	80078ea <_printf_float+0x412>
 80078d0:	e65d      	b.n	800758e <_printf_float+0xb6>
 80078d2:	2301      	movs	r3, #1
 80078d4:	465a      	mov	r2, fp
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f ae56 	beq.w	800758e <_printf_float+0xb6>
 80078e2:	f108 0801 	add.w	r8, r8, #1
 80078e6:	45d0      	cmp	r8, sl
 80078e8:	dbf3      	blt.n	80078d2 <_printf_float+0x3fa>
 80078ea:	464b      	mov	r3, r9
 80078ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80078f0:	e6df      	b.n	80076b2 <_printf_float+0x1da>
 80078f2:	f04f 0800 	mov.w	r8, #0
 80078f6:	f104 0b1a 	add.w	fp, r4, #26
 80078fa:	e7f4      	b.n	80078e6 <_printf_float+0x40e>
 80078fc:	2301      	movs	r3, #1
 80078fe:	4642      	mov	r2, r8
 8007900:	e7e1      	b.n	80078c6 <_printf_float+0x3ee>
 8007902:	2301      	movs	r3, #1
 8007904:	464a      	mov	r2, r9
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	f43f ae3e 	beq.w	800758e <_printf_float+0xb6>
 8007912:	f108 0801 	add.w	r8, r8, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	4543      	cmp	r3, r8
 800791e:	dcf0      	bgt.n	8007902 <_printf_float+0x42a>
 8007920:	e6fc      	b.n	800771c <_printf_float+0x244>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	f104 0919 	add.w	r9, r4, #25
 800792a:	e7f4      	b.n	8007916 <_printf_float+0x43e>

0800792c <_printf_common>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	4616      	mov	r6, r2
 8007932:	4698      	mov	r8, r3
 8007934:	688a      	ldr	r2, [r1, #8]
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800793c:	4293      	cmp	r3, r2
 800793e:	bfb8      	it	lt
 8007940:	4613      	movlt	r3, r2
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007948:	4607      	mov	r7, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b10a      	cbz	r2, 8007952 <_printf_common+0x26>
 800794e:	3301      	adds	r3, #1
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	0699      	lsls	r1, r3, #26
 8007956:	bf42      	ittt	mi
 8007958:	6833      	ldrmi	r3, [r6, #0]
 800795a:	3302      	addmi	r3, #2
 800795c:	6033      	strmi	r3, [r6, #0]
 800795e:	6825      	ldr	r5, [r4, #0]
 8007960:	f015 0506 	ands.w	r5, r5, #6
 8007964:	d106      	bne.n	8007974 <_printf_common+0x48>
 8007966:	f104 0a19 	add.w	sl, r4, #25
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	42ab      	cmp	r3, r5
 8007972:	dc26      	bgt.n	80079c2 <_printf_common+0x96>
 8007974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007978:	6822      	ldr	r2, [r4, #0]
 800797a:	3b00      	subs	r3, #0
 800797c:	bf18      	it	ne
 800797e:	2301      	movne	r3, #1
 8007980:	0692      	lsls	r2, r2, #26
 8007982:	d42b      	bmi.n	80079dc <_printf_common+0xb0>
 8007984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007988:	4641      	mov	r1, r8
 800798a:	4638      	mov	r0, r7
 800798c:	47c8      	blx	r9
 800798e:	3001      	adds	r0, #1
 8007990:	d01e      	beq.n	80079d0 <_printf_common+0xa4>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	f003 0306 	and.w	r3, r3, #6
 800799a:	2b04      	cmp	r3, #4
 800799c:	bf02      	ittt	eq
 800799e:	68e5      	ldreq	r5, [r4, #12]
 80079a0:	6833      	ldreq	r3, [r6, #0]
 80079a2:	1aed      	subeq	r5, r5, r3
 80079a4:	68a3      	ldr	r3, [r4, #8]
 80079a6:	bf0c      	ite	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	2500      	movne	r5, #0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfc4      	itt	gt
 80079b2:	1a9b      	subgt	r3, r3, r2
 80079b4:	18ed      	addgt	r5, r5, r3
 80079b6:	2600      	movs	r6, #0
 80079b8:	341a      	adds	r4, #26
 80079ba:	42b5      	cmp	r5, r6
 80079bc:	d11a      	bne.n	80079f4 <_printf_common+0xc8>
 80079be:	2000      	movs	r0, #0
 80079c0:	e008      	b.n	80079d4 <_printf_common+0xa8>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4652      	mov	r2, sl
 80079c6:	4641      	mov	r1, r8
 80079c8:	4638      	mov	r0, r7
 80079ca:	47c8      	blx	r9
 80079cc:	3001      	adds	r0, #1
 80079ce:	d103      	bne.n	80079d8 <_printf_common+0xac>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d8:	3501      	adds	r5, #1
 80079da:	e7c6      	b.n	800796a <_printf_common+0x3e>
 80079dc:	18e1      	adds	r1, r4, r3
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	2030      	movs	r0, #48	@ 0x30
 80079e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079e6:	4422      	add	r2, r4
 80079e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079f0:	3302      	adds	r3, #2
 80079f2:	e7c7      	b.n	8007984 <_printf_common+0x58>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4622      	mov	r2, r4
 80079f8:	4641      	mov	r1, r8
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c8      	blx	r9
 80079fe:	3001      	adds	r0, #1
 8007a00:	d0e6      	beq.n	80079d0 <_printf_common+0xa4>
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7d9      	b.n	80079ba <_printf_common+0x8e>
	...

08007a08 <_printf_i>:
 8007a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	7e0f      	ldrb	r7, [r1, #24]
 8007a0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a10:	2f78      	cmp	r7, #120	@ 0x78
 8007a12:	4691      	mov	r9, r2
 8007a14:	4680      	mov	r8, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	469a      	mov	sl, r3
 8007a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a1e:	d807      	bhi.n	8007a30 <_printf_i+0x28>
 8007a20:	2f62      	cmp	r7, #98	@ 0x62
 8007a22:	d80a      	bhi.n	8007a3a <_printf_i+0x32>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	f000 80d1 	beq.w	8007bcc <_printf_i+0x1c4>
 8007a2a:	2f58      	cmp	r7, #88	@ 0x58
 8007a2c:	f000 80b8 	beq.w	8007ba0 <_printf_i+0x198>
 8007a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a38:	e03a      	b.n	8007ab0 <_printf_i+0xa8>
 8007a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a3e:	2b15      	cmp	r3, #21
 8007a40:	d8f6      	bhi.n	8007a30 <_printf_i+0x28>
 8007a42:	a101      	add	r1, pc, #4	@ (adr r1, 8007a48 <_printf_i+0x40>)
 8007a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007a31 	.word	0x08007a31
 8007a54:	08007a31 	.word	0x08007a31
 8007a58:	08007a31 	.word	0x08007a31
 8007a5c:	08007a31 	.word	0x08007a31
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a31 	.word	0x08007a31
 8007a68:	08007a31 	.word	0x08007a31
 8007a6c:	08007a31 	.word	0x08007a31
 8007a70:	08007a31 	.word	0x08007a31
 8007a74:	08007bb3 	.word	0x08007bb3
 8007a78:	08007adf 	.word	0x08007adf
 8007a7c:	08007b6d 	.word	0x08007b6d
 8007a80:	08007a31 	.word	0x08007a31
 8007a84:	08007a31 	.word	0x08007a31
 8007a88:	08007bd5 	.word	0x08007bd5
 8007a8c:	08007a31 	.word	0x08007a31
 8007a90:	08007adf 	.word	0x08007adf
 8007a94:	08007a31 	.word	0x08007a31
 8007a98:	08007a31 	.word	0x08007a31
 8007a9c:	08007b75 	.word	0x08007b75
 8007aa0:	6833      	ldr	r3, [r6, #0]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6032      	str	r2, [r6, #0]
 8007aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e09c      	b.n	8007bee <_printf_i+0x1e6>
 8007ab4:	6833      	ldr	r3, [r6, #0]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	6031      	str	r1, [r6, #0]
 8007abc:	0606      	lsls	r6, r0, #24
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0xbc>
 8007ac0:	681d      	ldr	r5, [r3, #0]
 8007ac2:	e003      	b.n	8007acc <_printf_i+0xc4>
 8007ac4:	0645      	lsls	r5, r0, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0xb8>
 8007ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007acc:	2d00      	cmp	r5, #0
 8007ace:	da03      	bge.n	8007ad8 <_printf_i+0xd0>
 8007ad0:	232d      	movs	r3, #45	@ 0x2d
 8007ad2:	426d      	negs	r5, r5
 8007ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad8:	4858      	ldr	r0, [pc, #352]	@ (8007c3c <_printf_i+0x234>)
 8007ada:	230a      	movs	r3, #10
 8007adc:	e011      	b.n	8007b02 <_printf_i+0xfa>
 8007ade:	6821      	ldr	r1, [r4, #0]
 8007ae0:	6833      	ldr	r3, [r6, #0]
 8007ae2:	0608      	lsls	r0, r1, #24
 8007ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ae8:	d402      	bmi.n	8007af0 <_printf_i+0xe8>
 8007aea:	0649      	lsls	r1, r1, #25
 8007aec:	bf48      	it	mi
 8007aee:	b2ad      	uxthmi	r5, r5
 8007af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007af2:	4852      	ldr	r0, [pc, #328]	@ (8007c3c <_printf_i+0x234>)
 8007af4:	6033      	str	r3, [r6, #0]
 8007af6:	bf14      	ite	ne
 8007af8:	230a      	movne	r3, #10
 8007afa:	2308      	moveq	r3, #8
 8007afc:	2100      	movs	r1, #0
 8007afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b02:	6866      	ldr	r6, [r4, #4]
 8007b04:	60a6      	str	r6, [r4, #8]
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	db05      	blt.n	8007b16 <_printf_i+0x10e>
 8007b0a:	6821      	ldr	r1, [r4, #0]
 8007b0c:	432e      	orrs	r6, r5
 8007b0e:	f021 0104 	bic.w	r1, r1, #4
 8007b12:	6021      	str	r1, [r4, #0]
 8007b14:	d04b      	beq.n	8007bae <_printf_i+0x1a6>
 8007b16:	4616      	mov	r6, r2
 8007b18:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b1c:	fb03 5711 	mls	r7, r3, r1, r5
 8007b20:	5dc7      	ldrb	r7, [r0, r7]
 8007b22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b26:	462f      	mov	r7, r5
 8007b28:	42bb      	cmp	r3, r7
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	d9f4      	bls.n	8007b18 <_printf_i+0x110>
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d10b      	bne.n	8007b4a <_printf_i+0x142>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	07df      	lsls	r7, r3, #31
 8007b36:	d508      	bpl.n	8007b4a <_printf_i+0x142>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	6861      	ldr	r1, [r4, #4]
 8007b3c:	4299      	cmp	r1, r3
 8007b3e:	bfde      	ittt	le
 8007b40:	2330      	movle	r3, #48	@ 0x30
 8007b42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b4a:	1b92      	subs	r2, r2, r6
 8007b4c:	6122      	str	r2, [r4, #16]
 8007b4e:	f8cd a000 	str.w	sl, [sp]
 8007b52:	464b      	mov	r3, r9
 8007b54:	aa03      	add	r2, sp, #12
 8007b56:	4621      	mov	r1, r4
 8007b58:	4640      	mov	r0, r8
 8007b5a:	f7ff fee7 	bl	800792c <_printf_common>
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d14a      	bne.n	8007bf8 <_printf_i+0x1f0>
 8007b62:	f04f 30ff 	mov.w	r0, #4294967295
 8007b66:	b004      	add	sp, #16
 8007b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	f043 0320 	orr.w	r3, r3, #32
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	4832      	ldr	r0, [pc, #200]	@ (8007c40 <_printf_i+0x238>)
 8007b76:	2778      	movs	r7, #120	@ 0x78
 8007b78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	6831      	ldr	r1, [r6, #0]
 8007b80:	061f      	lsls	r7, r3, #24
 8007b82:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b86:	d402      	bmi.n	8007b8e <_printf_i+0x186>
 8007b88:	065f      	lsls	r7, r3, #25
 8007b8a:	bf48      	it	mi
 8007b8c:	b2ad      	uxthmi	r5, r5
 8007b8e:	6031      	str	r1, [r6, #0]
 8007b90:	07d9      	lsls	r1, r3, #31
 8007b92:	bf44      	itt	mi
 8007b94:	f043 0320 	orrmi.w	r3, r3, #32
 8007b98:	6023      	strmi	r3, [r4, #0]
 8007b9a:	b11d      	cbz	r5, 8007ba4 <_printf_i+0x19c>
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	e7ad      	b.n	8007afc <_printf_i+0xf4>
 8007ba0:	4826      	ldr	r0, [pc, #152]	@ (8007c3c <_printf_i+0x234>)
 8007ba2:	e7e9      	b.n	8007b78 <_printf_i+0x170>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	f023 0320 	bic.w	r3, r3, #32
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	e7f6      	b.n	8007b9c <_printf_i+0x194>
 8007bae:	4616      	mov	r6, r2
 8007bb0:	e7bd      	b.n	8007b2e <_printf_i+0x126>
 8007bb2:	6833      	ldr	r3, [r6, #0]
 8007bb4:	6825      	ldr	r5, [r4, #0]
 8007bb6:	6961      	ldr	r1, [r4, #20]
 8007bb8:	1d18      	adds	r0, r3, #4
 8007bba:	6030      	str	r0, [r6, #0]
 8007bbc:	062e      	lsls	r6, r5, #24
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	d501      	bpl.n	8007bc6 <_printf_i+0x1be>
 8007bc2:	6019      	str	r1, [r3, #0]
 8007bc4:	e002      	b.n	8007bcc <_printf_i+0x1c4>
 8007bc6:	0668      	lsls	r0, r5, #25
 8007bc8:	d5fb      	bpl.n	8007bc2 <_printf_i+0x1ba>
 8007bca:	8019      	strh	r1, [r3, #0]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	e7bc      	b.n	8007b4e <_printf_i+0x146>
 8007bd4:	6833      	ldr	r3, [r6, #0]
 8007bd6:	1d1a      	adds	r2, r3, #4
 8007bd8:	6032      	str	r2, [r6, #0]
 8007bda:	681e      	ldr	r6, [r3, #0]
 8007bdc:	6862      	ldr	r2, [r4, #4]
 8007bde:	2100      	movs	r1, #0
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7f8 fb15 	bl	8000210 <memchr>
 8007be6:	b108      	cbz	r0, 8007bec <_printf_i+0x1e4>
 8007be8:	1b80      	subs	r0, r0, r6
 8007bea:	6060      	str	r0, [r4, #4]
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	6123      	str	r3, [r4, #16]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf6:	e7aa      	b.n	8007b4e <_printf_i+0x146>
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4640      	mov	r0, r8
 8007c00:	47d0      	blx	sl
 8007c02:	3001      	adds	r0, #1
 8007c04:	d0ad      	beq.n	8007b62 <_printf_i+0x15a>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	079b      	lsls	r3, r3, #30
 8007c0a:	d413      	bmi.n	8007c34 <_printf_i+0x22c>
 8007c0c:	68e0      	ldr	r0, [r4, #12]
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	4298      	cmp	r0, r3
 8007c12:	bfb8      	it	lt
 8007c14:	4618      	movlt	r0, r3
 8007c16:	e7a6      	b.n	8007b66 <_printf_i+0x15e>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4632      	mov	r2, r6
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	4640      	mov	r0, r8
 8007c20:	47d0      	blx	sl
 8007c22:	3001      	adds	r0, #1
 8007c24:	d09d      	beq.n	8007b62 <_printf_i+0x15a>
 8007c26:	3501      	adds	r5, #1
 8007c28:	68e3      	ldr	r3, [r4, #12]
 8007c2a:	9903      	ldr	r1, [sp, #12]
 8007c2c:	1a5b      	subs	r3, r3, r1
 8007c2e:	42ab      	cmp	r3, r5
 8007c30:	dcf2      	bgt.n	8007c18 <_printf_i+0x210>
 8007c32:	e7eb      	b.n	8007c0c <_printf_i+0x204>
 8007c34:	2500      	movs	r5, #0
 8007c36:	f104 0619 	add.w	r6, r4, #25
 8007c3a:	e7f5      	b.n	8007c28 <_printf_i+0x220>
 8007c3c:	0800a1f6 	.word	0x0800a1f6
 8007c40:	0800a207 	.word	0x0800a207

08007c44 <std>:
 8007c44:	2300      	movs	r3, #0
 8007c46:	b510      	push	{r4, lr}
 8007c48:	4604      	mov	r4, r0
 8007c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c52:	6083      	str	r3, [r0, #8]
 8007c54:	8181      	strh	r1, [r0, #12]
 8007c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c58:	81c2      	strh	r2, [r0, #14]
 8007c5a:	6183      	str	r3, [r0, #24]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	2208      	movs	r2, #8
 8007c60:	305c      	adds	r0, #92	@ 0x5c
 8007c62:	f000 f931 	bl	8007ec8 <memset>
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <std+0x58>)
 8007c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca0 <std+0x5c>)
 8007c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca4 <std+0x60>)
 8007c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca8 <std+0x64>)
 8007c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c76:	4b0d      	ldr	r3, [pc, #52]	@ (8007cac <std+0x68>)
 8007c78:	6224      	str	r4, [r4, #32]
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d006      	beq.n	8007c8c <std+0x48>
 8007c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c82:	4294      	cmp	r4, r2
 8007c84:	d002      	beq.n	8007c8c <std+0x48>
 8007c86:	33d0      	adds	r3, #208	@ 0xd0
 8007c88:	429c      	cmp	r4, r3
 8007c8a:	d105      	bne.n	8007c98 <std+0x54>
 8007c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c94:	f000 b994 	b.w	8007fc0 <__retarget_lock_init_recursive>
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	bf00      	nop
 8007c9c:	08007dc9 	.word	0x08007dc9
 8007ca0:	08007deb 	.word	0x08007deb
 8007ca4:	08007e23 	.word	0x08007e23
 8007ca8:	08007e47 	.word	0x08007e47
 8007cac:	20004e34 	.word	0x20004e34

08007cb0 <stdio_exit_handler>:
 8007cb0:	4a02      	ldr	r2, [pc, #8]	@ (8007cbc <stdio_exit_handler+0xc>)
 8007cb2:	4903      	ldr	r1, [pc, #12]	@ (8007cc0 <stdio_exit_handler+0x10>)
 8007cb4:	4803      	ldr	r0, [pc, #12]	@ (8007cc4 <stdio_exit_handler+0x14>)
 8007cb6:	f000 b869 	b.w	8007d8c <_fwalk_sglue>
 8007cba:	bf00      	nop
 8007cbc:	20000014 	.word	0x20000014
 8007cc0:	08009945 	.word	0x08009945
 8007cc4:	20000024 	.word	0x20000024

08007cc8 <cleanup_stdio>:
 8007cc8:	6841      	ldr	r1, [r0, #4]
 8007cca:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <cleanup_stdio+0x34>)
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	d001      	beq.n	8007cd8 <cleanup_stdio+0x10>
 8007cd4:	f001 fe36 	bl	8009944 <_fflush_r>
 8007cd8:	68a1      	ldr	r1, [r4, #8]
 8007cda:	4b09      	ldr	r3, [pc, #36]	@ (8007d00 <cleanup_stdio+0x38>)
 8007cdc:	4299      	cmp	r1, r3
 8007cde:	d002      	beq.n	8007ce6 <cleanup_stdio+0x1e>
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f001 fe2f 	bl	8009944 <_fflush_r>
 8007ce6:	68e1      	ldr	r1, [r4, #12]
 8007ce8:	4b06      	ldr	r3, [pc, #24]	@ (8007d04 <cleanup_stdio+0x3c>)
 8007cea:	4299      	cmp	r1, r3
 8007cec:	d004      	beq.n	8007cf8 <cleanup_stdio+0x30>
 8007cee:	4620      	mov	r0, r4
 8007cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf4:	f001 be26 	b.w	8009944 <_fflush_r>
 8007cf8:	bd10      	pop	{r4, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20004e34 	.word	0x20004e34
 8007d00:	20004e9c 	.word	0x20004e9c
 8007d04:	20004f04 	.word	0x20004f04

08007d08 <global_stdio_init.part.0>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d38 <global_stdio_init.part.0+0x30>)
 8007d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8007d3c <global_stdio_init.part.0+0x34>)
 8007d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d40 <global_stdio_init.part.0+0x38>)
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	4620      	mov	r0, r4
 8007d14:	2200      	movs	r2, #0
 8007d16:	2104      	movs	r1, #4
 8007d18:	f7ff ff94 	bl	8007c44 <std>
 8007d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d20:	2201      	movs	r2, #1
 8007d22:	2109      	movs	r1, #9
 8007d24:	f7ff ff8e 	bl	8007c44 <std>
 8007d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d32:	2112      	movs	r1, #18
 8007d34:	f7ff bf86 	b.w	8007c44 <std>
 8007d38:	20004f6c 	.word	0x20004f6c
 8007d3c:	20004e34 	.word	0x20004e34
 8007d40:	08007cb1 	.word	0x08007cb1

08007d44 <__sfp_lock_acquire>:
 8007d44:	4801      	ldr	r0, [pc, #4]	@ (8007d4c <__sfp_lock_acquire+0x8>)
 8007d46:	f000 b93c 	b.w	8007fc2 <__retarget_lock_acquire_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20004f75 	.word	0x20004f75

08007d50 <__sfp_lock_release>:
 8007d50:	4801      	ldr	r0, [pc, #4]	@ (8007d58 <__sfp_lock_release+0x8>)
 8007d52:	f000 b937 	b.w	8007fc4 <__retarget_lock_release_recursive>
 8007d56:	bf00      	nop
 8007d58:	20004f75 	.word	0x20004f75

08007d5c <__sinit>:
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	4604      	mov	r4, r0
 8007d60:	f7ff fff0 	bl	8007d44 <__sfp_lock_acquire>
 8007d64:	6a23      	ldr	r3, [r4, #32]
 8007d66:	b11b      	cbz	r3, 8007d70 <__sinit+0x14>
 8007d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6c:	f7ff bff0 	b.w	8007d50 <__sfp_lock_release>
 8007d70:	4b04      	ldr	r3, [pc, #16]	@ (8007d84 <__sinit+0x28>)
 8007d72:	6223      	str	r3, [r4, #32]
 8007d74:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <__sinit+0x2c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f5      	bne.n	8007d68 <__sinit+0xc>
 8007d7c:	f7ff ffc4 	bl	8007d08 <global_stdio_init.part.0>
 8007d80:	e7f2      	b.n	8007d68 <__sinit+0xc>
 8007d82:	bf00      	nop
 8007d84:	08007cc9 	.word	0x08007cc9
 8007d88:	20004f6c 	.word	0x20004f6c

08007d8c <_fwalk_sglue>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	4607      	mov	r7, r0
 8007d92:	4688      	mov	r8, r1
 8007d94:	4614      	mov	r4, r2
 8007d96:	2600      	movs	r6, #0
 8007d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8007da0:	d505      	bpl.n	8007dae <_fwalk_sglue+0x22>
 8007da2:	6824      	ldr	r4, [r4, #0]
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	d1f7      	bne.n	8007d98 <_fwalk_sglue+0xc>
 8007da8:	4630      	mov	r0, r6
 8007daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d907      	bls.n	8007dc4 <_fwalk_sglue+0x38>
 8007db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007db8:	3301      	adds	r3, #1
 8007dba:	d003      	beq.n	8007dc4 <_fwalk_sglue+0x38>
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	47c0      	blx	r8
 8007dc2:	4306      	orrs	r6, r0
 8007dc4:	3568      	adds	r5, #104	@ 0x68
 8007dc6:	e7e9      	b.n	8007d9c <_fwalk_sglue+0x10>

08007dc8 <__sread>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	460c      	mov	r4, r1
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	f000 f8a8 	bl	8007f24 <_read_r>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	bfab      	itete	ge
 8007dd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007dda:	89a3      	ldrhlt	r3, [r4, #12]
 8007ddc:	181b      	addge	r3, r3, r0
 8007dde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007de2:	bfac      	ite	ge
 8007de4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007de6:	81a3      	strhlt	r3, [r4, #12]
 8007de8:	bd10      	pop	{r4, pc}

08007dea <__swrite>:
 8007dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	461f      	mov	r7, r3
 8007df0:	898b      	ldrh	r3, [r1, #12]
 8007df2:	05db      	lsls	r3, r3, #23
 8007df4:	4605      	mov	r5, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	4616      	mov	r6, r2
 8007dfa:	d505      	bpl.n	8007e08 <__swrite+0x1e>
 8007dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e00:	2302      	movs	r3, #2
 8007e02:	2200      	movs	r2, #0
 8007e04:	f000 f87c 	bl	8007f00 <_lseek_r>
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	4628      	mov	r0, r5
 8007e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1e:	f000 b893 	b.w	8007f48 <_write_r>

08007e22 <__sseek>:
 8007e22:	b510      	push	{r4, lr}
 8007e24:	460c      	mov	r4, r1
 8007e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2a:	f000 f869 	bl	8007f00 <_lseek_r>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	bf15      	itete	ne
 8007e34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e3e:	81a3      	strheq	r3, [r4, #12]
 8007e40:	bf18      	it	ne
 8007e42:	81a3      	strhne	r3, [r4, #12]
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <__sclose>:
 8007e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4a:	f000 b849 	b.w	8007ee0 <_close_r>

08007e4e <_vsniprintf_r>:
 8007e4e:	b530      	push	{r4, r5, lr}
 8007e50:	4614      	mov	r4, r2
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	b09b      	sub	sp, #108	@ 0x6c
 8007e56:	4605      	mov	r5, r0
 8007e58:	461a      	mov	r2, r3
 8007e5a:	da05      	bge.n	8007e68 <_vsniprintf_r+0x1a>
 8007e5c:	238b      	movs	r3, #139	@ 0x8b
 8007e5e:	6003      	str	r3, [r0, #0]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	b01b      	add	sp, #108	@ 0x6c
 8007e66:	bd30      	pop	{r4, r5, pc}
 8007e68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e6c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e76:	bf14      	ite	ne
 8007e78:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e7c:	4623      	moveq	r3, r4
 8007e7e:	9302      	str	r3, [sp, #8]
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e86:	9100      	str	r1, [sp, #0]
 8007e88:	9104      	str	r1, [sp, #16]
 8007e8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007e8e:	4669      	mov	r1, sp
 8007e90:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007e92:	f001 fbd7 	bl	8009644 <_svfiprintf_r>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	bfbc      	itt	lt
 8007e9a:	238b      	movlt	r3, #139	@ 0x8b
 8007e9c:	602b      	strlt	r3, [r5, #0]
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	d0e0      	beq.n	8007e64 <_vsniprintf_r+0x16>
 8007ea2:	9b00      	ldr	r3, [sp, #0]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	e7dc      	b.n	8007e64 <_vsniprintf_r+0x16>
	...

08007eac <vsniprintf>:
 8007eac:	b507      	push	{r0, r1, r2, lr}
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	460a      	mov	r2, r1
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4803      	ldr	r0, [pc, #12]	@ (8007ec4 <vsniprintf+0x18>)
 8007eb8:	6800      	ldr	r0, [r0, #0]
 8007eba:	f7ff ffc8 	bl	8007e4e <_vsniprintf_r>
 8007ebe:	b003      	add	sp, #12
 8007ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ec4:	20000020 	.word	0x20000020

08007ec8 <memset>:
 8007ec8:	4402      	add	r2, r0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d100      	bne.n	8007ed2 <memset+0xa>
 8007ed0:	4770      	bx	lr
 8007ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed6:	e7f9      	b.n	8007ecc <memset+0x4>

08007ed8 <_localeconv_r>:
 8007ed8:	4800      	ldr	r0, [pc, #0]	@ (8007edc <_localeconv_r+0x4>)
 8007eda:	4770      	bx	lr
 8007edc:	20000160 	.word	0x20000160

08007ee0 <_close_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d06      	ldr	r5, [pc, #24]	@ (8007efc <_close_r+0x1c>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	602b      	str	r3, [r5, #0]
 8007eec:	f7f9 fe68 	bl	8001bc0 <_close>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_close_r+0x1a>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_close_r+0x1a>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20004f70 	.word	0x20004f70

08007f00 <_lseek_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	@ (8007f20 <_lseek_r+0x20>)
 8007f04:	4604      	mov	r4, r0
 8007f06:	4608      	mov	r0, r1
 8007f08:	4611      	mov	r1, r2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	602a      	str	r2, [r5, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f7f9 fe7d 	bl	8001c0e <_lseek>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_lseek_r+0x1e>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_lseek_r+0x1e>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20004f70 	.word	0x20004f70

08007f24 <_read_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d07      	ldr	r5, [pc, #28]	@ (8007f44 <_read_r+0x20>)
 8007f28:	4604      	mov	r4, r0
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	602a      	str	r2, [r5, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f7f9 fe0b 	bl	8001b4e <_read>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_read_r+0x1e>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_read_r+0x1e>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	20004f70 	.word	0x20004f70

08007f48 <_write_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4d07      	ldr	r5, [pc, #28]	@ (8007f68 <_write_r+0x20>)
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	4608      	mov	r0, r1
 8007f50:	4611      	mov	r1, r2
 8007f52:	2200      	movs	r2, #0
 8007f54:	602a      	str	r2, [r5, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f7f9 fe16 	bl	8001b88 <_write>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_write_r+0x1e>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_write_r+0x1e>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	20004f70 	.word	0x20004f70

08007f6c <__errno>:
 8007f6c:	4b01      	ldr	r3, [pc, #4]	@ (8007f74 <__errno+0x8>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000020 	.word	0x20000020

08007f78 <__libc_init_array>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007fb0 <__libc_init_array+0x38>)
 8007f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007fb4 <__libc_init_array+0x3c>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	2600      	movs	r6, #0
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	d109      	bne.n	8007f9c <__libc_init_array+0x24>
 8007f88:	4d0b      	ldr	r5, [pc, #44]	@ (8007fb8 <__libc_init_array+0x40>)
 8007f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007fbc <__libc_init_array+0x44>)
 8007f8c:	f002 f86a 	bl	800a064 <_init>
 8007f90:	1b64      	subs	r4, r4, r5
 8007f92:	10a4      	asrs	r4, r4, #2
 8007f94:	2600      	movs	r6, #0
 8007f96:	42a6      	cmp	r6, r4
 8007f98:	d105      	bne.n	8007fa6 <__libc_init_array+0x2e>
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa0:	4798      	blx	r3
 8007fa2:	3601      	adds	r6, #1
 8007fa4:	e7ee      	b.n	8007f84 <__libc_init_array+0xc>
 8007fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007faa:	4798      	blx	r3
 8007fac:	3601      	adds	r6, #1
 8007fae:	e7f2      	b.n	8007f96 <__libc_init_array+0x1e>
 8007fb0:	0800a564 	.word	0x0800a564
 8007fb4:	0800a564 	.word	0x0800a564
 8007fb8:	0800a564 	.word	0x0800a564
 8007fbc:	0800a568 	.word	0x0800a568

08007fc0 <__retarget_lock_init_recursive>:
 8007fc0:	4770      	bx	lr

08007fc2 <__retarget_lock_acquire_recursive>:
 8007fc2:	4770      	bx	lr

08007fc4 <__retarget_lock_release_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <memcpy>:
 8007fc6:	440a      	add	r2, r1
 8007fc8:	4291      	cmp	r1, r2
 8007fca:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fce:	d100      	bne.n	8007fd2 <memcpy+0xc>
 8007fd0:	4770      	bx	lr
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fdc:	4291      	cmp	r1, r2
 8007fde:	d1f9      	bne.n	8007fd4 <memcpy+0xe>
 8007fe0:	bd10      	pop	{r4, pc}

08007fe2 <quorem>:
 8007fe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe6:	6903      	ldr	r3, [r0, #16]
 8007fe8:	690c      	ldr	r4, [r1, #16]
 8007fea:	42a3      	cmp	r3, r4
 8007fec:	4607      	mov	r7, r0
 8007fee:	db7e      	blt.n	80080ee <quorem+0x10c>
 8007ff0:	3c01      	subs	r4, #1
 8007ff2:	f101 0814 	add.w	r8, r1, #20
 8007ff6:	00a3      	lsls	r3, r4, #2
 8007ff8:	f100 0514 	add.w	r5, r0, #20
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800800c:	3301      	adds	r3, #1
 800800e:	429a      	cmp	r2, r3
 8008010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008014:	fbb2 f6f3 	udiv	r6, r2, r3
 8008018:	d32e      	bcc.n	8008078 <quorem+0x96>
 800801a:	f04f 0a00 	mov.w	sl, #0
 800801e:	46c4      	mov	ip, r8
 8008020:	46ae      	mov	lr, r5
 8008022:	46d3      	mov	fp, sl
 8008024:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008028:	b298      	uxth	r0, r3
 800802a:	fb06 a000 	mla	r0, r6, r0, sl
 800802e:	0c02      	lsrs	r2, r0, #16
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	fb06 2303 	mla	r3, r6, r3, r2
 8008036:	f8de 2000 	ldr.w	r2, [lr]
 800803a:	b280      	uxth	r0, r0
 800803c:	b292      	uxth	r2, r2
 800803e:	1a12      	subs	r2, r2, r0
 8008040:	445a      	add	r2, fp
 8008042:	f8de 0000 	ldr.w	r0, [lr]
 8008046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800804a:	b29b      	uxth	r3, r3
 800804c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008050:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008054:	b292      	uxth	r2, r2
 8008056:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800805a:	45e1      	cmp	r9, ip
 800805c:	f84e 2b04 	str.w	r2, [lr], #4
 8008060:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008064:	d2de      	bcs.n	8008024 <quorem+0x42>
 8008066:	9b00      	ldr	r3, [sp, #0]
 8008068:	58eb      	ldr	r3, [r5, r3]
 800806a:	b92b      	cbnz	r3, 8008078 <quorem+0x96>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	3b04      	subs	r3, #4
 8008070:	429d      	cmp	r5, r3
 8008072:	461a      	mov	r2, r3
 8008074:	d32f      	bcc.n	80080d6 <quorem+0xf4>
 8008076:	613c      	str	r4, [r7, #16]
 8008078:	4638      	mov	r0, r7
 800807a:	f001 f97f 	bl	800937c <__mcmp>
 800807e:	2800      	cmp	r0, #0
 8008080:	db25      	blt.n	80080ce <quorem+0xec>
 8008082:	4629      	mov	r1, r5
 8008084:	2000      	movs	r0, #0
 8008086:	f858 2b04 	ldr.w	r2, [r8], #4
 800808a:	f8d1 c000 	ldr.w	ip, [r1]
 800808e:	fa1f fe82 	uxth.w	lr, r2
 8008092:	fa1f f38c 	uxth.w	r3, ip
 8008096:	eba3 030e 	sub.w	r3, r3, lr
 800809a:	4403      	add	r3, r0
 800809c:	0c12      	lsrs	r2, r2, #16
 800809e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ac:	45c1      	cmp	r9, r8
 80080ae:	f841 3b04 	str.w	r3, [r1], #4
 80080b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080b6:	d2e6      	bcs.n	8008086 <quorem+0xa4>
 80080b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c0:	b922      	cbnz	r2, 80080cc <quorem+0xea>
 80080c2:	3b04      	subs	r3, #4
 80080c4:	429d      	cmp	r5, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	d30b      	bcc.n	80080e2 <quorem+0x100>
 80080ca:	613c      	str	r4, [r7, #16]
 80080cc:	3601      	adds	r6, #1
 80080ce:	4630      	mov	r0, r6
 80080d0:	b003      	add	sp, #12
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	3b04      	subs	r3, #4
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d1cb      	bne.n	8008076 <quorem+0x94>
 80080de:	3c01      	subs	r4, #1
 80080e0:	e7c6      	b.n	8008070 <quorem+0x8e>
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	3b04      	subs	r3, #4
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	d1ef      	bne.n	80080ca <quorem+0xe8>
 80080ea:	3c01      	subs	r4, #1
 80080ec:	e7ea      	b.n	80080c4 <quorem+0xe2>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7ee      	b.n	80080d0 <quorem+0xee>
 80080f2:	0000      	movs	r0, r0
 80080f4:	0000      	movs	r0, r0
	...

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	69c7      	ldr	r7, [r0, #28]
 80080fe:	b097      	sub	sp, #92	@ 0x5c
 8008100:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008104:	ec55 4b10 	vmov	r4, r5, d0
 8008108:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800810a:	9107      	str	r1, [sp, #28]
 800810c:	4681      	mov	r9, r0
 800810e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008110:	9311      	str	r3, [sp, #68]	@ 0x44
 8008112:	b97f      	cbnz	r7, 8008134 <_dtoa_r+0x3c>
 8008114:	2010      	movs	r0, #16
 8008116:	f000 fe09 	bl	8008d2c <malloc>
 800811a:	4602      	mov	r2, r0
 800811c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008120:	b920      	cbnz	r0, 800812c <_dtoa_r+0x34>
 8008122:	4ba9      	ldr	r3, [pc, #676]	@ (80083c8 <_dtoa_r+0x2d0>)
 8008124:	21ef      	movs	r1, #239	@ 0xef
 8008126:	48a9      	ldr	r0, [pc, #676]	@ (80083cc <_dtoa_r+0x2d4>)
 8008128:	f001 fc5e 	bl	80099e8 <__assert_func>
 800812c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008130:	6007      	str	r7, [r0, #0]
 8008132:	60c7      	str	r7, [r0, #12]
 8008134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008138:	6819      	ldr	r1, [r3, #0]
 800813a:	b159      	cbz	r1, 8008154 <_dtoa_r+0x5c>
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	604a      	str	r2, [r1, #4]
 8008140:	2301      	movs	r3, #1
 8008142:	4093      	lsls	r3, r2
 8008144:	608b      	str	r3, [r1, #8]
 8008146:	4648      	mov	r0, r9
 8008148:	f000 fee6 	bl	8008f18 <_Bfree>
 800814c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	1e2b      	subs	r3, r5, #0
 8008156:	bfb9      	ittee	lt
 8008158:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800815c:	9305      	strlt	r3, [sp, #20]
 800815e:	2300      	movge	r3, #0
 8008160:	6033      	strge	r3, [r6, #0]
 8008162:	9f05      	ldr	r7, [sp, #20]
 8008164:	4b9a      	ldr	r3, [pc, #616]	@ (80083d0 <_dtoa_r+0x2d8>)
 8008166:	bfbc      	itt	lt
 8008168:	2201      	movlt	r2, #1
 800816a:	6032      	strlt	r2, [r6, #0]
 800816c:	43bb      	bics	r3, r7
 800816e:	d112      	bne.n	8008196 <_dtoa_r+0x9e>
 8008170:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008172:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800817c:	4323      	orrs	r3, r4
 800817e:	f000 855a 	beq.w	8008c36 <_dtoa_r+0xb3e>
 8008182:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008184:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80083e4 <_dtoa_r+0x2ec>
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 855c 	beq.w	8008c46 <_dtoa_r+0xb4e>
 800818e:	f10a 0303 	add.w	r3, sl, #3
 8008192:	f000 bd56 	b.w	8008c42 <_dtoa_r+0xb4a>
 8008196:	ed9d 7b04 	vldr	d7, [sp, #16]
 800819a:	2200      	movs	r2, #0
 800819c:	ec51 0b17 	vmov	r0, r1, d7
 80081a0:	2300      	movs	r3, #0
 80081a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80081a6:	f7f8 fcaf 	bl	8000b08 <__aeabi_dcmpeq>
 80081aa:	4680      	mov	r8, r0
 80081ac:	b158      	cbz	r0, 80081c6 <_dtoa_r+0xce>
 80081ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80081b0:	2301      	movs	r3, #1
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081b6:	b113      	cbz	r3, 80081be <_dtoa_r+0xc6>
 80081b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80081ba:	4b86      	ldr	r3, [pc, #536]	@ (80083d4 <_dtoa_r+0x2dc>)
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80083e8 <_dtoa_r+0x2f0>
 80081c2:	f000 bd40 	b.w	8008c46 <_dtoa_r+0xb4e>
 80081c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80081ca:	aa14      	add	r2, sp, #80	@ 0x50
 80081cc:	a915      	add	r1, sp, #84	@ 0x54
 80081ce:	4648      	mov	r0, r9
 80081d0:	f001 f984 	bl	80094dc <__d2b>
 80081d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80081d8:	9002      	str	r0, [sp, #8]
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d078      	beq.n	80082d0 <_dtoa_r+0x1d8>
 80081de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80081e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081f8:	4619      	mov	r1, r3
 80081fa:	2200      	movs	r2, #0
 80081fc:	4b76      	ldr	r3, [pc, #472]	@ (80083d8 <_dtoa_r+0x2e0>)
 80081fe:	f7f8 f863 	bl	80002c8 <__aeabi_dsub>
 8008202:	a36b      	add	r3, pc, #428	@ (adr r3, 80083b0 <_dtoa_r+0x2b8>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 fa16 	bl	8000638 <__aeabi_dmul>
 800820c:	a36a      	add	r3, pc, #424	@ (adr r3, 80083b8 <_dtoa_r+0x2c0>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f85b 	bl	80002cc <__adddf3>
 8008216:	4604      	mov	r4, r0
 8008218:	4630      	mov	r0, r6
 800821a:	460d      	mov	r5, r1
 800821c:	f7f8 f9a2 	bl	8000564 <__aeabi_i2d>
 8008220:	a367      	add	r3, pc, #412	@ (adr r3, 80083c0 <_dtoa_r+0x2c8>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 fa07 	bl	8000638 <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 f84b 	bl	80002cc <__adddf3>
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	f7f8 fcad 	bl	8000b98 <__aeabi_d2iz>
 800823e:	2200      	movs	r2, #0
 8008240:	4607      	mov	r7, r0
 8008242:	2300      	movs	r3, #0
 8008244:	4620      	mov	r0, r4
 8008246:	4629      	mov	r1, r5
 8008248:	f7f8 fc68 	bl	8000b1c <__aeabi_dcmplt>
 800824c:	b140      	cbz	r0, 8008260 <_dtoa_r+0x168>
 800824e:	4638      	mov	r0, r7
 8008250:	f7f8 f988 	bl	8000564 <__aeabi_i2d>
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	f7f8 fc56 	bl	8000b08 <__aeabi_dcmpeq>
 800825c:	b900      	cbnz	r0, 8008260 <_dtoa_r+0x168>
 800825e:	3f01      	subs	r7, #1
 8008260:	2f16      	cmp	r7, #22
 8008262:	d852      	bhi.n	800830a <_dtoa_r+0x212>
 8008264:	4b5d      	ldr	r3, [pc, #372]	@ (80083dc <_dtoa_r+0x2e4>)
 8008266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008272:	f7f8 fc53 	bl	8000b1c <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	d049      	beq.n	800830e <_dtoa_r+0x216>
 800827a:	3f01      	subs	r7, #1
 800827c:	2300      	movs	r3, #0
 800827e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008280:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008282:	1b9b      	subs	r3, r3, r6
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	bf45      	ittet	mi
 8008288:	f1c3 0301 	rsbmi	r3, r3, #1
 800828c:	9300      	strmi	r3, [sp, #0]
 800828e:	2300      	movpl	r3, #0
 8008290:	2300      	movmi	r3, #0
 8008292:	9206      	str	r2, [sp, #24]
 8008294:	bf54      	ite	pl
 8008296:	9300      	strpl	r3, [sp, #0]
 8008298:	9306      	strmi	r3, [sp, #24]
 800829a:	2f00      	cmp	r7, #0
 800829c:	db39      	blt.n	8008312 <_dtoa_r+0x21a>
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80082a2:	443b      	add	r3, r7
 80082a4:	9306      	str	r3, [sp, #24]
 80082a6:	2300      	movs	r3, #0
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	2b09      	cmp	r3, #9
 80082ae:	d863      	bhi.n	8008378 <_dtoa_r+0x280>
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	bfc4      	itt	gt
 80082b4:	3b04      	subgt	r3, #4
 80082b6:	9307      	strgt	r3, [sp, #28]
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	f1a3 0302 	sub.w	r3, r3, #2
 80082be:	bfcc      	ite	gt
 80082c0:	2400      	movgt	r4, #0
 80082c2:	2401      	movle	r4, #1
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d863      	bhi.n	8008390 <_dtoa_r+0x298>
 80082c8:	e8df f003 	tbb	[pc, r3]
 80082cc:	2b375452 	.word	0x2b375452
 80082d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80082d4:	441e      	add	r6, r3
 80082d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80082da:	2b20      	cmp	r3, #32
 80082dc:	bfc1      	itttt	gt
 80082de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80082e2:	409f      	lslgt	r7, r3
 80082e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80082e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082ec:	bfd6      	itet	le
 80082ee:	f1c3 0320 	rsble	r3, r3, #32
 80082f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80082f6:	fa04 f003 	lslle.w	r0, r4, r3
 80082fa:	f7f8 f923 	bl	8000544 <__aeabi_ui2d>
 80082fe:	2201      	movs	r2, #1
 8008300:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008304:	3e01      	subs	r6, #1
 8008306:	9212      	str	r2, [sp, #72]	@ 0x48
 8008308:	e776      	b.n	80081f8 <_dtoa_r+0x100>
 800830a:	2301      	movs	r3, #1
 800830c:	e7b7      	b.n	800827e <_dtoa_r+0x186>
 800830e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008310:	e7b6      	b.n	8008280 <_dtoa_r+0x188>
 8008312:	9b00      	ldr	r3, [sp, #0]
 8008314:	1bdb      	subs	r3, r3, r7
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	427b      	negs	r3, r7
 800831a:	9308      	str	r3, [sp, #32]
 800831c:	2300      	movs	r3, #0
 800831e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008320:	e7c3      	b.n	80082aa <_dtoa_r+0x1b2>
 8008322:	2301      	movs	r3, #1
 8008324:	9309      	str	r3, [sp, #36]	@ 0x24
 8008326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008328:	eb07 0b03 	add.w	fp, r7, r3
 800832c:	f10b 0301 	add.w	r3, fp, #1
 8008330:	2b01      	cmp	r3, #1
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	bfb8      	it	lt
 8008336:	2301      	movlt	r3, #1
 8008338:	e006      	b.n	8008348 <_dtoa_r+0x250>
 800833a:	2301      	movs	r3, #1
 800833c:	9309      	str	r3, [sp, #36]	@ 0x24
 800833e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd28      	ble.n	8008396 <_dtoa_r+0x29e>
 8008344:	469b      	mov	fp, r3
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800834c:	2100      	movs	r1, #0
 800834e:	2204      	movs	r2, #4
 8008350:	f102 0514 	add.w	r5, r2, #20
 8008354:	429d      	cmp	r5, r3
 8008356:	d926      	bls.n	80083a6 <_dtoa_r+0x2ae>
 8008358:	6041      	str	r1, [r0, #4]
 800835a:	4648      	mov	r0, r9
 800835c:	f000 fd9c 	bl	8008e98 <_Balloc>
 8008360:	4682      	mov	sl, r0
 8008362:	2800      	cmp	r0, #0
 8008364:	d142      	bne.n	80083ec <_dtoa_r+0x2f4>
 8008366:	4b1e      	ldr	r3, [pc, #120]	@ (80083e0 <_dtoa_r+0x2e8>)
 8008368:	4602      	mov	r2, r0
 800836a:	f240 11af 	movw	r1, #431	@ 0x1af
 800836e:	e6da      	b.n	8008126 <_dtoa_r+0x2e>
 8008370:	2300      	movs	r3, #0
 8008372:	e7e3      	b.n	800833c <_dtoa_r+0x244>
 8008374:	2300      	movs	r3, #0
 8008376:	e7d5      	b.n	8008324 <_dtoa_r+0x22c>
 8008378:	2401      	movs	r4, #1
 800837a:	2300      	movs	r3, #0
 800837c:	9307      	str	r3, [sp, #28]
 800837e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008380:	f04f 3bff 	mov.w	fp, #4294967295
 8008384:	2200      	movs	r2, #0
 8008386:	f8cd b00c 	str.w	fp, [sp, #12]
 800838a:	2312      	movs	r3, #18
 800838c:	920c      	str	r2, [sp, #48]	@ 0x30
 800838e:	e7db      	b.n	8008348 <_dtoa_r+0x250>
 8008390:	2301      	movs	r3, #1
 8008392:	9309      	str	r3, [sp, #36]	@ 0x24
 8008394:	e7f4      	b.n	8008380 <_dtoa_r+0x288>
 8008396:	f04f 0b01 	mov.w	fp, #1
 800839a:	f8cd b00c 	str.w	fp, [sp, #12]
 800839e:	465b      	mov	r3, fp
 80083a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80083a4:	e7d0      	b.n	8008348 <_dtoa_r+0x250>
 80083a6:	3101      	adds	r1, #1
 80083a8:	0052      	lsls	r2, r2, #1
 80083aa:	e7d1      	b.n	8008350 <_dtoa_r+0x258>
 80083ac:	f3af 8000 	nop.w
 80083b0:	636f4361 	.word	0x636f4361
 80083b4:	3fd287a7 	.word	0x3fd287a7
 80083b8:	8b60c8b3 	.word	0x8b60c8b3
 80083bc:	3fc68a28 	.word	0x3fc68a28
 80083c0:	509f79fb 	.word	0x509f79fb
 80083c4:	3fd34413 	.word	0x3fd34413
 80083c8:	0800a225 	.word	0x0800a225
 80083cc:	0800a23c 	.word	0x0800a23c
 80083d0:	7ff00000 	.word	0x7ff00000
 80083d4:	0800a1f5 	.word	0x0800a1f5
 80083d8:	3ff80000 	.word	0x3ff80000
 80083dc:	0800a390 	.word	0x0800a390
 80083e0:	0800a294 	.word	0x0800a294
 80083e4:	0800a221 	.word	0x0800a221
 80083e8:	0800a1f4 	.word	0x0800a1f4
 80083ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083f0:	6018      	str	r0, [r3, #0]
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	2b0e      	cmp	r3, #14
 80083f6:	f200 80a1 	bhi.w	800853c <_dtoa_r+0x444>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	f000 809e 	beq.w	800853c <_dtoa_r+0x444>
 8008400:	2f00      	cmp	r7, #0
 8008402:	dd33      	ble.n	800846c <_dtoa_r+0x374>
 8008404:	4b9c      	ldr	r3, [pc, #624]	@ (8008678 <_dtoa_r+0x580>)
 8008406:	f007 020f 	and.w	r2, r7, #15
 800840a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800840e:	ed93 7b00 	vldr	d7, [r3]
 8008412:	05f8      	lsls	r0, r7, #23
 8008414:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008418:	ea4f 1427 	mov.w	r4, r7, asr #4
 800841c:	d516      	bpl.n	800844c <_dtoa_r+0x354>
 800841e:	4b97      	ldr	r3, [pc, #604]	@ (800867c <_dtoa_r+0x584>)
 8008420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008428:	f7f8 fa30 	bl	800088c <__aeabi_ddiv>
 800842c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008430:	f004 040f 	and.w	r4, r4, #15
 8008434:	2603      	movs	r6, #3
 8008436:	4d91      	ldr	r5, [pc, #580]	@ (800867c <_dtoa_r+0x584>)
 8008438:	b954      	cbnz	r4, 8008450 <_dtoa_r+0x358>
 800843a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800843e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008442:	f7f8 fa23 	bl	800088c <__aeabi_ddiv>
 8008446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800844a:	e028      	b.n	800849e <_dtoa_r+0x3a6>
 800844c:	2602      	movs	r6, #2
 800844e:	e7f2      	b.n	8008436 <_dtoa_r+0x33e>
 8008450:	07e1      	lsls	r1, r4, #31
 8008452:	d508      	bpl.n	8008466 <_dtoa_r+0x36e>
 8008454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800845c:	f7f8 f8ec 	bl	8000638 <__aeabi_dmul>
 8008460:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008464:	3601      	adds	r6, #1
 8008466:	1064      	asrs	r4, r4, #1
 8008468:	3508      	adds	r5, #8
 800846a:	e7e5      	b.n	8008438 <_dtoa_r+0x340>
 800846c:	f000 80af 	beq.w	80085ce <_dtoa_r+0x4d6>
 8008470:	427c      	negs	r4, r7
 8008472:	4b81      	ldr	r3, [pc, #516]	@ (8008678 <_dtoa_r+0x580>)
 8008474:	4d81      	ldr	r5, [pc, #516]	@ (800867c <_dtoa_r+0x584>)
 8008476:	f004 020f 	and.w	r2, r4, #15
 800847a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008486:	f7f8 f8d7 	bl	8000638 <__aeabi_dmul>
 800848a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800848e:	1124      	asrs	r4, r4, #4
 8008490:	2300      	movs	r3, #0
 8008492:	2602      	movs	r6, #2
 8008494:	2c00      	cmp	r4, #0
 8008496:	f040 808f 	bne.w	80085b8 <_dtoa_r+0x4c0>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1d3      	bne.n	8008446 <_dtoa_r+0x34e>
 800849e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8094 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084aa:	4b75      	ldr	r3, [pc, #468]	@ (8008680 <_dtoa_r+0x588>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f8 fb33 	bl	8000b1c <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f000 808b 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8087 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084c4:	f1bb 0f00 	cmp.w	fp, #0
 80084c8:	dd34      	ble.n	8008534 <_dtoa_r+0x43c>
 80084ca:	4620      	mov	r0, r4
 80084cc:	4b6d      	ldr	r3, [pc, #436]	@ (8008684 <_dtoa_r+0x58c>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 f8b1 	bl	8000638 <__aeabi_dmul>
 80084d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084da:	f107 38ff 	add.w	r8, r7, #4294967295
 80084de:	3601      	adds	r6, #1
 80084e0:	465c      	mov	r4, fp
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7f8 f83e 	bl	8000564 <__aeabi_i2d>
 80084e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ec:	f7f8 f8a4 	bl	8000638 <__aeabi_dmul>
 80084f0:	4b65      	ldr	r3, [pc, #404]	@ (8008688 <_dtoa_r+0x590>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	f7f7 feea 	bl	80002cc <__adddf3>
 80084f8:	4605      	mov	r5, r0
 80084fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084fe:	2c00      	cmp	r4, #0
 8008500:	d16a      	bne.n	80085d8 <_dtoa_r+0x4e0>
 8008502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008506:	4b61      	ldr	r3, [pc, #388]	@ (800868c <_dtoa_r+0x594>)
 8008508:	2200      	movs	r2, #0
 800850a:	f7f7 fedd 	bl	80002c8 <__aeabi_dsub>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008516:	462a      	mov	r2, r5
 8008518:	4633      	mov	r3, r6
 800851a:	f7f8 fb1d 	bl	8000b58 <__aeabi_dcmpgt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f040 8298 	bne.w	8008a54 <_dtoa_r+0x95c>
 8008524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008528:	462a      	mov	r2, r5
 800852a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800852e:	f7f8 faf5 	bl	8000b1c <__aeabi_dcmplt>
 8008532:	bb38      	cbnz	r0, 8008584 <_dtoa_r+0x48c>
 8008534:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008538:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800853c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	f2c0 8157 	blt.w	80087f2 <_dtoa_r+0x6fa>
 8008544:	2f0e      	cmp	r7, #14
 8008546:	f300 8154 	bgt.w	80087f2 <_dtoa_r+0x6fa>
 800854a:	4b4b      	ldr	r3, [pc, #300]	@ (8008678 <_dtoa_r+0x580>)
 800854c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008550:	ed93 7b00 	vldr	d7, [r3]
 8008554:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008556:	2b00      	cmp	r3, #0
 8008558:	ed8d 7b00 	vstr	d7, [sp]
 800855c:	f280 80e5 	bge.w	800872a <_dtoa_r+0x632>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f300 80e1 	bgt.w	800872a <_dtoa_r+0x632>
 8008568:	d10c      	bne.n	8008584 <_dtoa_r+0x48c>
 800856a:	4b48      	ldr	r3, [pc, #288]	@ (800868c <_dtoa_r+0x594>)
 800856c:	2200      	movs	r2, #0
 800856e:	ec51 0b17 	vmov	r0, r1, d7
 8008572:	f7f8 f861 	bl	8000638 <__aeabi_dmul>
 8008576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857a:	f7f8 fae3 	bl	8000b44 <__aeabi_dcmpge>
 800857e:	2800      	cmp	r0, #0
 8008580:	f000 8266 	beq.w	8008a50 <_dtoa_r+0x958>
 8008584:	2400      	movs	r4, #0
 8008586:	4625      	mov	r5, r4
 8008588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800858a:	4656      	mov	r6, sl
 800858c:	ea6f 0803 	mvn.w	r8, r3
 8008590:	2700      	movs	r7, #0
 8008592:	4621      	mov	r1, r4
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fcbf 	bl	8008f18 <_Bfree>
 800859a:	2d00      	cmp	r5, #0
 800859c:	f000 80bd 	beq.w	800871a <_dtoa_r+0x622>
 80085a0:	b12f      	cbz	r7, 80085ae <_dtoa_r+0x4b6>
 80085a2:	42af      	cmp	r7, r5
 80085a4:	d003      	beq.n	80085ae <_dtoa_r+0x4b6>
 80085a6:	4639      	mov	r1, r7
 80085a8:	4648      	mov	r0, r9
 80085aa:	f000 fcb5 	bl	8008f18 <_Bfree>
 80085ae:	4629      	mov	r1, r5
 80085b0:	4648      	mov	r0, r9
 80085b2:	f000 fcb1 	bl	8008f18 <_Bfree>
 80085b6:	e0b0      	b.n	800871a <_dtoa_r+0x622>
 80085b8:	07e2      	lsls	r2, r4, #31
 80085ba:	d505      	bpl.n	80085c8 <_dtoa_r+0x4d0>
 80085bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085c0:	f7f8 f83a 	bl	8000638 <__aeabi_dmul>
 80085c4:	3601      	adds	r6, #1
 80085c6:	2301      	movs	r3, #1
 80085c8:	1064      	asrs	r4, r4, #1
 80085ca:	3508      	adds	r5, #8
 80085cc:	e762      	b.n	8008494 <_dtoa_r+0x39c>
 80085ce:	2602      	movs	r6, #2
 80085d0:	e765      	b.n	800849e <_dtoa_r+0x3a6>
 80085d2:	9c03      	ldr	r4, [sp, #12]
 80085d4:	46b8      	mov	r8, r7
 80085d6:	e784      	b.n	80084e2 <_dtoa_r+0x3ea>
 80085d8:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <_dtoa_r+0x580>)
 80085da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085e4:	4454      	add	r4, sl
 80085e6:	2900      	cmp	r1, #0
 80085e8:	d054      	beq.n	8008694 <_dtoa_r+0x59c>
 80085ea:	4929      	ldr	r1, [pc, #164]	@ (8008690 <_dtoa_r+0x598>)
 80085ec:	2000      	movs	r0, #0
 80085ee:	f7f8 f94d 	bl	800088c <__aeabi_ddiv>
 80085f2:	4633      	mov	r3, r6
 80085f4:	462a      	mov	r2, r5
 80085f6:	f7f7 fe67 	bl	80002c8 <__aeabi_dsub>
 80085fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085fe:	4656      	mov	r6, sl
 8008600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008604:	f7f8 fac8 	bl	8000b98 <__aeabi_d2iz>
 8008608:	4605      	mov	r5, r0
 800860a:	f7f7 ffab 	bl	8000564 <__aeabi_i2d>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008616:	f7f7 fe57 	bl	80002c8 <__aeabi_dsub>
 800861a:	3530      	adds	r5, #48	@ 0x30
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008624:	f806 5b01 	strb.w	r5, [r6], #1
 8008628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800862c:	f7f8 fa76 	bl	8000b1c <__aeabi_dcmplt>
 8008630:	2800      	cmp	r0, #0
 8008632:	d172      	bne.n	800871a <_dtoa_r+0x622>
 8008634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008638:	4911      	ldr	r1, [pc, #68]	@ (8008680 <_dtoa_r+0x588>)
 800863a:	2000      	movs	r0, #0
 800863c:	f7f7 fe44 	bl	80002c8 <__aeabi_dsub>
 8008640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008644:	f7f8 fa6a 	bl	8000b1c <__aeabi_dcmplt>
 8008648:	2800      	cmp	r0, #0
 800864a:	f040 80b4 	bne.w	80087b6 <_dtoa_r+0x6be>
 800864e:	42a6      	cmp	r6, r4
 8008650:	f43f af70 	beq.w	8008534 <_dtoa_r+0x43c>
 8008654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008658:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <_dtoa_r+0x58c>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 ffec 	bl	8000638 <__aeabi_dmul>
 8008660:	4b08      	ldr	r3, [pc, #32]	@ (8008684 <_dtoa_r+0x58c>)
 8008662:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008666:	2200      	movs	r2, #0
 8008668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866c:	f7f7 ffe4 	bl	8000638 <__aeabi_dmul>
 8008670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008674:	e7c4      	b.n	8008600 <_dtoa_r+0x508>
 8008676:	bf00      	nop
 8008678:	0800a390 	.word	0x0800a390
 800867c:	0800a368 	.word	0x0800a368
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	40240000 	.word	0x40240000
 8008688:	401c0000 	.word	0x401c0000
 800868c:	40140000 	.word	0x40140000
 8008690:	3fe00000 	.word	0x3fe00000
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	f7f7 ffce 	bl	8000638 <__aeabi_dmul>
 800869c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80086a2:	4656      	mov	r6, sl
 80086a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086a8:	f7f8 fa76 	bl	8000b98 <__aeabi_d2iz>
 80086ac:	4605      	mov	r5, r0
 80086ae:	f7f7 ff59 	bl	8000564 <__aeabi_i2d>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ba:	f7f7 fe05 	bl	80002c8 <__aeabi_dsub>
 80086be:	3530      	adds	r5, #48	@ 0x30
 80086c0:	f806 5b01 	strb.w	r5, [r6], #1
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	42a6      	cmp	r6, r4
 80086ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	d124      	bne.n	800871e <_dtoa_r+0x626>
 80086d4:	4baf      	ldr	r3, [pc, #700]	@ (8008994 <_dtoa_r+0x89c>)
 80086d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086da:	f7f7 fdf7 	bl	80002cc <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e6:	f7f8 fa37 	bl	8000b58 <__aeabi_dcmpgt>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d163      	bne.n	80087b6 <_dtoa_r+0x6be>
 80086ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086f2:	49a8      	ldr	r1, [pc, #672]	@ (8008994 <_dtoa_r+0x89c>)
 80086f4:	2000      	movs	r0, #0
 80086f6:	f7f7 fde7 	bl	80002c8 <__aeabi_dsub>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008702:	f7f8 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f af14 	beq.w	8008534 <_dtoa_r+0x43c>
 800870c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800870e:	1e73      	subs	r3, r6, #1
 8008710:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008712:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008716:	2b30      	cmp	r3, #48	@ 0x30
 8008718:	d0f8      	beq.n	800870c <_dtoa_r+0x614>
 800871a:	4647      	mov	r7, r8
 800871c:	e03b      	b.n	8008796 <_dtoa_r+0x69e>
 800871e:	4b9e      	ldr	r3, [pc, #632]	@ (8008998 <_dtoa_r+0x8a0>)
 8008720:	f7f7 ff8a 	bl	8000638 <__aeabi_dmul>
 8008724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008728:	e7bc      	b.n	80086a4 <_dtoa_r+0x5ac>
 800872a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800872e:	4656      	mov	r6, sl
 8008730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f8 f8a8 	bl	800088c <__aeabi_ddiv>
 800873c:	f7f8 fa2c 	bl	8000b98 <__aeabi_d2iz>
 8008740:	4680      	mov	r8, r0
 8008742:	f7f7 ff0f 	bl	8000564 <__aeabi_i2d>
 8008746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800874a:	f7f7 ff75 	bl	8000638 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800875a:	f7f7 fdb5 	bl	80002c8 <__aeabi_dsub>
 800875e:	f806 4b01 	strb.w	r4, [r6], #1
 8008762:	9d03      	ldr	r5, [sp, #12]
 8008764:	eba6 040a 	sub.w	r4, r6, sl
 8008768:	42a5      	cmp	r5, r4
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	d133      	bne.n	80087d8 <_dtoa_r+0x6e0>
 8008770:	f7f7 fdac 	bl	80002cc <__adddf3>
 8008774:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008778:	4604      	mov	r4, r0
 800877a:	460d      	mov	r5, r1
 800877c:	f7f8 f9ec 	bl	8000b58 <__aeabi_dcmpgt>
 8008780:	b9c0      	cbnz	r0, 80087b4 <_dtoa_r+0x6bc>
 8008782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f8 f9bd 	bl	8000b08 <__aeabi_dcmpeq>
 800878e:	b110      	cbz	r0, 8008796 <_dtoa_r+0x69e>
 8008790:	f018 0f01 	tst.w	r8, #1
 8008794:	d10e      	bne.n	80087b4 <_dtoa_r+0x6bc>
 8008796:	9902      	ldr	r1, [sp, #8]
 8008798:	4648      	mov	r0, r9
 800879a:	f000 fbbd 	bl	8008f18 <_Bfree>
 800879e:	2300      	movs	r3, #0
 80087a0:	7033      	strb	r3, [r6, #0]
 80087a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087a4:	3701      	adds	r7, #1
 80087a6:	601f      	str	r7, [r3, #0]
 80087a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 824b 	beq.w	8008c46 <_dtoa_r+0xb4e>
 80087b0:	601e      	str	r6, [r3, #0]
 80087b2:	e248      	b.n	8008c46 <_dtoa_r+0xb4e>
 80087b4:	46b8      	mov	r8, r7
 80087b6:	4633      	mov	r3, r6
 80087b8:	461e      	mov	r6, r3
 80087ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087be:	2a39      	cmp	r2, #57	@ 0x39
 80087c0:	d106      	bne.n	80087d0 <_dtoa_r+0x6d8>
 80087c2:	459a      	cmp	sl, r3
 80087c4:	d1f8      	bne.n	80087b8 <_dtoa_r+0x6c0>
 80087c6:	2230      	movs	r2, #48	@ 0x30
 80087c8:	f108 0801 	add.w	r8, r8, #1
 80087cc:	f88a 2000 	strb.w	r2, [sl]
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	3201      	adds	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e7a0      	b.n	800871a <_dtoa_r+0x622>
 80087d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008998 <_dtoa_r+0x8a0>)
 80087da:	2200      	movs	r2, #0
 80087dc:	f7f7 ff2c 	bl	8000638 <__aeabi_dmul>
 80087e0:	2200      	movs	r2, #0
 80087e2:	2300      	movs	r3, #0
 80087e4:	4604      	mov	r4, r0
 80087e6:	460d      	mov	r5, r1
 80087e8:	f7f8 f98e 	bl	8000b08 <__aeabi_dcmpeq>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d09f      	beq.n	8008730 <_dtoa_r+0x638>
 80087f0:	e7d1      	b.n	8008796 <_dtoa_r+0x69e>
 80087f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	f000 80ea 	beq.w	80089ce <_dtoa_r+0x8d6>
 80087fa:	9a07      	ldr	r2, [sp, #28]
 80087fc:	2a01      	cmp	r2, #1
 80087fe:	f300 80cd 	bgt.w	800899c <_dtoa_r+0x8a4>
 8008802:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008804:	2a00      	cmp	r2, #0
 8008806:	f000 80c1 	beq.w	800898c <_dtoa_r+0x894>
 800880a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800880e:	9c08      	ldr	r4, [sp, #32]
 8008810:	9e00      	ldr	r6, [sp, #0]
 8008812:	9a00      	ldr	r2, [sp, #0]
 8008814:	441a      	add	r2, r3
 8008816:	9200      	str	r2, [sp, #0]
 8008818:	9a06      	ldr	r2, [sp, #24]
 800881a:	2101      	movs	r1, #1
 800881c:	441a      	add	r2, r3
 800881e:	4648      	mov	r0, r9
 8008820:	9206      	str	r2, [sp, #24]
 8008822:	f000 fc2d 	bl	8009080 <__i2b>
 8008826:	4605      	mov	r5, r0
 8008828:	b166      	cbz	r6, 8008844 <_dtoa_r+0x74c>
 800882a:	9b06      	ldr	r3, [sp, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	dd09      	ble.n	8008844 <_dtoa_r+0x74c>
 8008830:	42b3      	cmp	r3, r6
 8008832:	9a00      	ldr	r2, [sp, #0]
 8008834:	bfa8      	it	ge
 8008836:	4633      	movge	r3, r6
 8008838:	1ad2      	subs	r2, r2, r3
 800883a:	9200      	str	r2, [sp, #0]
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	1af6      	subs	r6, r6, r3
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	9306      	str	r3, [sp, #24]
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	b30b      	cbz	r3, 800888c <_dtoa_r+0x794>
 8008848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80c6 	beq.w	80089dc <_dtoa_r+0x8e4>
 8008850:	2c00      	cmp	r4, #0
 8008852:	f000 80c0 	beq.w	80089d6 <_dtoa_r+0x8de>
 8008856:	4629      	mov	r1, r5
 8008858:	4622      	mov	r2, r4
 800885a:	4648      	mov	r0, r9
 800885c:	f000 fcc8 	bl	80091f0 <__pow5mult>
 8008860:	9a02      	ldr	r2, [sp, #8]
 8008862:	4601      	mov	r1, r0
 8008864:	4605      	mov	r5, r0
 8008866:	4648      	mov	r0, r9
 8008868:	f000 fc20 	bl	80090ac <__multiply>
 800886c:	9902      	ldr	r1, [sp, #8]
 800886e:	4680      	mov	r8, r0
 8008870:	4648      	mov	r0, r9
 8008872:	f000 fb51 	bl	8008f18 <_Bfree>
 8008876:	9b08      	ldr	r3, [sp, #32]
 8008878:	1b1b      	subs	r3, r3, r4
 800887a:	9308      	str	r3, [sp, #32]
 800887c:	f000 80b1 	beq.w	80089e2 <_dtoa_r+0x8ea>
 8008880:	9a08      	ldr	r2, [sp, #32]
 8008882:	4641      	mov	r1, r8
 8008884:	4648      	mov	r0, r9
 8008886:	f000 fcb3 	bl	80091f0 <__pow5mult>
 800888a:	9002      	str	r0, [sp, #8]
 800888c:	2101      	movs	r1, #1
 800888e:	4648      	mov	r0, r9
 8008890:	f000 fbf6 	bl	8009080 <__i2b>
 8008894:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008896:	4604      	mov	r4, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 81d8 	beq.w	8008c4e <_dtoa_r+0xb56>
 800889e:	461a      	mov	r2, r3
 80088a0:	4601      	mov	r1, r0
 80088a2:	4648      	mov	r0, r9
 80088a4:	f000 fca4 	bl	80091f0 <__pow5mult>
 80088a8:	9b07      	ldr	r3, [sp, #28]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	4604      	mov	r4, r0
 80088ae:	f300 809f 	bgt.w	80089f0 <_dtoa_r+0x8f8>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 8097 	bne.w	80089e8 <_dtoa_r+0x8f0>
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 8093 	bne.w	80089ec <_dtoa_r+0x8f4>
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088cc:	0d1b      	lsrs	r3, r3, #20
 80088ce:	051b      	lsls	r3, r3, #20
 80088d0:	b133      	cbz	r3, 80088e0 <_dtoa_r+0x7e8>
 80088d2:	9b00      	ldr	r3, [sp, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	3301      	adds	r3, #1
 80088dc:	9306      	str	r3, [sp, #24]
 80088de:	2301      	movs	r3, #1
 80088e0:	9308      	str	r3, [sp, #32]
 80088e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 81b8 	beq.w	8008c5a <_dtoa_r+0xb62>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f000 fb79 	bl	8008fe8 <__hi0bits>
 80088f6:	f1c0 0020 	rsb	r0, r0, #32
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	4418      	add	r0, r3
 80088fe:	f010 001f 	ands.w	r0, r0, #31
 8008902:	f000 8082 	beq.w	8008a0a <_dtoa_r+0x912>
 8008906:	f1c0 0320 	rsb	r3, r0, #32
 800890a:	2b04      	cmp	r3, #4
 800890c:	dd73      	ble.n	80089f6 <_dtoa_r+0x8fe>
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	f1c0 001c 	rsb	r0, r0, #28
 8008914:	4403      	add	r3, r0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	9b06      	ldr	r3, [sp, #24]
 800891a:	4403      	add	r3, r0
 800891c:	4406      	add	r6, r0
 800891e:	9306      	str	r3, [sp, #24]
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x83a>
 8008926:	9902      	ldr	r1, [sp, #8]
 8008928:	461a      	mov	r2, r3
 800892a:	4648      	mov	r0, r9
 800892c:	f000 fcba 	bl	80092a4 <__lshift>
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	9b06      	ldr	r3, [sp, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd05      	ble.n	8008944 <_dtoa_r+0x84c>
 8008938:	4621      	mov	r1, r4
 800893a:	461a      	mov	r2, r3
 800893c:	4648      	mov	r0, r9
 800893e:	f000 fcb1 	bl	80092a4 <__lshift>
 8008942:	4604      	mov	r4, r0
 8008944:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d061      	beq.n	8008a0e <_dtoa_r+0x916>
 800894a:	9802      	ldr	r0, [sp, #8]
 800894c:	4621      	mov	r1, r4
 800894e:	f000 fd15 	bl	800937c <__mcmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	da5b      	bge.n	8008a0e <_dtoa_r+0x916>
 8008956:	2300      	movs	r3, #0
 8008958:	9902      	ldr	r1, [sp, #8]
 800895a:	220a      	movs	r2, #10
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fafd 	bl	8008f5c <__multadd>
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	9002      	str	r0, [sp, #8]
 8008966:	f107 38ff 	add.w	r8, r7, #4294967295
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 8177 	beq.w	8008c5e <_dtoa_r+0xb66>
 8008970:	4629      	mov	r1, r5
 8008972:	2300      	movs	r3, #0
 8008974:	220a      	movs	r2, #10
 8008976:	4648      	mov	r0, r9
 8008978:	f000 faf0 	bl	8008f5c <__multadd>
 800897c:	f1bb 0f00 	cmp.w	fp, #0
 8008980:	4605      	mov	r5, r0
 8008982:	dc6f      	bgt.n	8008a64 <_dtoa_r+0x96c>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	2b02      	cmp	r3, #2
 8008988:	dc49      	bgt.n	8008a1e <_dtoa_r+0x926>
 800898a:	e06b      	b.n	8008a64 <_dtoa_r+0x96c>
 800898c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800898e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008992:	e73c      	b.n	800880e <_dtoa_r+0x716>
 8008994:	3fe00000 	.word	0x3fe00000
 8008998:	40240000 	.word	0x40240000
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1e5c      	subs	r4, r3, #1
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	db09      	blt.n	80089ba <_dtoa_r+0x8c2>
 80089a6:	1b1c      	subs	r4, r3, r4
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f6bf af30 	bge.w	8008810 <_dtoa_r+0x718>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	9a03      	ldr	r2, [sp, #12]
 80089b4:	1a9e      	subs	r6, r3, r2
 80089b6:	2300      	movs	r3, #0
 80089b8:	e72b      	b.n	8008812 <_dtoa_r+0x71a>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089be:	9408      	str	r4, [sp, #32]
 80089c0:	1ae3      	subs	r3, r4, r3
 80089c2:	441a      	add	r2, r3
 80089c4:	9e00      	ldr	r6, [sp, #0]
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80089ca:	2400      	movs	r4, #0
 80089cc:	e721      	b.n	8008812 <_dtoa_r+0x71a>
 80089ce:	9c08      	ldr	r4, [sp, #32]
 80089d0:	9e00      	ldr	r6, [sp, #0]
 80089d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80089d4:	e728      	b.n	8008828 <_dtoa_r+0x730>
 80089d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80089da:	e751      	b.n	8008880 <_dtoa_r+0x788>
 80089dc:	9a08      	ldr	r2, [sp, #32]
 80089de:	9902      	ldr	r1, [sp, #8]
 80089e0:	e750      	b.n	8008884 <_dtoa_r+0x78c>
 80089e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80089e6:	e751      	b.n	800888c <_dtoa_r+0x794>
 80089e8:	2300      	movs	r3, #0
 80089ea:	e779      	b.n	80088e0 <_dtoa_r+0x7e8>
 80089ec:	9b04      	ldr	r3, [sp, #16]
 80089ee:	e777      	b.n	80088e0 <_dtoa_r+0x7e8>
 80089f0:	2300      	movs	r3, #0
 80089f2:	9308      	str	r3, [sp, #32]
 80089f4:	e779      	b.n	80088ea <_dtoa_r+0x7f2>
 80089f6:	d093      	beq.n	8008920 <_dtoa_r+0x828>
 80089f8:	9a00      	ldr	r2, [sp, #0]
 80089fa:	331c      	adds	r3, #28
 80089fc:	441a      	add	r2, r3
 80089fe:	9200      	str	r2, [sp, #0]
 8008a00:	9a06      	ldr	r2, [sp, #24]
 8008a02:	441a      	add	r2, r3
 8008a04:	441e      	add	r6, r3
 8008a06:	9206      	str	r2, [sp, #24]
 8008a08:	e78a      	b.n	8008920 <_dtoa_r+0x828>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	e7f4      	b.n	80089f8 <_dtoa_r+0x900>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	46b8      	mov	r8, r7
 8008a14:	dc20      	bgt.n	8008a58 <_dtoa_r+0x960>
 8008a16:	469b      	mov	fp, r3
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	dd1e      	ble.n	8008a5c <_dtoa_r+0x964>
 8008a1e:	f1bb 0f00 	cmp.w	fp, #0
 8008a22:	f47f adb1 	bne.w	8008588 <_dtoa_r+0x490>
 8008a26:	4621      	mov	r1, r4
 8008a28:	465b      	mov	r3, fp
 8008a2a:	2205      	movs	r2, #5
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f000 fa95 	bl	8008f5c <__multadd>
 8008a32:	4601      	mov	r1, r0
 8008a34:	4604      	mov	r4, r0
 8008a36:	9802      	ldr	r0, [sp, #8]
 8008a38:	f000 fca0 	bl	800937c <__mcmp>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f77f ada3 	ble.w	8008588 <_dtoa_r+0x490>
 8008a42:	4656      	mov	r6, sl
 8008a44:	2331      	movs	r3, #49	@ 0x31
 8008a46:	f806 3b01 	strb.w	r3, [r6], #1
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	e59f      	b.n	8008590 <_dtoa_r+0x498>
 8008a50:	9c03      	ldr	r4, [sp, #12]
 8008a52:	46b8      	mov	r8, r7
 8008a54:	4625      	mov	r5, r4
 8008a56:	e7f4      	b.n	8008a42 <_dtoa_r+0x94a>
 8008a58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 8101 	beq.w	8008c66 <_dtoa_r+0xb6e>
 8008a64:	2e00      	cmp	r6, #0
 8008a66:	dd05      	ble.n	8008a74 <_dtoa_r+0x97c>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	4648      	mov	r0, r9
 8008a6e:	f000 fc19 	bl	80092a4 <__lshift>
 8008a72:	4605      	mov	r5, r0
 8008a74:	9b08      	ldr	r3, [sp, #32]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d05c      	beq.n	8008b34 <_dtoa_r+0xa3c>
 8008a7a:	6869      	ldr	r1, [r5, #4]
 8008a7c:	4648      	mov	r0, r9
 8008a7e:	f000 fa0b 	bl	8008e98 <_Balloc>
 8008a82:	4606      	mov	r6, r0
 8008a84:	b928      	cbnz	r0, 8008a92 <_dtoa_r+0x99a>
 8008a86:	4b82      	ldr	r3, [pc, #520]	@ (8008c90 <_dtoa_r+0xb98>)
 8008a88:	4602      	mov	r2, r0
 8008a8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a8e:	f7ff bb4a 	b.w	8008126 <_dtoa_r+0x2e>
 8008a92:	692a      	ldr	r2, [r5, #16]
 8008a94:	3202      	adds	r2, #2
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	f105 010c 	add.w	r1, r5, #12
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	f7ff fa92 	bl	8007fc6 <memcpy>
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f000 fbfc 	bl	80092a4 <__lshift>
 8008aac:	f10a 0301 	add.w	r3, sl, #1
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	eb0a 030b 	add.w	r3, sl, fp
 8008ab6:	9308      	str	r3, [sp, #32]
 8008ab8:	9b04      	ldr	r3, [sp, #16]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	462f      	mov	r7, r5
 8008ac0:	9306      	str	r3, [sp, #24]
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	9b00      	ldr	r3, [sp, #0]
 8008ac6:	9802      	ldr	r0, [sp, #8]
 8008ac8:	4621      	mov	r1, r4
 8008aca:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ace:	f7ff fa88 	bl	8007fe2 <quorem>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	3330      	adds	r3, #48	@ 0x30
 8008ad6:	9003      	str	r0, [sp, #12]
 8008ad8:	4639      	mov	r1, r7
 8008ada:	9802      	ldr	r0, [sp, #8]
 8008adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ade:	f000 fc4d 	bl	800937c <__mcmp>
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	9004      	str	r0, [sp, #16]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4648      	mov	r0, r9
 8008aea:	f000 fc63 	bl	80093b4 <__mdiff>
 8008aee:	68c2      	ldr	r2, [r0, #12]
 8008af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af2:	4606      	mov	r6, r0
 8008af4:	bb02      	cbnz	r2, 8008b38 <_dtoa_r+0xa40>
 8008af6:	4601      	mov	r1, r0
 8008af8:	9802      	ldr	r0, [sp, #8]
 8008afa:	f000 fc3f 	bl	800937c <__mcmp>
 8008afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b00:	4602      	mov	r2, r0
 8008b02:	4631      	mov	r1, r6
 8008b04:	4648      	mov	r0, r9
 8008b06:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0a:	f000 fa05 	bl	8008f18 <_Bfree>
 8008b0e:	9b07      	ldr	r3, [sp, #28]
 8008b10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b12:	9e00      	ldr	r6, [sp, #0]
 8008b14:	ea42 0103 	orr.w	r1, r2, r3
 8008b18:	9b06      	ldr	r3, [sp, #24]
 8008b1a:	4319      	orrs	r1, r3
 8008b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1e:	d10d      	bne.n	8008b3c <_dtoa_r+0xa44>
 8008b20:	2b39      	cmp	r3, #57	@ 0x39
 8008b22:	d027      	beq.n	8008b74 <_dtoa_r+0xa7c>
 8008b24:	9a04      	ldr	r2, [sp, #16]
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	dd01      	ble.n	8008b2e <_dtoa_r+0xa36>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	3331      	adds	r3, #49	@ 0x31
 8008b2e:	f88b 3000 	strb.w	r3, [fp]
 8008b32:	e52e      	b.n	8008592 <_dtoa_r+0x49a>
 8008b34:	4628      	mov	r0, r5
 8008b36:	e7b9      	b.n	8008aac <_dtoa_r+0x9b4>
 8008b38:	2201      	movs	r2, #1
 8008b3a:	e7e2      	b.n	8008b02 <_dtoa_r+0xa0a>
 8008b3c:	9904      	ldr	r1, [sp, #16]
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	db04      	blt.n	8008b4c <_dtoa_r+0xa54>
 8008b42:	9807      	ldr	r0, [sp, #28]
 8008b44:	4301      	orrs	r1, r0
 8008b46:	9806      	ldr	r0, [sp, #24]
 8008b48:	4301      	orrs	r1, r0
 8008b4a:	d120      	bne.n	8008b8e <_dtoa_r+0xa96>
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	ddee      	ble.n	8008b2e <_dtoa_r+0xa36>
 8008b50:	9902      	ldr	r1, [sp, #8]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2201      	movs	r2, #1
 8008b56:	4648      	mov	r0, r9
 8008b58:	f000 fba4 	bl	80092a4 <__lshift>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	9002      	str	r0, [sp, #8]
 8008b60:	f000 fc0c 	bl	800937c <__mcmp>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	dc02      	bgt.n	8008b70 <_dtoa_r+0xa78>
 8008b6a:	d1e0      	bne.n	8008b2e <_dtoa_r+0xa36>
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	d5de      	bpl.n	8008b2e <_dtoa_r+0xa36>
 8008b70:	2b39      	cmp	r3, #57	@ 0x39
 8008b72:	d1da      	bne.n	8008b2a <_dtoa_r+0xa32>
 8008b74:	2339      	movs	r3, #57	@ 0x39
 8008b76:	f88b 3000 	strb.w	r3, [fp]
 8008b7a:	4633      	mov	r3, r6
 8008b7c:	461e      	mov	r6, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b84:	2a39      	cmp	r2, #57	@ 0x39
 8008b86:	d04e      	beq.n	8008c26 <_dtoa_r+0xb2e>
 8008b88:	3201      	adds	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e501      	b.n	8008592 <_dtoa_r+0x49a>
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	dd03      	ble.n	8008b9a <_dtoa_r+0xaa2>
 8008b92:	2b39      	cmp	r3, #57	@ 0x39
 8008b94:	d0ee      	beq.n	8008b74 <_dtoa_r+0xa7c>
 8008b96:	3301      	adds	r3, #1
 8008b98:	e7c9      	b.n	8008b2e <_dtoa_r+0xa36>
 8008b9a:	9a00      	ldr	r2, [sp, #0]
 8008b9c:	9908      	ldr	r1, [sp, #32]
 8008b9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ba2:	428a      	cmp	r2, r1
 8008ba4:	d028      	beq.n	8008bf8 <_dtoa_r+0xb00>
 8008ba6:	9902      	ldr	r1, [sp, #8]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	220a      	movs	r2, #10
 8008bac:	4648      	mov	r0, r9
 8008bae:	f000 f9d5 	bl	8008f5c <__multadd>
 8008bb2:	42af      	cmp	r7, r5
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	f04f 0300 	mov.w	r3, #0
 8008bba:	f04f 020a 	mov.w	r2, #10
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4648      	mov	r0, r9
 8008bc2:	d107      	bne.n	8008bd4 <_dtoa_r+0xadc>
 8008bc4:	f000 f9ca 	bl	8008f5c <__multadd>
 8008bc8:	4607      	mov	r7, r0
 8008bca:	4605      	mov	r5, r0
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	e777      	b.n	8008ac4 <_dtoa_r+0x9cc>
 8008bd4:	f000 f9c2 	bl	8008f5c <__multadd>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4607      	mov	r7, r0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4648      	mov	r0, r9
 8008be2:	f000 f9bb 	bl	8008f5c <__multadd>
 8008be6:	4605      	mov	r5, r0
 8008be8:	e7f0      	b.n	8008bcc <_dtoa_r+0xad4>
 8008bea:	f1bb 0f00 	cmp.w	fp, #0
 8008bee:	bfcc      	ite	gt
 8008bf0:	465e      	movgt	r6, fp
 8008bf2:	2601      	movle	r6, #1
 8008bf4:	4456      	add	r6, sl
 8008bf6:	2700      	movs	r7, #0
 8008bf8:	9902      	ldr	r1, [sp, #8]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4648      	mov	r0, r9
 8008c00:	f000 fb50 	bl	80092a4 <__lshift>
 8008c04:	4621      	mov	r1, r4
 8008c06:	9002      	str	r0, [sp, #8]
 8008c08:	f000 fbb8 	bl	800937c <__mcmp>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	dcb4      	bgt.n	8008b7a <_dtoa_r+0xa82>
 8008c10:	d102      	bne.n	8008c18 <_dtoa_r+0xb20>
 8008c12:	9b00      	ldr	r3, [sp, #0]
 8008c14:	07db      	lsls	r3, r3, #31
 8008c16:	d4b0      	bmi.n	8008b7a <_dtoa_r+0xa82>
 8008c18:	4633      	mov	r3, r6
 8008c1a:	461e      	mov	r6, r3
 8008c1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c20:	2a30      	cmp	r2, #48	@ 0x30
 8008c22:	d0fa      	beq.n	8008c1a <_dtoa_r+0xb22>
 8008c24:	e4b5      	b.n	8008592 <_dtoa_r+0x49a>
 8008c26:	459a      	cmp	sl, r3
 8008c28:	d1a8      	bne.n	8008b7c <_dtoa_r+0xa84>
 8008c2a:	2331      	movs	r3, #49	@ 0x31
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	f88a 3000 	strb.w	r3, [sl]
 8008c34:	e4ad      	b.n	8008592 <_dtoa_r+0x49a>
 8008c36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008c94 <_dtoa_r+0xb9c>
 8008c3c:	b11b      	cbz	r3, 8008c46 <_dtoa_r+0xb4e>
 8008c3e:	f10a 0308 	add.w	r3, sl, #8
 8008c42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	4650      	mov	r0, sl
 8008c48:	b017      	add	sp, #92	@ 0x5c
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	f77f ae2e 	ble.w	80088b2 <_dtoa_r+0x7ba>
 8008c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c58:	9308      	str	r3, [sp, #32]
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e64d      	b.n	80088fa <_dtoa_r+0x802>
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	f77f aed9 	ble.w	8008a18 <_dtoa_r+0x920>
 8008c66:	4656      	mov	r6, sl
 8008c68:	9802      	ldr	r0, [sp, #8]
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	f7ff f9b9 	bl	8007fe2 <quorem>
 8008c70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008c74:	f806 3b01 	strb.w	r3, [r6], #1
 8008c78:	eba6 020a 	sub.w	r2, r6, sl
 8008c7c:	4593      	cmp	fp, r2
 8008c7e:	ddb4      	ble.n	8008bea <_dtoa_r+0xaf2>
 8008c80:	9902      	ldr	r1, [sp, #8]
 8008c82:	2300      	movs	r3, #0
 8008c84:	220a      	movs	r2, #10
 8008c86:	4648      	mov	r0, r9
 8008c88:	f000 f968 	bl	8008f5c <__multadd>
 8008c8c:	9002      	str	r0, [sp, #8]
 8008c8e:	e7eb      	b.n	8008c68 <_dtoa_r+0xb70>
 8008c90:	0800a294 	.word	0x0800a294
 8008c94:	0800a218 	.word	0x0800a218

08008c98 <_free_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	d041      	beq.n	8008d24 <_free_r+0x8c>
 8008ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca4:	1f0c      	subs	r4, r1, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfb8      	it	lt
 8008caa:	18e4      	addlt	r4, r4, r3
 8008cac:	f000 f8e8 	bl	8008e80 <__malloc_lock>
 8008cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d28 <_free_r+0x90>)
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	b933      	cbnz	r3, 8008cc4 <_free_r+0x2c>
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	6014      	str	r4, [r2, #0]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cc0:	f000 b8e4 	b.w	8008e8c <__malloc_unlock>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d908      	bls.n	8008cda <_free_r+0x42>
 8008cc8:	6820      	ldr	r0, [r4, #0]
 8008cca:	1821      	adds	r1, r4, r0
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	bf01      	itttt	eq
 8008cd0:	6819      	ldreq	r1, [r3, #0]
 8008cd2:	685b      	ldreq	r3, [r3, #4]
 8008cd4:	1809      	addeq	r1, r1, r0
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	e7ed      	b.n	8008cb6 <_free_r+0x1e>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b10b      	cbz	r3, 8008ce4 <_free_r+0x4c>
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d9fa      	bls.n	8008cda <_free_r+0x42>
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	1850      	adds	r0, r2, r1
 8008ce8:	42a0      	cmp	r0, r4
 8008cea:	d10b      	bne.n	8008d04 <_free_r+0x6c>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	4401      	add	r1, r0
 8008cf0:	1850      	adds	r0, r2, r1
 8008cf2:	4283      	cmp	r3, r0
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	d1e0      	bne.n	8008cba <_free_r+0x22>
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	6053      	str	r3, [r2, #4]
 8008cfe:	4408      	add	r0, r1
 8008d00:	6010      	str	r0, [r2, #0]
 8008d02:	e7da      	b.n	8008cba <_free_r+0x22>
 8008d04:	d902      	bls.n	8008d0c <_free_r+0x74>
 8008d06:	230c      	movs	r3, #12
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	e7d6      	b.n	8008cba <_free_r+0x22>
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	1821      	adds	r1, r4, r0
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf04      	itt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	bf04      	itt	eq
 8008d1c:	1809      	addeq	r1, r1, r0
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	6054      	str	r4, [r2, #4]
 8008d22:	e7ca      	b.n	8008cba <_free_r+0x22>
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
 8008d26:	bf00      	nop
 8008d28:	20004f7c 	.word	0x20004f7c

08008d2c <malloc>:
 8008d2c:	4b02      	ldr	r3, [pc, #8]	@ (8008d38 <malloc+0xc>)
 8008d2e:	4601      	mov	r1, r0
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	f000 b825 	b.w	8008d80 <_malloc_r>
 8008d36:	bf00      	nop
 8008d38:	20000020 	.word	0x20000020

08008d3c <sbrk_aligned>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	4e0f      	ldr	r6, [pc, #60]	@ (8008d7c <sbrk_aligned+0x40>)
 8008d40:	460c      	mov	r4, r1
 8008d42:	6831      	ldr	r1, [r6, #0]
 8008d44:	4605      	mov	r5, r0
 8008d46:	b911      	cbnz	r1, 8008d4e <sbrk_aligned+0x12>
 8008d48:	f000 fe3e 	bl	80099c8 <_sbrk_r>
 8008d4c:	6030      	str	r0, [r6, #0]
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4628      	mov	r0, r5
 8008d52:	f000 fe39 	bl	80099c8 <_sbrk_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d103      	bne.n	8008d62 <sbrk_aligned+0x26>
 8008d5a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d5e:	4620      	mov	r0, r4
 8008d60:	bd70      	pop	{r4, r5, r6, pc}
 8008d62:	1cc4      	adds	r4, r0, #3
 8008d64:	f024 0403 	bic.w	r4, r4, #3
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d0f8      	beq.n	8008d5e <sbrk_aligned+0x22>
 8008d6c:	1a21      	subs	r1, r4, r0
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 fe2a 	bl	80099c8 <_sbrk_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d1f2      	bne.n	8008d5e <sbrk_aligned+0x22>
 8008d78:	e7ef      	b.n	8008d5a <sbrk_aligned+0x1e>
 8008d7a:	bf00      	nop
 8008d7c:	20004f78 	.word	0x20004f78

08008d80 <_malloc_r>:
 8008d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d84:	1ccd      	adds	r5, r1, #3
 8008d86:	f025 0503 	bic.w	r5, r5, #3
 8008d8a:	3508      	adds	r5, #8
 8008d8c:	2d0c      	cmp	r5, #12
 8008d8e:	bf38      	it	cc
 8008d90:	250c      	movcc	r5, #12
 8008d92:	2d00      	cmp	r5, #0
 8008d94:	4606      	mov	r6, r0
 8008d96:	db01      	blt.n	8008d9c <_malloc_r+0x1c>
 8008d98:	42a9      	cmp	r1, r5
 8008d9a:	d904      	bls.n	8008da6 <_malloc_r+0x26>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	6033      	str	r3, [r6, #0]
 8008da0:	2000      	movs	r0, #0
 8008da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e7c <_malloc_r+0xfc>
 8008daa:	f000 f869 	bl	8008e80 <__malloc_lock>
 8008dae:	f8d8 3000 	ldr.w	r3, [r8]
 8008db2:	461c      	mov	r4, r3
 8008db4:	bb44      	cbnz	r4, 8008e08 <_malloc_r+0x88>
 8008db6:	4629      	mov	r1, r5
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7ff ffbf 	bl	8008d3c <sbrk_aligned>
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	d158      	bne.n	8008e76 <_malloc_r+0xf6>
 8008dc4:	f8d8 4000 	ldr.w	r4, [r8]
 8008dc8:	4627      	mov	r7, r4
 8008dca:	2f00      	cmp	r7, #0
 8008dcc:	d143      	bne.n	8008e56 <_malloc_r+0xd6>
 8008dce:	2c00      	cmp	r4, #0
 8008dd0:	d04b      	beq.n	8008e6a <_malloc_r+0xea>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	eb04 0903 	add.w	r9, r4, r3
 8008ddc:	f000 fdf4 	bl	80099c8 <_sbrk_r>
 8008de0:	4581      	cmp	r9, r0
 8008de2:	d142      	bne.n	8008e6a <_malloc_r+0xea>
 8008de4:	6821      	ldr	r1, [r4, #0]
 8008de6:	1a6d      	subs	r5, r5, r1
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff ffa6 	bl	8008d3c <sbrk_aligned>
 8008df0:	3001      	adds	r0, #1
 8008df2:	d03a      	beq.n	8008e6a <_malloc_r+0xea>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	442b      	add	r3, r5
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	bb62      	cbnz	r2, 8008e5c <_malloc_r+0xdc>
 8008e02:	f8c8 7000 	str.w	r7, [r8]
 8008e06:	e00f      	b.n	8008e28 <_malloc_r+0xa8>
 8008e08:	6822      	ldr	r2, [r4, #0]
 8008e0a:	1b52      	subs	r2, r2, r5
 8008e0c:	d420      	bmi.n	8008e50 <_malloc_r+0xd0>
 8008e0e:	2a0b      	cmp	r2, #11
 8008e10:	d917      	bls.n	8008e42 <_malloc_r+0xc2>
 8008e12:	1961      	adds	r1, r4, r5
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	6025      	str	r5, [r4, #0]
 8008e18:	bf18      	it	ne
 8008e1a:	6059      	strne	r1, [r3, #4]
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	bf08      	it	eq
 8008e20:	f8c8 1000 	streq.w	r1, [r8]
 8008e24:	5162      	str	r2, [r4, r5]
 8008e26:	604b      	str	r3, [r1, #4]
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f000 f82f 	bl	8008e8c <__malloc_unlock>
 8008e2e:	f104 000b 	add.w	r0, r4, #11
 8008e32:	1d23      	adds	r3, r4, #4
 8008e34:	f020 0007 	bic.w	r0, r0, #7
 8008e38:	1ac2      	subs	r2, r0, r3
 8008e3a:	bf1c      	itt	ne
 8008e3c:	1a1b      	subne	r3, r3, r0
 8008e3e:	50a3      	strne	r3, [r4, r2]
 8008e40:	e7af      	b.n	8008da2 <_malloc_r+0x22>
 8008e42:	6862      	ldr	r2, [r4, #4]
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	bf0c      	ite	eq
 8008e48:	f8c8 2000 	streq.w	r2, [r8]
 8008e4c:	605a      	strne	r2, [r3, #4]
 8008e4e:	e7eb      	b.n	8008e28 <_malloc_r+0xa8>
 8008e50:	4623      	mov	r3, r4
 8008e52:	6864      	ldr	r4, [r4, #4]
 8008e54:	e7ae      	b.n	8008db4 <_malloc_r+0x34>
 8008e56:	463c      	mov	r4, r7
 8008e58:	687f      	ldr	r7, [r7, #4]
 8008e5a:	e7b6      	b.n	8008dca <_malloc_r+0x4a>
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d1fb      	bne.n	8008e5c <_malloc_r+0xdc>
 8008e64:	2300      	movs	r3, #0
 8008e66:	6053      	str	r3, [r2, #4]
 8008e68:	e7de      	b.n	8008e28 <_malloc_r+0xa8>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f000 f80c 	bl	8008e8c <__malloc_unlock>
 8008e74:	e794      	b.n	8008da0 <_malloc_r+0x20>
 8008e76:	6005      	str	r5, [r0, #0]
 8008e78:	e7d6      	b.n	8008e28 <_malloc_r+0xa8>
 8008e7a:	bf00      	nop
 8008e7c:	20004f7c 	.word	0x20004f7c

08008e80 <__malloc_lock>:
 8008e80:	4801      	ldr	r0, [pc, #4]	@ (8008e88 <__malloc_lock+0x8>)
 8008e82:	f7ff b89e 	b.w	8007fc2 <__retarget_lock_acquire_recursive>
 8008e86:	bf00      	nop
 8008e88:	20004f74 	.word	0x20004f74

08008e8c <__malloc_unlock>:
 8008e8c:	4801      	ldr	r0, [pc, #4]	@ (8008e94 <__malloc_unlock+0x8>)
 8008e8e:	f7ff b899 	b.w	8007fc4 <__retarget_lock_release_recursive>
 8008e92:	bf00      	nop
 8008e94:	20004f74 	.word	0x20004f74

08008e98 <_Balloc>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	69c6      	ldr	r6, [r0, #28]
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	b976      	cbnz	r6, 8008ec0 <_Balloc+0x28>
 8008ea2:	2010      	movs	r0, #16
 8008ea4:	f7ff ff42 	bl	8008d2c <malloc>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	61e0      	str	r0, [r4, #28]
 8008eac:	b920      	cbnz	r0, 8008eb8 <_Balloc+0x20>
 8008eae:	4b18      	ldr	r3, [pc, #96]	@ (8008f10 <_Balloc+0x78>)
 8008eb0:	4818      	ldr	r0, [pc, #96]	@ (8008f14 <_Balloc+0x7c>)
 8008eb2:	216b      	movs	r1, #107	@ 0x6b
 8008eb4:	f000 fd98 	bl	80099e8 <__assert_func>
 8008eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ebc:	6006      	str	r6, [r0, #0]
 8008ebe:	60c6      	str	r6, [r0, #12]
 8008ec0:	69e6      	ldr	r6, [r4, #28]
 8008ec2:	68f3      	ldr	r3, [r6, #12]
 8008ec4:	b183      	cbz	r3, 8008ee8 <_Balloc+0x50>
 8008ec6:	69e3      	ldr	r3, [r4, #28]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ece:	b9b8      	cbnz	r0, 8008f00 <_Balloc+0x68>
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ed6:	1d72      	adds	r2, r6, #5
 8008ed8:	0092      	lsls	r2, r2, #2
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 fda2 	bl	8009a24 <_calloc_r>
 8008ee0:	b160      	cbz	r0, 8008efc <_Balloc+0x64>
 8008ee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ee6:	e00e      	b.n	8008f06 <_Balloc+0x6e>
 8008ee8:	2221      	movs	r2, #33	@ 0x21
 8008eea:	2104      	movs	r1, #4
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 fd99 	bl	8009a24 <_calloc_r>
 8008ef2:	69e3      	ldr	r3, [r4, #28]
 8008ef4:	60f0      	str	r0, [r6, #12]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e4      	bne.n	8008ec6 <_Balloc+0x2e>
 8008efc:	2000      	movs	r0, #0
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	6802      	ldr	r2, [r0, #0]
 8008f02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f06:	2300      	movs	r3, #0
 8008f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f0c:	e7f7      	b.n	8008efe <_Balloc+0x66>
 8008f0e:	bf00      	nop
 8008f10:	0800a225 	.word	0x0800a225
 8008f14:	0800a2a5 	.word	0x0800a2a5

08008f18 <_Bfree>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	69c6      	ldr	r6, [r0, #28]
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	b976      	cbnz	r6, 8008f40 <_Bfree+0x28>
 8008f22:	2010      	movs	r0, #16
 8008f24:	f7ff ff02 	bl	8008d2c <malloc>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	61e8      	str	r0, [r5, #28]
 8008f2c:	b920      	cbnz	r0, 8008f38 <_Bfree+0x20>
 8008f2e:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <_Bfree+0x3c>)
 8008f30:	4809      	ldr	r0, [pc, #36]	@ (8008f58 <_Bfree+0x40>)
 8008f32:	218f      	movs	r1, #143	@ 0x8f
 8008f34:	f000 fd58 	bl	80099e8 <__assert_func>
 8008f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f3c:	6006      	str	r6, [r0, #0]
 8008f3e:	60c6      	str	r6, [r0, #12]
 8008f40:	b13c      	cbz	r4, 8008f52 <_Bfree+0x3a>
 8008f42:	69eb      	ldr	r3, [r5, #28]
 8008f44:	6862      	ldr	r2, [r4, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f4c:	6021      	str	r1, [r4, #0]
 8008f4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	0800a225 	.word	0x0800a225
 8008f58:	0800a2a5 	.word	0x0800a2a5

08008f5c <__multadd>:
 8008f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f60:	690d      	ldr	r5, [r1, #16]
 8008f62:	4607      	mov	r7, r0
 8008f64:	460c      	mov	r4, r1
 8008f66:	461e      	mov	r6, r3
 8008f68:	f101 0c14 	add.w	ip, r1, #20
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f72:	b299      	uxth	r1, r3
 8008f74:	fb02 6101 	mla	r1, r2, r1, r6
 8008f78:	0c1e      	lsrs	r6, r3, #16
 8008f7a:	0c0b      	lsrs	r3, r1, #16
 8008f7c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f80:	b289      	uxth	r1, r1
 8008f82:	3001      	adds	r0, #1
 8008f84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f88:	4285      	cmp	r5, r0
 8008f8a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f92:	dcec      	bgt.n	8008f6e <__multadd+0x12>
 8008f94:	b30e      	cbz	r6, 8008fda <__multadd+0x7e>
 8008f96:	68a3      	ldr	r3, [r4, #8]
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	dc19      	bgt.n	8008fd0 <__multadd+0x74>
 8008f9c:	6861      	ldr	r1, [r4, #4]
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	3101      	adds	r1, #1
 8008fa2:	f7ff ff79 	bl	8008e98 <_Balloc>
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	b928      	cbnz	r0, 8008fb6 <__multadd+0x5a>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe0 <__multadd+0x84>)
 8008fae:	480d      	ldr	r0, [pc, #52]	@ (8008fe4 <__multadd+0x88>)
 8008fb0:	21ba      	movs	r1, #186	@ 0xba
 8008fb2:	f000 fd19 	bl	80099e8 <__assert_func>
 8008fb6:	6922      	ldr	r2, [r4, #16]
 8008fb8:	3202      	adds	r2, #2
 8008fba:	f104 010c 	add.w	r1, r4, #12
 8008fbe:	0092      	lsls	r2, r2, #2
 8008fc0:	300c      	adds	r0, #12
 8008fc2:	f7ff f800 	bl	8007fc6 <memcpy>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ffa5 	bl	8008f18 <_Bfree>
 8008fce:	4644      	mov	r4, r8
 8008fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	615e      	str	r6, [r3, #20]
 8008fd8:	6125      	str	r5, [r4, #16]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe0:	0800a294 	.word	0x0800a294
 8008fe4:	0800a2a5 	.word	0x0800a2a5

08008fe8 <__hi0bits>:
 8008fe8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008fec:	4603      	mov	r3, r0
 8008fee:	bf36      	itet	cc
 8008ff0:	0403      	lslcc	r3, r0, #16
 8008ff2:	2000      	movcs	r0, #0
 8008ff4:	2010      	movcc	r0, #16
 8008ff6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ffa:	bf3c      	itt	cc
 8008ffc:	021b      	lslcc	r3, r3, #8
 8008ffe:	3008      	addcc	r0, #8
 8009000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009004:	bf3c      	itt	cc
 8009006:	011b      	lslcc	r3, r3, #4
 8009008:	3004      	addcc	r0, #4
 800900a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900e:	bf3c      	itt	cc
 8009010:	009b      	lslcc	r3, r3, #2
 8009012:	3002      	addcc	r0, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	db05      	blt.n	8009024 <__hi0bits+0x3c>
 8009018:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800901c:	f100 0001 	add.w	r0, r0, #1
 8009020:	bf08      	it	eq
 8009022:	2020      	moveq	r0, #32
 8009024:	4770      	bx	lr

08009026 <__lo0bits>:
 8009026:	6803      	ldr	r3, [r0, #0]
 8009028:	4602      	mov	r2, r0
 800902a:	f013 0007 	ands.w	r0, r3, #7
 800902e:	d00b      	beq.n	8009048 <__lo0bits+0x22>
 8009030:	07d9      	lsls	r1, r3, #31
 8009032:	d421      	bmi.n	8009078 <__lo0bits+0x52>
 8009034:	0798      	lsls	r0, r3, #30
 8009036:	bf49      	itett	mi
 8009038:	085b      	lsrmi	r3, r3, #1
 800903a:	089b      	lsrpl	r3, r3, #2
 800903c:	2001      	movmi	r0, #1
 800903e:	6013      	strmi	r3, [r2, #0]
 8009040:	bf5c      	itt	pl
 8009042:	6013      	strpl	r3, [r2, #0]
 8009044:	2002      	movpl	r0, #2
 8009046:	4770      	bx	lr
 8009048:	b299      	uxth	r1, r3
 800904a:	b909      	cbnz	r1, 8009050 <__lo0bits+0x2a>
 800904c:	0c1b      	lsrs	r3, r3, #16
 800904e:	2010      	movs	r0, #16
 8009050:	b2d9      	uxtb	r1, r3
 8009052:	b909      	cbnz	r1, 8009058 <__lo0bits+0x32>
 8009054:	3008      	adds	r0, #8
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	0719      	lsls	r1, r3, #28
 800905a:	bf04      	itt	eq
 800905c:	091b      	lsreq	r3, r3, #4
 800905e:	3004      	addeq	r0, #4
 8009060:	0799      	lsls	r1, r3, #30
 8009062:	bf04      	itt	eq
 8009064:	089b      	lsreq	r3, r3, #2
 8009066:	3002      	addeq	r0, #2
 8009068:	07d9      	lsls	r1, r3, #31
 800906a:	d403      	bmi.n	8009074 <__lo0bits+0x4e>
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	f100 0001 	add.w	r0, r0, #1
 8009072:	d003      	beq.n	800907c <__lo0bits+0x56>
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	4770      	bx	lr
 8009078:	2000      	movs	r0, #0
 800907a:	4770      	bx	lr
 800907c:	2020      	movs	r0, #32
 800907e:	4770      	bx	lr

08009080 <__i2b>:
 8009080:	b510      	push	{r4, lr}
 8009082:	460c      	mov	r4, r1
 8009084:	2101      	movs	r1, #1
 8009086:	f7ff ff07 	bl	8008e98 <_Balloc>
 800908a:	4602      	mov	r2, r0
 800908c:	b928      	cbnz	r0, 800909a <__i2b+0x1a>
 800908e:	4b05      	ldr	r3, [pc, #20]	@ (80090a4 <__i2b+0x24>)
 8009090:	4805      	ldr	r0, [pc, #20]	@ (80090a8 <__i2b+0x28>)
 8009092:	f240 1145 	movw	r1, #325	@ 0x145
 8009096:	f000 fca7 	bl	80099e8 <__assert_func>
 800909a:	2301      	movs	r3, #1
 800909c:	6144      	str	r4, [r0, #20]
 800909e:	6103      	str	r3, [r0, #16]
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	bf00      	nop
 80090a4:	0800a294 	.word	0x0800a294
 80090a8:	0800a2a5 	.word	0x0800a2a5

080090ac <__multiply>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	4617      	mov	r7, r2
 80090b2:	690a      	ldr	r2, [r1, #16]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	bfa8      	it	ge
 80090ba:	463b      	movge	r3, r7
 80090bc:	4689      	mov	r9, r1
 80090be:	bfa4      	itt	ge
 80090c0:	460f      	movge	r7, r1
 80090c2:	4699      	movge	r9, r3
 80090c4:	693d      	ldr	r5, [r7, #16]
 80090c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	eb05 060a 	add.w	r6, r5, sl
 80090d2:	42b3      	cmp	r3, r6
 80090d4:	b085      	sub	sp, #20
 80090d6:	bfb8      	it	lt
 80090d8:	3101      	addlt	r1, #1
 80090da:	f7ff fedd 	bl	8008e98 <_Balloc>
 80090de:	b930      	cbnz	r0, 80090ee <__multiply+0x42>
 80090e0:	4602      	mov	r2, r0
 80090e2:	4b41      	ldr	r3, [pc, #260]	@ (80091e8 <__multiply+0x13c>)
 80090e4:	4841      	ldr	r0, [pc, #260]	@ (80091ec <__multiply+0x140>)
 80090e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090ea:	f000 fc7d 	bl	80099e8 <__assert_func>
 80090ee:	f100 0414 	add.w	r4, r0, #20
 80090f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80090f6:	4623      	mov	r3, r4
 80090f8:	2200      	movs	r2, #0
 80090fa:	4573      	cmp	r3, lr
 80090fc:	d320      	bcc.n	8009140 <__multiply+0x94>
 80090fe:	f107 0814 	add.w	r8, r7, #20
 8009102:	f109 0114 	add.w	r1, r9, #20
 8009106:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800910a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800910e:	9302      	str	r3, [sp, #8]
 8009110:	1beb      	subs	r3, r5, r7
 8009112:	3b15      	subs	r3, #21
 8009114:	f023 0303 	bic.w	r3, r3, #3
 8009118:	3304      	adds	r3, #4
 800911a:	3715      	adds	r7, #21
 800911c:	42bd      	cmp	r5, r7
 800911e:	bf38      	it	cc
 8009120:	2304      	movcc	r3, #4
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	9b02      	ldr	r3, [sp, #8]
 8009126:	9103      	str	r1, [sp, #12]
 8009128:	428b      	cmp	r3, r1
 800912a:	d80c      	bhi.n	8009146 <__multiply+0x9a>
 800912c:	2e00      	cmp	r6, #0
 800912e:	dd03      	ble.n	8009138 <__multiply+0x8c>
 8009130:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009134:	2b00      	cmp	r3, #0
 8009136:	d055      	beq.n	80091e4 <__multiply+0x138>
 8009138:	6106      	str	r6, [r0, #16]
 800913a:	b005      	add	sp, #20
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	f843 2b04 	str.w	r2, [r3], #4
 8009144:	e7d9      	b.n	80090fa <__multiply+0x4e>
 8009146:	f8b1 a000 	ldrh.w	sl, [r1]
 800914a:	f1ba 0f00 	cmp.w	sl, #0
 800914e:	d01f      	beq.n	8009190 <__multiply+0xe4>
 8009150:	46c4      	mov	ip, r8
 8009152:	46a1      	mov	r9, r4
 8009154:	2700      	movs	r7, #0
 8009156:	f85c 2b04 	ldr.w	r2, [ip], #4
 800915a:	f8d9 3000 	ldr.w	r3, [r9]
 800915e:	fa1f fb82 	uxth.w	fp, r2
 8009162:	b29b      	uxth	r3, r3
 8009164:	fb0a 330b 	mla	r3, sl, fp, r3
 8009168:	443b      	add	r3, r7
 800916a:	f8d9 7000 	ldr.w	r7, [r9]
 800916e:	0c12      	lsrs	r2, r2, #16
 8009170:	0c3f      	lsrs	r7, r7, #16
 8009172:	fb0a 7202 	mla	r2, sl, r2, r7
 8009176:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800917a:	b29b      	uxth	r3, r3
 800917c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009180:	4565      	cmp	r5, ip
 8009182:	f849 3b04 	str.w	r3, [r9], #4
 8009186:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800918a:	d8e4      	bhi.n	8009156 <__multiply+0xaa>
 800918c:	9b01      	ldr	r3, [sp, #4]
 800918e:	50e7      	str	r7, [r4, r3]
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009196:	3104      	adds	r1, #4
 8009198:	f1b9 0f00 	cmp.w	r9, #0
 800919c:	d020      	beq.n	80091e0 <__multiply+0x134>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	4647      	mov	r7, r8
 80091a2:	46a4      	mov	ip, r4
 80091a4:	f04f 0a00 	mov.w	sl, #0
 80091a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80091ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80091b0:	fb09 220b 	mla	r2, r9, fp, r2
 80091b4:	4452      	add	r2, sl
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091bc:	f84c 3b04 	str.w	r3, [ip], #4
 80091c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80091c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80091cc:	fb09 330a 	mla	r3, r9, sl, r3
 80091d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80091d4:	42bd      	cmp	r5, r7
 80091d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091da:	d8e5      	bhi.n	80091a8 <__multiply+0xfc>
 80091dc:	9a01      	ldr	r2, [sp, #4]
 80091de:	50a3      	str	r3, [r4, r2]
 80091e0:	3404      	adds	r4, #4
 80091e2:	e79f      	b.n	8009124 <__multiply+0x78>
 80091e4:	3e01      	subs	r6, #1
 80091e6:	e7a1      	b.n	800912c <__multiply+0x80>
 80091e8:	0800a294 	.word	0x0800a294
 80091ec:	0800a2a5 	.word	0x0800a2a5

080091f0 <__pow5mult>:
 80091f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f4:	4615      	mov	r5, r2
 80091f6:	f012 0203 	ands.w	r2, r2, #3
 80091fa:	4607      	mov	r7, r0
 80091fc:	460e      	mov	r6, r1
 80091fe:	d007      	beq.n	8009210 <__pow5mult+0x20>
 8009200:	4c25      	ldr	r4, [pc, #148]	@ (8009298 <__pow5mult+0xa8>)
 8009202:	3a01      	subs	r2, #1
 8009204:	2300      	movs	r3, #0
 8009206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800920a:	f7ff fea7 	bl	8008f5c <__multadd>
 800920e:	4606      	mov	r6, r0
 8009210:	10ad      	asrs	r5, r5, #2
 8009212:	d03d      	beq.n	8009290 <__pow5mult+0xa0>
 8009214:	69fc      	ldr	r4, [r7, #28]
 8009216:	b97c      	cbnz	r4, 8009238 <__pow5mult+0x48>
 8009218:	2010      	movs	r0, #16
 800921a:	f7ff fd87 	bl	8008d2c <malloc>
 800921e:	4602      	mov	r2, r0
 8009220:	61f8      	str	r0, [r7, #28]
 8009222:	b928      	cbnz	r0, 8009230 <__pow5mult+0x40>
 8009224:	4b1d      	ldr	r3, [pc, #116]	@ (800929c <__pow5mult+0xac>)
 8009226:	481e      	ldr	r0, [pc, #120]	@ (80092a0 <__pow5mult+0xb0>)
 8009228:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800922c:	f000 fbdc 	bl	80099e8 <__assert_func>
 8009230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009234:	6004      	str	r4, [r0, #0]
 8009236:	60c4      	str	r4, [r0, #12]
 8009238:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800923c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009240:	b94c      	cbnz	r4, 8009256 <__pow5mult+0x66>
 8009242:	f240 2171 	movw	r1, #625	@ 0x271
 8009246:	4638      	mov	r0, r7
 8009248:	f7ff ff1a 	bl	8009080 <__i2b>
 800924c:	2300      	movs	r3, #0
 800924e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009252:	4604      	mov	r4, r0
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	f04f 0900 	mov.w	r9, #0
 800925a:	07eb      	lsls	r3, r5, #31
 800925c:	d50a      	bpl.n	8009274 <__pow5mult+0x84>
 800925e:	4631      	mov	r1, r6
 8009260:	4622      	mov	r2, r4
 8009262:	4638      	mov	r0, r7
 8009264:	f7ff ff22 	bl	80090ac <__multiply>
 8009268:	4631      	mov	r1, r6
 800926a:	4680      	mov	r8, r0
 800926c:	4638      	mov	r0, r7
 800926e:	f7ff fe53 	bl	8008f18 <_Bfree>
 8009272:	4646      	mov	r6, r8
 8009274:	106d      	asrs	r5, r5, #1
 8009276:	d00b      	beq.n	8009290 <__pow5mult+0xa0>
 8009278:	6820      	ldr	r0, [r4, #0]
 800927a:	b938      	cbnz	r0, 800928c <__pow5mult+0x9c>
 800927c:	4622      	mov	r2, r4
 800927e:	4621      	mov	r1, r4
 8009280:	4638      	mov	r0, r7
 8009282:	f7ff ff13 	bl	80090ac <__multiply>
 8009286:	6020      	str	r0, [r4, #0]
 8009288:	f8c0 9000 	str.w	r9, [r0]
 800928c:	4604      	mov	r4, r0
 800928e:	e7e4      	b.n	800925a <__pow5mult+0x6a>
 8009290:	4630      	mov	r0, r6
 8009292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009296:	bf00      	nop
 8009298:	0800a358 	.word	0x0800a358
 800929c:	0800a225 	.word	0x0800a225
 80092a0:	0800a2a5 	.word	0x0800a2a5

080092a4 <__lshift>:
 80092a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	460c      	mov	r4, r1
 80092aa:	6849      	ldr	r1, [r1, #4]
 80092ac:	6923      	ldr	r3, [r4, #16]
 80092ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092b2:	68a3      	ldr	r3, [r4, #8]
 80092b4:	4607      	mov	r7, r0
 80092b6:	4691      	mov	r9, r2
 80092b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092bc:	f108 0601 	add.w	r6, r8, #1
 80092c0:	42b3      	cmp	r3, r6
 80092c2:	db0b      	blt.n	80092dc <__lshift+0x38>
 80092c4:	4638      	mov	r0, r7
 80092c6:	f7ff fde7 	bl	8008e98 <_Balloc>
 80092ca:	4605      	mov	r5, r0
 80092cc:	b948      	cbnz	r0, 80092e2 <__lshift+0x3e>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b28      	ldr	r3, [pc, #160]	@ (8009374 <__lshift+0xd0>)
 80092d2:	4829      	ldr	r0, [pc, #164]	@ (8009378 <__lshift+0xd4>)
 80092d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092d8:	f000 fb86 	bl	80099e8 <__assert_func>
 80092dc:	3101      	adds	r1, #1
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	e7ee      	b.n	80092c0 <__lshift+0x1c>
 80092e2:	2300      	movs	r3, #0
 80092e4:	f100 0114 	add.w	r1, r0, #20
 80092e8:	f100 0210 	add.w	r2, r0, #16
 80092ec:	4618      	mov	r0, r3
 80092ee:	4553      	cmp	r3, sl
 80092f0:	db33      	blt.n	800935a <__lshift+0xb6>
 80092f2:	6920      	ldr	r0, [r4, #16]
 80092f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092f8:	f104 0314 	add.w	r3, r4, #20
 80092fc:	f019 091f 	ands.w	r9, r9, #31
 8009300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009308:	d02b      	beq.n	8009362 <__lshift+0xbe>
 800930a:	f1c9 0e20 	rsb	lr, r9, #32
 800930e:	468a      	mov	sl, r1
 8009310:	2200      	movs	r2, #0
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	fa00 f009 	lsl.w	r0, r0, r9
 8009318:	4310      	orrs	r0, r2
 800931a:	f84a 0b04 	str.w	r0, [sl], #4
 800931e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009322:	459c      	cmp	ip, r3
 8009324:	fa22 f20e 	lsr.w	r2, r2, lr
 8009328:	d8f3      	bhi.n	8009312 <__lshift+0x6e>
 800932a:	ebac 0304 	sub.w	r3, ip, r4
 800932e:	3b15      	subs	r3, #21
 8009330:	f023 0303 	bic.w	r3, r3, #3
 8009334:	3304      	adds	r3, #4
 8009336:	f104 0015 	add.w	r0, r4, #21
 800933a:	4560      	cmp	r0, ip
 800933c:	bf88      	it	hi
 800933e:	2304      	movhi	r3, #4
 8009340:	50ca      	str	r2, [r1, r3]
 8009342:	b10a      	cbz	r2, 8009348 <__lshift+0xa4>
 8009344:	f108 0602 	add.w	r6, r8, #2
 8009348:	3e01      	subs	r6, #1
 800934a:	4638      	mov	r0, r7
 800934c:	612e      	str	r6, [r5, #16]
 800934e:	4621      	mov	r1, r4
 8009350:	f7ff fde2 	bl	8008f18 <_Bfree>
 8009354:	4628      	mov	r0, r5
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	f842 0f04 	str.w	r0, [r2, #4]!
 800935e:	3301      	adds	r3, #1
 8009360:	e7c5      	b.n	80092ee <__lshift+0x4a>
 8009362:	3904      	subs	r1, #4
 8009364:	f853 2b04 	ldr.w	r2, [r3], #4
 8009368:	f841 2f04 	str.w	r2, [r1, #4]!
 800936c:	459c      	cmp	ip, r3
 800936e:	d8f9      	bhi.n	8009364 <__lshift+0xc0>
 8009370:	e7ea      	b.n	8009348 <__lshift+0xa4>
 8009372:	bf00      	nop
 8009374:	0800a294 	.word	0x0800a294
 8009378:	0800a2a5 	.word	0x0800a2a5

0800937c <__mcmp>:
 800937c:	690a      	ldr	r2, [r1, #16]
 800937e:	4603      	mov	r3, r0
 8009380:	6900      	ldr	r0, [r0, #16]
 8009382:	1a80      	subs	r0, r0, r2
 8009384:	b530      	push	{r4, r5, lr}
 8009386:	d10e      	bne.n	80093a6 <__mcmp+0x2a>
 8009388:	3314      	adds	r3, #20
 800938a:	3114      	adds	r1, #20
 800938c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009390:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009394:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009398:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800939c:	4295      	cmp	r5, r2
 800939e:	d003      	beq.n	80093a8 <__mcmp+0x2c>
 80093a0:	d205      	bcs.n	80093ae <__mcmp+0x32>
 80093a2:	f04f 30ff 	mov.w	r0, #4294967295
 80093a6:	bd30      	pop	{r4, r5, pc}
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d3f3      	bcc.n	8009394 <__mcmp+0x18>
 80093ac:	e7fb      	b.n	80093a6 <__mcmp+0x2a>
 80093ae:	2001      	movs	r0, #1
 80093b0:	e7f9      	b.n	80093a6 <__mcmp+0x2a>
	...

080093b4 <__mdiff>:
 80093b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	4689      	mov	r9, r1
 80093ba:	4606      	mov	r6, r0
 80093bc:	4611      	mov	r1, r2
 80093be:	4648      	mov	r0, r9
 80093c0:	4614      	mov	r4, r2
 80093c2:	f7ff ffdb 	bl	800937c <__mcmp>
 80093c6:	1e05      	subs	r5, r0, #0
 80093c8:	d112      	bne.n	80093f0 <__mdiff+0x3c>
 80093ca:	4629      	mov	r1, r5
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7ff fd63 	bl	8008e98 <_Balloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	b928      	cbnz	r0, 80093e2 <__mdiff+0x2e>
 80093d6:	4b3f      	ldr	r3, [pc, #252]	@ (80094d4 <__mdiff+0x120>)
 80093d8:	f240 2137 	movw	r1, #567	@ 0x237
 80093dc:	483e      	ldr	r0, [pc, #248]	@ (80094d8 <__mdiff+0x124>)
 80093de:	f000 fb03 	bl	80099e8 <__assert_func>
 80093e2:	2301      	movs	r3, #1
 80093e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093e8:	4610      	mov	r0, r2
 80093ea:	b003      	add	sp, #12
 80093ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	bfbc      	itt	lt
 80093f2:	464b      	movlt	r3, r9
 80093f4:	46a1      	movlt	r9, r4
 80093f6:	4630      	mov	r0, r6
 80093f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093fc:	bfba      	itte	lt
 80093fe:	461c      	movlt	r4, r3
 8009400:	2501      	movlt	r5, #1
 8009402:	2500      	movge	r5, #0
 8009404:	f7ff fd48 	bl	8008e98 <_Balloc>
 8009408:	4602      	mov	r2, r0
 800940a:	b918      	cbnz	r0, 8009414 <__mdiff+0x60>
 800940c:	4b31      	ldr	r3, [pc, #196]	@ (80094d4 <__mdiff+0x120>)
 800940e:	f240 2145 	movw	r1, #581	@ 0x245
 8009412:	e7e3      	b.n	80093dc <__mdiff+0x28>
 8009414:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009418:	6926      	ldr	r6, [r4, #16]
 800941a:	60c5      	str	r5, [r0, #12]
 800941c:	f109 0310 	add.w	r3, r9, #16
 8009420:	f109 0514 	add.w	r5, r9, #20
 8009424:	f104 0e14 	add.w	lr, r4, #20
 8009428:	f100 0b14 	add.w	fp, r0, #20
 800942c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009430:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	46d9      	mov	r9, fp
 8009438:	f04f 0c00 	mov.w	ip, #0
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009442:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009446:	9301      	str	r3, [sp, #4]
 8009448:	fa1f f38a 	uxth.w	r3, sl
 800944c:	4619      	mov	r1, r3
 800944e:	b283      	uxth	r3, r0
 8009450:	1acb      	subs	r3, r1, r3
 8009452:	0c00      	lsrs	r0, r0, #16
 8009454:	4463      	add	r3, ip
 8009456:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800945a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800945e:	b29b      	uxth	r3, r3
 8009460:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009464:	4576      	cmp	r6, lr
 8009466:	f849 3b04 	str.w	r3, [r9], #4
 800946a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800946e:	d8e5      	bhi.n	800943c <__mdiff+0x88>
 8009470:	1b33      	subs	r3, r6, r4
 8009472:	3b15      	subs	r3, #21
 8009474:	f023 0303 	bic.w	r3, r3, #3
 8009478:	3415      	adds	r4, #21
 800947a:	3304      	adds	r3, #4
 800947c:	42a6      	cmp	r6, r4
 800947e:	bf38      	it	cc
 8009480:	2304      	movcc	r3, #4
 8009482:	441d      	add	r5, r3
 8009484:	445b      	add	r3, fp
 8009486:	461e      	mov	r6, r3
 8009488:	462c      	mov	r4, r5
 800948a:	4544      	cmp	r4, r8
 800948c:	d30e      	bcc.n	80094ac <__mdiff+0xf8>
 800948e:	f108 0103 	add.w	r1, r8, #3
 8009492:	1b49      	subs	r1, r1, r5
 8009494:	f021 0103 	bic.w	r1, r1, #3
 8009498:	3d03      	subs	r5, #3
 800949a:	45a8      	cmp	r8, r5
 800949c:	bf38      	it	cc
 800949e:	2100      	movcc	r1, #0
 80094a0:	440b      	add	r3, r1
 80094a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094a6:	b191      	cbz	r1, 80094ce <__mdiff+0x11a>
 80094a8:	6117      	str	r7, [r2, #16]
 80094aa:	e79d      	b.n	80093e8 <__mdiff+0x34>
 80094ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80094b0:	46e6      	mov	lr, ip
 80094b2:	0c08      	lsrs	r0, r1, #16
 80094b4:	fa1c fc81 	uxtah	ip, ip, r1
 80094b8:	4471      	add	r1, lr
 80094ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094be:	b289      	uxth	r1, r1
 80094c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094c4:	f846 1b04 	str.w	r1, [r6], #4
 80094c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094cc:	e7dd      	b.n	800948a <__mdiff+0xd6>
 80094ce:	3f01      	subs	r7, #1
 80094d0:	e7e7      	b.n	80094a2 <__mdiff+0xee>
 80094d2:	bf00      	nop
 80094d4:	0800a294 	.word	0x0800a294
 80094d8:	0800a2a5 	.word	0x0800a2a5

080094dc <__d2b>:
 80094dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094e0:	460f      	mov	r7, r1
 80094e2:	2101      	movs	r1, #1
 80094e4:	ec59 8b10 	vmov	r8, r9, d0
 80094e8:	4616      	mov	r6, r2
 80094ea:	f7ff fcd5 	bl	8008e98 <_Balloc>
 80094ee:	4604      	mov	r4, r0
 80094f0:	b930      	cbnz	r0, 8009500 <__d2b+0x24>
 80094f2:	4602      	mov	r2, r0
 80094f4:	4b23      	ldr	r3, [pc, #140]	@ (8009584 <__d2b+0xa8>)
 80094f6:	4824      	ldr	r0, [pc, #144]	@ (8009588 <__d2b+0xac>)
 80094f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80094fc:	f000 fa74 	bl	80099e8 <__assert_func>
 8009500:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009504:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009508:	b10d      	cbz	r5, 800950e <__d2b+0x32>
 800950a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	f1b8 0300 	subs.w	r3, r8, #0
 8009514:	d023      	beq.n	800955e <__d2b+0x82>
 8009516:	4668      	mov	r0, sp
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	f7ff fd84 	bl	8009026 <__lo0bits>
 800951e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009522:	b1d0      	cbz	r0, 800955a <__d2b+0x7e>
 8009524:	f1c0 0320 	rsb	r3, r0, #32
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	430b      	orrs	r3, r1
 800952e:	40c2      	lsrs	r2, r0
 8009530:	6163      	str	r3, [r4, #20]
 8009532:	9201      	str	r2, [sp, #4]
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	61a3      	str	r3, [r4, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	bf0c      	ite	eq
 800953c:	2201      	moveq	r2, #1
 800953e:	2202      	movne	r2, #2
 8009540:	6122      	str	r2, [r4, #16]
 8009542:	b1a5      	cbz	r5, 800956e <__d2b+0x92>
 8009544:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009548:	4405      	add	r5, r0
 800954a:	603d      	str	r5, [r7, #0]
 800954c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009550:	6030      	str	r0, [r6, #0]
 8009552:	4620      	mov	r0, r4
 8009554:	b003      	add	sp, #12
 8009556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800955a:	6161      	str	r1, [r4, #20]
 800955c:	e7ea      	b.n	8009534 <__d2b+0x58>
 800955e:	a801      	add	r0, sp, #4
 8009560:	f7ff fd61 	bl	8009026 <__lo0bits>
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	6163      	str	r3, [r4, #20]
 8009568:	3020      	adds	r0, #32
 800956a:	2201      	movs	r2, #1
 800956c:	e7e8      	b.n	8009540 <__d2b+0x64>
 800956e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009572:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009576:	6038      	str	r0, [r7, #0]
 8009578:	6918      	ldr	r0, [r3, #16]
 800957a:	f7ff fd35 	bl	8008fe8 <__hi0bits>
 800957e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009582:	e7e5      	b.n	8009550 <__d2b+0x74>
 8009584:	0800a294 	.word	0x0800a294
 8009588:	0800a2a5 	.word	0x0800a2a5

0800958c <__ssputs_r>:
 800958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	688e      	ldr	r6, [r1, #8]
 8009592:	461f      	mov	r7, r3
 8009594:	42be      	cmp	r6, r7
 8009596:	680b      	ldr	r3, [r1, #0]
 8009598:	4682      	mov	sl, r0
 800959a:	460c      	mov	r4, r1
 800959c:	4690      	mov	r8, r2
 800959e:	d82d      	bhi.n	80095fc <__ssputs_r+0x70>
 80095a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095a8:	d026      	beq.n	80095f8 <__ssputs_r+0x6c>
 80095aa:	6965      	ldr	r5, [r4, #20]
 80095ac:	6909      	ldr	r1, [r1, #16]
 80095ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095b2:	eba3 0901 	sub.w	r9, r3, r1
 80095b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095ba:	1c7b      	adds	r3, r7, #1
 80095bc:	444b      	add	r3, r9
 80095be:	106d      	asrs	r5, r5, #1
 80095c0:	429d      	cmp	r5, r3
 80095c2:	bf38      	it	cc
 80095c4:	461d      	movcc	r5, r3
 80095c6:	0553      	lsls	r3, r2, #21
 80095c8:	d527      	bpl.n	800961a <__ssputs_r+0x8e>
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7ff fbd8 	bl	8008d80 <_malloc_r>
 80095d0:	4606      	mov	r6, r0
 80095d2:	b360      	cbz	r0, 800962e <__ssputs_r+0xa2>
 80095d4:	6921      	ldr	r1, [r4, #16]
 80095d6:	464a      	mov	r2, r9
 80095d8:	f7fe fcf5 	bl	8007fc6 <memcpy>
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e6:	81a3      	strh	r3, [r4, #12]
 80095e8:	6126      	str	r6, [r4, #16]
 80095ea:	6165      	str	r5, [r4, #20]
 80095ec:	444e      	add	r6, r9
 80095ee:	eba5 0509 	sub.w	r5, r5, r9
 80095f2:	6026      	str	r6, [r4, #0]
 80095f4:	60a5      	str	r5, [r4, #8]
 80095f6:	463e      	mov	r6, r7
 80095f8:	42be      	cmp	r6, r7
 80095fa:	d900      	bls.n	80095fe <__ssputs_r+0x72>
 80095fc:	463e      	mov	r6, r7
 80095fe:	6820      	ldr	r0, [r4, #0]
 8009600:	4632      	mov	r2, r6
 8009602:	4641      	mov	r1, r8
 8009604:	f000 f9c6 	bl	8009994 <memmove>
 8009608:	68a3      	ldr	r3, [r4, #8]
 800960a:	1b9b      	subs	r3, r3, r6
 800960c:	60a3      	str	r3, [r4, #8]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	4433      	add	r3, r6
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	2000      	movs	r0, #0
 8009616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961a:	462a      	mov	r2, r5
 800961c:	f000 fa28 	bl	8009a70 <_realloc_r>
 8009620:	4606      	mov	r6, r0
 8009622:	2800      	cmp	r0, #0
 8009624:	d1e0      	bne.n	80095e8 <__ssputs_r+0x5c>
 8009626:	6921      	ldr	r1, [r4, #16]
 8009628:	4650      	mov	r0, sl
 800962a:	f7ff fb35 	bl	8008c98 <_free_r>
 800962e:	230c      	movs	r3, #12
 8009630:	f8ca 3000 	str.w	r3, [sl]
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e7e9      	b.n	8009616 <__ssputs_r+0x8a>
	...

08009644 <_svfiprintf_r>:
 8009644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009648:	4698      	mov	r8, r3
 800964a:	898b      	ldrh	r3, [r1, #12]
 800964c:	061b      	lsls	r3, r3, #24
 800964e:	b09d      	sub	sp, #116	@ 0x74
 8009650:	4607      	mov	r7, r0
 8009652:	460d      	mov	r5, r1
 8009654:	4614      	mov	r4, r2
 8009656:	d510      	bpl.n	800967a <_svfiprintf_r+0x36>
 8009658:	690b      	ldr	r3, [r1, #16]
 800965a:	b973      	cbnz	r3, 800967a <_svfiprintf_r+0x36>
 800965c:	2140      	movs	r1, #64	@ 0x40
 800965e:	f7ff fb8f 	bl	8008d80 <_malloc_r>
 8009662:	6028      	str	r0, [r5, #0]
 8009664:	6128      	str	r0, [r5, #16]
 8009666:	b930      	cbnz	r0, 8009676 <_svfiprintf_r+0x32>
 8009668:	230c      	movs	r3, #12
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	b01d      	add	sp, #116	@ 0x74
 8009672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009676:	2340      	movs	r3, #64	@ 0x40
 8009678:	616b      	str	r3, [r5, #20]
 800967a:	2300      	movs	r3, #0
 800967c:	9309      	str	r3, [sp, #36]	@ 0x24
 800967e:	2320      	movs	r3, #32
 8009680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009684:	f8cd 800c 	str.w	r8, [sp, #12]
 8009688:	2330      	movs	r3, #48	@ 0x30
 800968a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009828 <_svfiprintf_r+0x1e4>
 800968e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009692:	f04f 0901 	mov.w	r9, #1
 8009696:	4623      	mov	r3, r4
 8009698:	469a      	mov	sl, r3
 800969a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800969e:	b10a      	cbz	r2, 80096a4 <_svfiprintf_r+0x60>
 80096a0:	2a25      	cmp	r2, #37	@ 0x25
 80096a2:	d1f9      	bne.n	8009698 <_svfiprintf_r+0x54>
 80096a4:	ebba 0b04 	subs.w	fp, sl, r4
 80096a8:	d00b      	beq.n	80096c2 <_svfiprintf_r+0x7e>
 80096aa:	465b      	mov	r3, fp
 80096ac:	4622      	mov	r2, r4
 80096ae:	4629      	mov	r1, r5
 80096b0:	4638      	mov	r0, r7
 80096b2:	f7ff ff6b 	bl	800958c <__ssputs_r>
 80096b6:	3001      	adds	r0, #1
 80096b8:	f000 80a7 	beq.w	800980a <_svfiprintf_r+0x1c6>
 80096bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096be:	445a      	add	r2, fp
 80096c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80096c2:	f89a 3000 	ldrb.w	r3, [sl]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 809f 	beq.w	800980a <_svfiprintf_r+0x1c6>
 80096cc:	2300      	movs	r3, #0
 80096ce:	f04f 32ff 	mov.w	r2, #4294967295
 80096d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d6:	f10a 0a01 	add.w	sl, sl, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	9307      	str	r3, [sp, #28]
 80096de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80096e4:	4654      	mov	r4, sl
 80096e6:	2205      	movs	r2, #5
 80096e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ec:	484e      	ldr	r0, [pc, #312]	@ (8009828 <_svfiprintf_r+0x1e4>)
 80096ee:	f7f6 fd8f 	bl	8000210 <memchr>
 80096f2:	9a04      	ldr	r2, [sp, #16]
 80096f4:	b9d8      	cbnz	r0, 800972e <_svfiprintf_r+0xea>
 80096f6:	06d0      	lsls	r0, r2, #27
 80096f8:	bf44      	itt	mi
 80096fa:	2320      	movmi	r3, #32
 80096fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009700:	0711      	lsls	r1, r2, #28
 8009702:	bf44      	itt	mi
 8009704:	232b      	movmi	r3, #43	@ 0x2b
 8009706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800970a:	f89a 3000 	ldrb.w	r3, [sl]
 800970e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009710:	d015      	beq.n	800973e <_svfiprintf_r+0xfa>
 8009712:	9a07      	ldr	r2, [sp, #28]
 8009714:	4654      	mov	r4, sl
 8009716:	2000      	movs	r0, #0
 8009718:	f04f 0c0a 	mov.w	ip, #10
 800971c:	4621      	mov	r1, r4
 800971e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009722:	3b30      	subs	r3, #48	@ 0x30
 8009724:	2b09      	cmp	r3, #9
 8009726:	d94b      	bls.n	80097c0 <_svfiprintf_r+0x17c>
 8009728:	b1b0      	cbz	r0, 8009758 <_svfiprintf_r+0x114>
 800972a:	9207      	str	r2, [sp, #28]
 800972c:	e014      	b.n	8009758 <_svfiprintf_r+0x114>
 800972e:	eba0 0308 	sub.w	r3, r0, r8
 8009732:	fa09 f303 	lsl.w	r3, r9, r3
 8009736:	4313      	orrs	r3, r2
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	46a2      	mov	sl, r4
 800973c:	e7d2      	b.n	80096e4 <_svfiprintf_r+0xa0>
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	1d19      	adds	r1, r3, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	9103      	str	r1, [sp, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	bfbb      	ittet	lt
 800974a:	425b      	neglt	r3, r3
 800974c:	f042 0202 	orrlt.w	r2, r2, #2
 8009750:	9307      	strge	r3, [sp, #28]
 8009752:	9307      	strlt	r3, [sp, #28]
 8009754:	bfb8      	it	lt
 8009756:	9204      	strlt	r2, [sp, #16]
 8009758:	7823      	ldrb	r3, [r4, #0]
 800975a:	2b2e      	cmp	r3, #46	@ 0x2e
 800975c:	d10a      	bne.n	8009774 <_svfiprintf_r+0x130>
 800975e:	7863      	ldrb	r3, [r4, #1]
 8009760:	2b2a      	cmp	r3, #42	@ 0x2a
 8009762:	d132      	bne.n	80097ca <_svfiprintf_r+0x186>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	1d1a      	adds	r2, r3, #4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	9203      	str	r2, [sp, #12]
 800976c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009770:	3402      	adds	r4, #2
 8009772:	9305      	str	r3, [sp, #20]
 8009774:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009838 <_svfiprintf_r+0x1f4>
 8009778:	7821      	ldrb	r1, [r4, #0]
 800977a:	2203      	movs	r2, #3
 800977c:	4650      	mov	r0, sl
 800977e:	f7f6 fd47 	bl	8000210 <memchr>
 8009782:	b138      	cbz	r0, 8009794 <_svfiprintf_r+0x150>
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	eba0 000a 	sub.w	r0, r0, sl
 800978a:	2240      	movs	r2, #64	@ 0x40
 800978c:	4082      	lsls	r2, r0
 800978e:	4313      	orrs	r3, r2
 8009790:	3401      	adds	r4, #1
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4824      	ldr	r0, [pc, #144]	@ (800982c <_svfiprintf_r+0x1e8>)
 800979a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800979e:	2206      	movs	r2, #6
 80097a0:	f7f6 fd36 	bl	8000210 <memchr>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d036      	beq.n	8009816 <_svfiprintf_r+0x1d2>
 80097a8:	4b21      	ldr	r3, [pc, #132]	@ (8009830 <_svfiprintf_r+0x1ec>)
 80097aa:	bb1b      	cbnz	r3, 80097f4 <_svfiprintf_r+0x1b0>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	3307      	adds	r3, #7
 80097b0:	f023 0307 	bic.w	r3, r3, #7
 80097b4:	3308      	adds	r3, #8
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ba:	4433      	add	r3, r6
 80097bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097be:	e76a      	b.n	8009696 <_svfiprintf_r+0x52>
 80097c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c4:	460c      	mov	r4, r1
 80097c6:	2001      	movs	r0, #1
 80097c8:	e7a8      	b.n	800971c <_svfiprintf_r+0xd8>
 80097ca:	2300      	movs	r3, #0
 80097cc:	3401      	adds	r4, #1
 80097ce:	9305      	str	r3, [sp, #20]
 80097d0:	4619      	mov	r1, r3
 80097d2:	f04f 0c0a 	mov.w	ip, #10
 80097d6:	4620      	mov	r0, r4
 80097d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097dc:	3a30      	subs	r2, #48	@ 0x30
 80097de:	2a09      	cmp	r2, #9
 80097e0:	d903      	bls.n	80097ea <_svfiprintf_r+0x1a6>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0c6      	beq.n	8009774 <_svfiprintf_r+0x130>
 80097e6:	9105      	str	r1, [sp, #20]
 80097e8:	e7c4      	b.n	8009774 <_svfiprintf_r+0x130>
 80097ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ee:	4604      	mov	r4, r0
 80097f0:	2301      	movs	r3, #1
 80097f2:	e7f0      	b.n	80097d6 <_svfiprintf_r+0x192>
 80097f4:	ab03      	add	r3, sp, #12
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	462a      	mov	r2, r5
 80097fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009834 <_svfiprintf_r+0x1f0>)
 80097fc:	a904      	add	r1, sp, #16
 80097fe:	4638      	mov	r0, r7
 8009800:	f7fd fe6a 	bl	80074d8 <_printf_float>
 8009804:	1c42      	adds	r2, r0, #1
 8009806:	4606      	mov	r6, r0
 8009808:	d1d6      	bne.n	80097b8 <_svfiprintf_r+0x174>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	065b      	lsls	r3, r3, #25
 800980e:	f53f af2d 	bmi.w	800966c <_svfiprintf_r+0x28>
 8009812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009814:	e72c      	b.n	8009670 <_svfiprintf_r+0x2c>
 8009816:	ab03      	add	r3, sp, #12
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	462a      	mov	r2, r5
 800981c:	4b05      	ldr	r3, [pc, #20]	@ (8009834 <_svfiprintf_r+0x1f0>)
 800981e:	a904      	add	r1, sp, #16
 8009820:	4638      	mov	r0, r7
 8009822:	f7fe f8f1 	bl	8007a08 <_printf_i>
 8009826:	e7ed      	b.n	8009804 <_svfiprintf_r+0x1c0>
 8009828:	0800a2fe 	.word	0x0800a2fe
 800982c:	0800a308 	.word	0x0800a308
 8009830:	080074d9 	.word	0x080074d9
 8009834:	0800958d 	.word	0x0800958d
 8009838:	0800a304 	.word	0x0800a304

0800983c <__sflush_r>:
 800983c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009844:	0716      	lsls	r6, r2, #28
 8009846:	4605      	mov	r5, r0
 8009848:	460c      	mov	r4, r1
 800984a:	d454      	bmi.n	80098f6 <__sflush_r+0xba>
 800984c:	684b      	ldr	r3, [r1, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	dc02      	bgt.n	8009858 <__sflush_r+0x1c>
 8009852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd48      	ble.n	80098ea <__sflush_r+0xae>
 8009858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800985a:	2e00      	cmp	r6, #0
 800985c:	d045      	beq.n	80098ea <__sflush_r+0xae>
 800985e:	2300      	movs	r3, #0
 8009860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009864:	682f      	ldr	r7, [r5, #0]
 8009866:	6a21      	ldr	r1, [r4, #32]
 8009868:	602b      	str	r3, [r5, #0]
 800986a:	d030      	beq.n	80098ce <__sflush_r+0x92>
 800986c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	0759      	lsls	r1, r3, #29
 8009872:	d505      	bpl.n	8009880 <__sflush_r+0x44>
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	1ad2      	subs	r2, r2, r3
 8009878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800987a:	b10b      	cbz	r3, 8009880 <__sflush_r+0x44>
 800987c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	2300      	movs	r3, #0
 8009882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009884:	6a21      	ldr	r1, [r4, #32]
 8009886:	4628      	mov	r0, r5
 8009888:	47b0      	blx	r6
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	d106      	bne.n	800989e <__sflush_r+0x62>
 8009890:	6829      	ldr	r1, [r5, #0]
 8009892:	291d      	cmp	r1, #29
 8009894:	d82b      	bhi.n	80098ee <__sflush_r+0xb2>
 8009896:	4a2a      	ldr	r2, [pc, #168]	@ (8009940 <__sflush_r+0x104>)
 8009898:	40ca      	lsrs	r2, r1
 800989a:	07d6      	lsls	r6, r2, #31
 800989c:	d527      	bpl.n	80098ee <__sflush_r+0xb2>
 800989e:	2200      	movs	r2, #0
 80098a0:	6062      	str	r2, [r4, #4]
 80098a2:	04d9      	lsls	r1, r3, #19
 80098a4:	6922      	ldr	r2, [r4, #16]
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	d504      	bpl.n	80098b4 <__sflush_r+0x78>
 80098aa:	1c42      	adds	r2, r0, #1
 80098ac:	d101      	bne.n	80098b2 <__sflush_r+0x76>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	b903      	cbnz	r3, 80098b4 <__sflush_r+0x78>
 80098b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80098b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098b6:	602f      	str	r7, [r5, #0]
 80098b8:	b1b9      	cbz	r1, 80098ea <__sflush_r+0xae>
 80098ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098be:	4299      	cmp	r1, r3
 80098c0:	d002      	beq.n	80098c8 <__sflush_r+0x8c>
 80098c2:	4628      	mov	r0, r5
 80098c4:	f7ff f9e8 	bl	8008c98 <_free_r>
 80098c8:	2300      	movs	r3, #0
 80098ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80098cc:	e00d      	b.n	80098ea <__sflush_r+0xae>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	4602      	mov	r2, r0
 80098d6:	1c50      	adds	r0, r2, #1
 80098d8:	d1c9      	bne.n	800986e <__sflush_r+0x32>
 80098da:	682b      	ldr	r3, [r5, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0c6      	beq.n	800986e <__sflush_r+0x32>
 80098e0:	2b1d      	cmp	r3, #29
 80098e2:	d001      	beq.n	80098e8 <__sflush_r+0xac>
 80098e4:	2b16      	cmp	r3, #22
 80098e6:	d11e      	bne.n	8009926 <__sflush_r+0xea>
 80098e8:	602f      	str	r7, [r5, #0]
 80098ea:	2000      	movs	r0, #0
 80098ec:	e022      	b.n	8009934 <__sflush_r+0xf8>
 80098ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f2:	b21b      	sxth	r3, r3
 80098f4:	e01b      	b.n	800992e <__sflush_r+0xf2>
 80098f6:	690f      	ldr	r7, [r1, #16]
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	d0f6      	beq.n	80098ea <__sflush_r+0xae>
 80098fc:	0793      	lsls	r3, r2, #30
 80098fe:	680e      	ldr	r6, [r1, #0]
 8009900:	bf08      	it	eq
 8009902:	694b      	ldreq	r3, [r1, #20]
 8009904:	600f      	str	r7, [r1, #0]
 8009906:	bf18      	it	ne
 8009908:	2300      	movne	r3, #0
 800990a:	eba6 0807 	sub.w	r8, r6, r7
 800990e:	608b      	str	r3, [r1, #8]
 8009910:	f1b8 0f00 	cmp.w	r8, #0
 8009914:	dde9      	ble.n	80098ea <__sflush_r+0xae>
 8009916:	6a21      	ldr	r1, [r4, #32]
 8009918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800991a:	4643      	mov	r3, r8
 800991c:	463a      	mov	r2, r7
 800991e:	4628      	mov	r0, r5
 8009920:	47b0      	blx	r6
 8009922:	2800      	cmp	r0, #0
 8009924:	dc08      	bgt.n	8009938 <__sflush_r+0xfc>
 8009926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	4407      	add	r7, r0
 800993a:	eba8 0800 	sub.w	r8, r8, r0
 800993e:	e7e7      	b.n	8009910 <__sflush_r+0xd4>
 8009940:	20400001 	.word	0x20400001

08009944 <_fflush_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	690b      	ldr	r3, [r1, #16]
 8009948:	4605      	mov	r5, r0
 800994a:	460c      	mov	r4, r1
 800994c:	b913      	cbnz	r3, 8009954 <_fflush_r+0x10>
 800994e:	2500      	movs	r5, #0
 8009950:	4628      	mov	r0, r5
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	b118      	cbz	r0, 800995e <_fflush_r+0x1a>
 8009956:	6a03      	ldr	r3, [r0, #32]
 8009958:	b90b      	cbnz	r3, 800995e <_fflush_r+0x1a>
 800995a:	f7fe f9ff 	bl	8007d5c <__sinit>
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0f3      	beq.n	800994e <_fflush_r+0xa>
 8009966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009968:	07d0      	lsls	r0, r2, #31
 800996a:	d404      	bmi.n	8009976 <_fflush_r+0x32>
 800996c:	0599      	lsls	r1, r3, #22
 800996e:	d402      	bmi.n	8009976 <_fflush_r+0x32>
 8009970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009972:	f7fe fb26 	bl	8007fc2 <__retarget_lock_acquire_recursive>
 8009976:	4628      	mov	r0, r5
 8009978:	4621      	mov	r1, r4
 800997a:	f7ff ff5f 	bl	800983c <__sflush_r>
 800997e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009980:	07da      	lsls	r2, r3, #31
 8009982:	4605      	mov	r5, r0
 8009984:	d4e4      	bmi.n	8009950 <_fflush_r+0xc>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	059b      	lsls	r3, r3, #22
 800998a:	d4e1      	bmi.n	8009950 <_fflush_r+0xc>
 800998c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800998e:	f7fe fb19 	bl	8007fc4 <__retarget_lock_release_recursive>
 8009992:	e7dd      	b.n	8009950 <_fflush_r+0xc>

08009994 <memmove>:
 8009994:	4288      	cmp	r0, r1
 8009996:	b510      	push	{r4, lr}
 8009998:	eb01 0402 	add.w	r4, r1, r2
 800999c:	d902      	bls.n	80099a4 <memmove+0x10>
 800999e:	4284      	cmp	r4, r0
 80099a0:	4623      	mov	r3, r4
 80099a2:	d807      	bhi.n	80099b4 <memmove+0x20>
 80099a4:	1e43      	subs	r3, r0, #1
 80099a6:	42a1      	cmp	r1, r4
 80099a8:	d008      	beq.n	80099bc <memmove+0x28>
 80099aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099b2:	e7f8      	b.n	80099a6 <memmove+0x12>
 80099b4:	4402      	add	r2, r0
 80099b6:	4601      	mov	r1, r0
 80099b8:	428a      	cmp	r2, r1
 80099ba:	d100      	bne.n	80099be <memmove+0x2a>
 80099bc:	bd10      	pop	{r4, pc}
 80099be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099c6:	e7f7      	b.n	80099b8 <memmove+0x24>

080099c8 <_sbrk_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d06      	ldr	r5, [pc, #24]	@ (80099e4 <_sbrk_r+0x1c>)
 80099cc:	2300      	movs	r3, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	4608      	mov	r0, r1
 80099d2:	602b      	str	r3, [r5, #0]
 80099d4:	f7f8 f928 	bl	8001c28 <_sbrk>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_sbrk_r+0x1a>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_sbrk_r+0x1a>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	20004f70 	.word	0x20004f70

080099e8 <__assert_func>:
 80099e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ea:	4614      	mov	r4, r2
 80099ec:	461a      	mov	r2, r3
 80099ee:	4b09      	ldr	r3, [pc, #36]	@ (8009a14 <__assert_func+0x2c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4605      	mov	r5, r0
 80099f4:	68d8      	ldr	r0, [r3, #12]
 80099f6:	b14c      	cbz	r4, 8009a0c <__assert_func+0x24>
 80099f8:	4b07      	ldr	r3, [pc, #28]	@ (8009a18 <__assert_func+0x30>)
 80099fa:	9100      	str	r1, [sp, #0]
 80099fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a00:	4906      	ldr	r1, [pc, #24]	@ (8009a1c <__assert_func+0x34>)
 8009a02:	462b      	mov	r3, r5
 8009a04:	f000 f870 	bl	8009ae8 <fiprintf>
 8009a08:	f000 f880 	bl	8009b0c <abort>
 8009a0c:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <__assert_func+0x38>)
 8009a0e:	461c      	mov	r4, r3
 8009a10:	e7f3      	b.n	80099fa <__assert_func+0x12>
 8009a12:	bf00      	nop
 8009a14:	20000020 	.word	0x20000020
 8009a18:	0800a319 	.word	0x0800a319
 8009a1c:	0800a326 	.word	0x0800a326
 8009a20:	0800a354 	.word	0x0800a354

08009a24 <_calloc_r>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	fba1 5402 	umull	r5, r4, r1, r2
 8009a2a:	b934      	cbnz	r4, 8009a3a <_calloc_r+0x16>
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7ff f9a7 	bl	8008d80 <_malloc_r>
 8009a32:	4606      	mov	r6, r0
 8009a34:	b928      	cbnz	r0, 8009a42 <_calloc_r+0x1e>
 8009a36:	4630      	mov	r0, r6
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	220c      	movs	r2, #12
 8009a3c:	6002      	str	r2, [r0, #0]
 8009a3e:	2600      	movs	r6, #0
 8009a40:	e7f9      	b.n	8009a36 <_calloc_r+0x12>
 8009a42:	462a      	mov	r2, r5
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7fe fa3f 	bl	8007ec8 <memset>
 8009a4a:	e7f4      	b.n	8009a36 <_calloc_r+0x12>

08009a4c <__ascii_mbtowc>:
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	b901      	cbnz	r1, 8009a52 <__ascii_mbtowc+0x6>
 8009a50:	a901      	add	r1, sp, #4
 8009a52:	b142      	cbz	r2, 8009a66 <__ascii_mbtowc+0x1a>
 8009a54:	b14b      	cbz	r3, 8009a6a <__ascii_mbtowc+0x1e>
 8009a56:	7813      	ldrb	r3, [r2, #0]
 8009a58:	600b      	str	r3, [r1, #0]
 8009a5a:	7812      	ldrb	r2, [r2, #0]
 8009a5c:	1e10      	subs	r0, r2, #0
 8009a5e:	bf18      	it	ne
 8009a60:	2001      	movne	r0, #1
 8009a62:	b002      	add	sp, #8
 8009a64:	4770      	bx	lr
 8009a66:	4610      	mov	r0, r2
 8009a68:	e7fb      	b.n	8009a62 <__ascii_mbtowc+0x16>
 8009a6a:	f06f 0001 	mvn.w	r0, #1
 8009a6e:	e7f8      	b.n	8009a62 <__ascii_mbtowc+0x16>

08009a70 <_realloc_r>:
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	4607      	mov	r7, r0
 8009a76:	4614      	mov	r4, r2
 8009a78:	460d      	mov	r5, r1
 8009a7a:	b921      	cbnz	r1, 8009a86 <_realloc_r+0x16>
 8009a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a80:	4611      	mov	r1, r2
 8009a82:	f7ff b97d 	b.w	8008d80 <_malloc_r>
 8009a86:	b92a      	cbnz	r2, 8009a94 <_realloc_r+0x24>
 8009a88:	f7ff f906 	bl	8008c98 <_free_r>
 8009a8c:	4625      	mov	r5, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a94:	f000 f841 	bl	8009b1a <_malloc_usable_size_r>
 8009a98:	4284      	cmp	r4, r0
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	d802      	bhi.n	8009aa4 <_realloc_r+0x34>
 8009a9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009aa2:	d8f4      	bhi.n	8009a8e <_realloc_r+0x1e>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f7ff f96a 	bl	8008d80 <_malloc_r>
 8009aac:	4680      	mov	r8, r0
 8009aae:	b908      	cbnz	r0, 8009ab4 <_realloc_r+0x44>
 8009ab0:	4645      	mov	r5, r8
 8009ab2:	e7ec      	b.n	8009a8e <_realloc_r+0x1e>
 8009ab4:	42b4      	cmp	r4, r6
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	bf28      	it	cs
 8009abc:	4632      	movcs	r2, r6
 8009abe:	f7fe fa82 	bl	8007fc6 <memcpy>
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f7ff f8e7 	bl	8008c98 <_free_r>
 8009aca:	e7f1      	b.n	8009ab0 <_realloc_r+0x40>

08009acc <__ascii_wctomb>:
 8009acc:	4603      	mov	r3, r0
 8009ace:	4608      	mov	r0, r1
 8009ad0:	b141      	cbz	r1, 8009ae4 <__ascii_wctomb+0x18>
 8009ad2:	2aff      	cmp	r2, #255	@ 0xff
 8009ad4:	d904      	bls.n	8009ae0 <__ascii_wctomb+0x14>
 8009ad6:	228a      	movs	r2, #138	@ 0x8a
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	4770      	bx	lr
 8009ae0:	700a      	strb	r2, [r1, #0]
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	4770      	bx	lr
	...

08009ae8 <fiprintf>:
 8009ae8:	b40e      	push	{r1, r2, r3}
 8009aea:	b503      	push	{r0, r1, lr}
 8009aec:	4601      	mov	r1, r0
 8009aee:	ab03      	add	r3, sp, #12
 8009af0:	4805      	ldr	r0, [pc, #20]	@ (8009b08 <fiprintf+0x20>)
 8009af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af6:	6800      	ldr	r0, [r0, #0]
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	f000 f83f 	bl	8009b7c <_vfiprintf_r>
 8009afe:	b002      	add	sp, #8
 8009b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b04:	b003      	add	sp, #12
 8009b06:	4770      	bx	lr
 8009b08:	20000020 	.word	0x20000020

08009b0c <abort>:
 8009b0c:	b508      	push	{r3, lr}
 8009b0e:	2006      	movs	r0, #6
 8009b10:	f000 fa08 	bl	8009f24 <raise>
 8009b14:	2001      	movs	r0, #1
 8009b16:	f7f8 f80f 	bl	8001b38 <_exit>

08009b1a <_malloc_usable_size_r>:
 8009b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b1e:	1f18      	subs	r0, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	bfbc      	itt	lt
 8009b24:	580b      	ldrlt	r3, [r1, r0]
 8009b26:	18c0      	addlt	r0, r0, r3
 8009b28:	4770      	bx	lr

08009b2a <__sfputc_r>:
 8009b2a:	6893      	ldr	r3, [r2, #8]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	b410      	push	{r4}
 8009b32:	6093      	str	r3, [r2, #8]
 8009b34:	da08      	bge.n	8009b48 <__sfputc_r+0x1e>
 8009b36:	6994      	ldr	r4, [r2, #24]
 8009b38:	42a3      	cmp	r3, r4
 8009b3a:	db01      	blt.n	8009b40 <__sfputc_r+0x16>
 8009b3c:	290a      	cmp	r1, #10
 8009b3e:	d103      	bne.n	8009b48 <__sfputc_r+0x1e>
 8009b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b44:	f000 b932 	b.w	8009dac <__swbuf_r>
 8009b48:	6813      	ldr	r3, [r2, #0]
 8009b4a:	1c58      	adds	r0, r3, #1
 8009b4c:	6010      	str	r0, [r2, #0]
 8009b4e:	7019      	strb	r1, [r3, #0]
 8009b50:	4608      	mov	r0, r1
 8009b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <__sfputs_r>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	4614      	mov	r4, r2
 8009b60:	18d5      	adds	r5, r2, r3
 8009b62:	42ac      	cmp	r4, r5
 8009b64:	d101      	bne.n	8009b6a <__sfputs_r+0x12>
 8009b66:	2000      	movs	r0, #0
 8009b68:	e007      	b.n	8009b7a <__sfputs_r+0x22>
 8009b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b6e:	463a      	mov	r2, r7
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7ff ffda 	bl	8009b2a <__sfputc_r>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d1f3      	bne.n	8009b62 <__sfputs_r+0xa>
 8009b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b7c <_vfiprintf_r>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	460d      	mov	r5, r1
 8009b82:	b09d      	sub	sp, #116	@ 0x74
 8009b84:	4614      	mov	r4, r2
 8009b86:	4698      	mov	r8, r3
 8009b88:	4606      	mov	r6, r0
 8009b8a:	b118      	cbz	r0, 8009b94 <_vfiprintf_r+0x18>
 8009b8c:	6a03      	ldr	r3, [r0, #32]
 8009b8e:	b90b      	cbnz	r3, 8009b94 <_vfiprintf_r+0x18>
 8009b90:	f7fe f8e4 	bl	8007d5c <__sinit>
 8009b94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b96:	07d9      	lsls	r1, r3, #31
 8009b98:	d405      	bmi.n	8009ba6 <_vfiprintf_r+0x2a>
 8009b9a:	89ab      	ldrh	r3, [r5, #12]
 8009b9c:	059a      	lsls	r2, r3, #22
 8009b9e:	d402      	bmi.n	8009ba6 <_vfiprintf_r+0x2a>
 8009ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ba2:	f7fe fa0e 	bl	8007fc2 <__retarget_lock_acquire_recursive>
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	071b      	lsls	r3, r3, #28
 8009baa:	d501      	bpl.n	8009bb0 <_vfiprintf_r+0x34>
 8009bac:	692b      	ldr	r3, [r5, #16]
 8009bae:	b99b      	cbnz	r3, 8009bd8 <_vfiprintf_r+0x5c>
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f000 f938 	bl	8009e28 <__swsetup_r>
 8009bb8:	b170      	cbz	r0, 8009bd8 <_vfiprintf_r+0x5c>
 8009bba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bbc:	07dc      	lsls	r4, r3, #31
 8009bbe:	d504      	bpl.n	8009bca <_vfiprintf_r+0x4e>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	b01d      	add	sp, #116	@ 0x74
 8009bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	0598      	lsls	r0, r3, #22
 8009bce:	d4f7      	bmi.n	8009bc0 <_vfiprintf_r+0x44>
 8009bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bd2:	f7fe f9f7 	bl	8007fc4 <__retarget_lock_release_recursive>
 8009bd6:	e7f3      	b.n	8009bc0 <_vfiprintf_r+0x44>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009be6:	2330      	movs	r3, #48	@ 0x30
 8009be8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d98 <_vfiprintf_r+0x21c>
 8009bec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bf0:	f04f 0901 	mov.w	r9, #1
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	469a      	mov	sl, r3
 8009bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bfc:	b10a      	cbz	r2, 8009c02 <_vfiprintf_r+0x86>
 8009bfe:	2a25      	cmp	r2, #37	@ 0x25
 8009c00:	d1f9      	bne.n	8009bf6 <_vfiprintf_r+0x7a>
 8009c02:	ebba 0b04 	subs.w	fp, sl, r4
 8009c06:	d00b      	beq.n	8009c20 <_vfiprintf_r+0xa4>
 8009c08:	465b      	mov	r3, fp
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7ff ffa2 	bl	8009b58 <__sfputs_r>
 8009c14:	3001      	adds	r0, #1
 8009c16:	f000 80a7 	beq.w	8009d68 <_vfiprintf_r+0x1ec>
 8009c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c1c:	445a      	add	r2, fp
 8009c1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c20:	f89a 3000 	ldrb.w	r3, [sl]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 809f 	beq.w	8009d68 <_vfiprintf_r+0x1ec>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c34:	f10a 0a01 	add.w	sl, sl, #1
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	9307      	str	r3, [sp, #28]
 8009c3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c40:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c42:	4654      	mov	r4, sl
 8009c44:	2205      	movs	r2, #5
 8009c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4a:	4853      	ldr	r0, [pc, #332]	@ (8009d98 <_vfiprintf_r+0x21c>)
 8009c4c:	f7f6 fae0 	bl	8000210 <memchr>
 8009c50:	9a04      	ldr	r2, [sp, #16]
 8009c52:	b9d8      	cbnz	r0, 8009c8c <_vfiprintf_r+0x110>
 8009c54:	06d1      	lsls	r1, r2, #27
 8009c56:	bf44      	itt	mi
 8009c58:	2320      	movmi	r3, #32
 8009c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c5e:	0713      	lsls	r3, r2, #28
 8009c60:	bf44      	itt	mi
 8009c62:	232b      	movmi	r3, #43	@ 0x2b
 8009c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c68:	f89a 3000 	ldrb.w	r3, [sl]
 8009c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c6e:	d015      	beq.n	8009c9c <_vfiprintf_r+0x120>
 8009c70:	9a07      	ldr	r2, [sp, #28]
 8009c72:	4654      	mov	r4, sl
 8009c74:	2000      	movs	r0, #0
 8009c76:	f04f 0c0a 	mov.w	ip, #10
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c80:	3b30      	subs	r3, #48	@ 0x30
 8009c82:	2b09      	cmp	r3, #9
 8009c84:	d94b      	bls.n	8009d1e <_vfiprintf_r+0x1a2>
 8009c86:	b1b0      	cbz	r0, 8009cb6 <_vfiprintf_r+0x13a>
 8009c88:	9207      	str	r2, [sp, #28]
 8009c8a:	e014      	b.n	8009cb6 <_vfiprintf_r+0x13a>
 8009c8c:	eba0 0308 	sub.w	r3, r0, r8
 8009c90:	fa09 f303 	lsl.w	r3, r9, r3
 8009c94:	4313      	orrs	r3, r2
 8009c96:	9304      	str	r3, [sp, #16]
 8009c98:	46a2      	mov	sl, r4
 8009c9a:	e7d2      	b.n	8009c42 <_vfiprintf_r+0xc6>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	1d19      	adds	r1, r3, #4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	9103      	str	r1, [sp, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfbb      	ittet	lt
 8009ca8:	425b      	neglt	r3, r3
 8009caa:	f042 0202 	orrlt.w	r2, r2, #2
 8009cae:	9307      	strge	r3, [sp, #28]
 8009cb0:	9307      	strlt	r3, [sp, #28]
 8009cb2:	bfb8      	it	lt
 8009cb4:	9204      	strlt	r2, [sp, #16]
 8009cb6:	7823      	ldrb	r3, [r4, #0]
 8009cb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cba:	d10a      	bne.n	8009cd2 <_vfiprintf_r+0x156>
 8009cbc:	7863      	ldrb	r3, [r4, #1]
 8009cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cc0:	d132      	bne.n	8009d28 <_vfiprintf_r+0x1ac>
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	1d1a      	adds	r2, r3, #4
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	9203      	str	r2, [sp, #12]
 8009cca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cce:	3402      	adds	r4, #2
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009da8 <_vfiprintf_r+0x22c>
 8009cd6:	7821      	ldrb	r1, [r4, #0]
 8009cd8:	2203      	movs	r2, #3
 8009cda:	4650      	mov	r0, sl
 8009cdc:	f7f6 fa98 	bl	8000210 <memchr>
 8009ce0:	b138      	cbz	r0, 8009cf2 <_vfiprintf_r+0x176>
 8009ce2:	9b04      	ldr	r3, [sp, #16]
 8009ce4:	eba0 000a 	sub.w	r0, r0, sl
 8009ce8:	2240      	movs	r2, #64	@ 0x40
 8009cea:	4082      	lsls	r2, r0
 8009cec:	4313      	orrs	r3, r2
 8009cee:	3401      	adds	r4, #1
 8009cf0:	9304      	str	r3, [sp, #16]
 8009cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf6:	4829      	ldr	r0, [pc, #164]	@ (8009d9c <_vfiprintf_r+0x220>)
 8009cf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cfc:	2206      	movs	r2, #6
 8009cfe:	f7f6 fa87 	bl	8000210 <memchr>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d03f      	beq.n	8009d86 <_vfiprintf_r+0x20a>
 8009d06:	4b26      	ldr	r3, [pc, #152]	@ (8009da0 <_vfiprintf_r+0x224>)
 8009d08:	bb1b      	cbnz	r3, 8009d52 <_vfiprintf_r+0x1d6>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	3307      	adds	r3, #7
 8009d0e:	f023 0307 	bic.w	r3, r3, #7
 8009d12:	3308      	adds	r3, #8
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d18:	443b      	add	r3, r7
 8009d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d1c:	e76a      	b.n	8009bf4 <_vfiprintf_r+0x78>
 8009d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d22:	460c      	mov	r4, r1
 8009d24:	2001      	movs	r0, #1
 8009d26:	e7a8      	b.n	8009c7a <_vfiprintf_r+0xfe>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	3401      	adds	r4, #1
 8009d2c:	9305      	str	r3, [sp, #20]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f04f 0c0a 	mov.w	ip, #10
 8009d34:	4620      	mov	r0, r4
 8009d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d3a:	3a30      	subs	r2, #48	@ 0x30
 8009d3c:	2a09      	cmp	r2, #9
 8009d3e:	d903      	bls.n	8009d48 <_vfiprintf_r+0x1cc>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d0c6      	beq.n	8009cd2 <_vfiprintf_r+0x156>
 8009d44:	9105      	str	r1, [sp, #20]
 8009d46:	e7c4      	b.n	8009cd2 <_vfiprintf_r+0x156>
 8009d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e7f0      	b.n	8009d34 <_vfiprintf_r+0x1b8>
 8009d52:	ab03      	add	r3, sp, #12
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	462a      	mov	r2, r5
 8009d58:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <_vfiprintf_r+0x228>)
 8009d5a:	a904      	add	r1, sp, #16
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f7fd fbbb 	bl	80074d8 <_printf_float>
 8009d62:	4607      	mov	r7, r0
 8009d64:	1c78      	adds	r0, r7, #1
 8009d66:	d1d6      	bne.n	8009d16 <_vfiprintf_r+0x19a>
 8009d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_vfiprintf_r+0x1fe>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_vfiprintf_r+0x1fe>
 8009d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d76:	f7fe f925 	bl	8007fc4 <__retarget_lock_release_recursive>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	065b      	lsls	r3, r3, #25
 8009d7e:	f53f af1f 	bmi.w	8009bc0 <_vfiprintf_r+0x44>
 8009d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d84:	e71e      	b.n	8009bc4 <_vfiprintf_r+0x48>
 8009d86:	ab03      	add	r3, sp, #12
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	462a      	mov	r2, r5
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <_vfiprintf_r+0x228>)
 8009d8e:	a904      	add	r1, sp, #16
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7fd fe39 	bl	8007a08 <_printf_i>
 8009d96:	e7e4      	b.n	8009d62 <_vfiprintf_r+0x1e6>
 8009d98:	0800a2fe 	.word	0x0800a2fe
 8009d9c:	0800a308 	.word	0x0800a308
 8009da0:	080074d9 	.word	0x080074d9
 8009da4:	08009b59 	.word	0x08009b59
 8009da8:	0800a304 	.word	0x0800a304

08009dac <__swbuf_r>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	460e      	mov	r6, r1
 8009db0:	4614      	mov	r4, r2
 8009db2:	4605      	mov	r5, r0
 8009db4:	b118      	cbz	r0, 8009dbe <__swbuf_r+0x12>
 8009db6:	6a03      	ldr	r3, [r0, #32]
 8009db8:	b90b      	cbnz	r3, 8009dbe <__swbuf_r+0x12>
 8009dba:	f7fd ffcf 	bl	8007d5c <__sinit>
 8009dbe:	69a3      	ldr	r3, [r4, #24]
 8009dc0:	60a3      	str	r3, [r4, #8]
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	071a      	lsls	r2, r3, #28
 8009dc6:	d501      	bpl.n	8009dcc <__swbuf_r+0x20>
 8009dc8:	6923      	ldr	r3, [r4, #16]
 8009dca:	b943      	cbnz	r3, 8009dde <__swbuf_r+0x32>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 f82a 	bl	8009e28 <__swsetup_r>
 8009dd4:	b118      	cbz	r0, 8009dde <__swbuf_r+0x32>
 8009dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8009dda:	4638      	mov	r0, r7
 8009ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	6922      	ldr	r2, [r4, #16]
 8009de2:	1a98      	subs	r0, r3, r2
 8009de4:	6963      	ldr	r3, [r4, #20]
 8009de6:	b2f6      	uxtb	r6, r6
 8009de8:	4283      	cmp	r3, r0
 8009dea:	4637      	mov	r7, r6
 8009dec:	dc05      	bgt.n	8009dfa <__swbuf_r+0x4e>
 8009dee:	4621      	mov	r1, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	f7ff fda7 	bl	8009944 <_fflush_r>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d1ed      	bne.n	8009dd6 <__swbuf_r+0x2a>
 8009dfa:	68a3      	ldr	r3, [r4, #8]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	60a3      	str	r3, [r4, #8]
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	701e      	strb	r6, [r3, #0]
 8009e08:	6962      	ldr	r2, [r4, #20]
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d004      	beq.n	8009e1a <__swbuf_r+0x6e>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	07db      	lsls	r3, r3, #31
 8009e14:	d5e1      	bpl.n	8009dda <__swbuf_r+0x2e>
 8009e16:	2e0a      	cmp	r6, #10
 8009e18:	d1df      	bne.n	8009dda <__swbuf_r+0x2e>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f7ff fd91 	bl	8009944 <_fflush_r>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d0d9      	beq.n	8009dda <__swbuf_r+0x2e>
 8009e26:	e7d6      	b.n	8009dd6 <__swbuf_r+0x2a>

08009e28 <__swsetup_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4b29      	ldr	r3, [pc, #164]	@ (8009ed0 <__swsetup_r+0xa8>)
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	460c      	mov	r4, r1
 8009e32:	b118      	cbz	r0, 8009e3c <__swsetup_r+0x14>
 8009e34:	6a03      	ldr	r3, [r0, #32]
 8009e36:	b90b      	cbnz	r3, 8009e3c <__swsetup_r+0x14>
 8009e38:	f7fd ff90 	bl	8007d5c <__sinit>
 8009e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e40:	0719      	lsls	r1, r3, #28
 8009e42:	d422      	bmi.n	8009e8a <__swsetup_r+0x62>
 8009e44:	06da      	lsls	r2, r3, #27
 8009e46:	d407      	bmi.n	8009e58 <__swsetup_r+0x30>
 8009e48:	2209      	movs	r2, #9
 8009e4a:	602a      	str	r2, [r5, #0]
 8009e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	f04f 30ff 	mov.w	r0, #4294967295
 8009e56:	e033      	b.n	8009ec0 <__swsetup_r+0x98>
 8009e58:	0758      	lsls	r0, r3, #29
 8009e5a:	d512      	bpl.n	8009e82 <__swsetup_r+0x5a>
 8009e5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e5e:	b141      	cbz	r1, 8009e72 <__swsetup_r+0x4a>
 8009e60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e64:	4299      	cmp	r1, r3
 8009e66:	d002      	beq.n	8009e6e <__swsetup_r+0x46>
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f7fe ff15 	bl	8008c98 <_free_r>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6063      	str	r3, [r4, #4]
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	f043 0308 	orr.w	r3, r3, #8
 8009e88:	81a3      	strh	r3, [r4, #12]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	b94b      	cbnz	r3, 8009ea2 <__swsetup_r+0x7a>
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e98:	d003      	beq.n	8009ea2 <__swsetup_r+0x7a>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f000 f883 	bl	8009fa8 <__smakebuf_r>
 8009ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea6:	f013 0201 	ands.w	r2, r3, #1
 8009eaa:	d00a      	beq.n	8009ec2 <__swsetup_r+0x9a>
 8009eac:	2200      	movs	r2, #0
 8009eae:	60a2      	str	r2, [r4, #8]
 8009eb0:	6962      	ldr	r2, [r4, #20]
 8009eb2:	4252      	negs	r2, r2
 8009eb4:	61a2      	str	r2, [r4, #24]
 8009eb6:	6922      	ldr	r2, [r4, #16]
 8009eb8:	b942      	cbnz	r2, 8009ecc <__swsetup_r+0xa4>
 8009eba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ebe:	d1c5      	bne.n	8009e4c <__swsetup_r+0x24>
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	0799      	lsls	r1, r3, #30
 8009ec4:	bf58      	it	pl
 8009ec6:	6962      	ldrpl	r2, [r4, #20]
 8009ec8:	60a2      	str	r2, [r4, #8]
 8009eca:	e7f4      	b.n	8009eb6 <__swsetup_r+0x8e>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e7f7      	b.n	8009ec0 <__swsetup_r+0x98>
 8009ed0:	20000020 	.word	0x20000020

08009ed4 <_raise_r>:
 8009ed4:	291f      	cmp	r1, #31
 8009ed6:	b538      	push	{r3, r4, r5, lr}
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	d904      	bls.n	8009ee8 <_raise_r+0x14>
 8009ede:	2316      	movs	r3, #22
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009eea:	b112      	cbz	r2, 8009ef2 <_raise_r+0x1e>
 8009eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ef0:	b94b      	cbnz	r3, 8009f06 <_raise_r+0x32>
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f830 	bl	8009f58 <_getpid_r>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4601      	mov	r1, r0
 8009efc:	4628      	mov	r0, r5
 8009efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f02:	f000 b817 	b.w	8009f34 <_kill_r>
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d00a      	beq.n	8009f20 <_raise_r+0x4c>
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	d103      	bne.n	8009f16 <_raise_r+0x42>
 8009f0e:	2316      	movs	r3, #22
 8009f10:	6003      	str	r3, [r0, #0]
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7e7      	b.n	8009ee6 <_raise_r+0x12>
 8009f16:	2100      	movs	r1, #0
 8009f18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4798      	blx	r3
 8009f20:	2000      	movs	r0, #0
 8009f22:	e7e0      	b.n	8009ee6 <_raise_r+0x12>

08009f24 <raise>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	@ (8009f30 <raise+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f7ff bfd3 	b.w	8009ed4 <_raise_r>
 8009f2e:	bf00      	nop
 8009f30:	20000020 	.word	0x20000020

08009f34 <_kill_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	@ (8009f54 <_kill_r+0x20>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	f7f7 fde9 	bl	8001b18 <_kill>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d102      	bne.n	8009f50 <_kill_r+0x1c>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	b103      	cbz	r3, 8009f50 <_kill_r+0x1c>
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	20004f70 	.word	0x20004f70

08009f58 <_getpid_r>:
 8009f58:	f7f7 bdd6 	b.w	8001b08 <_getpid>

08009f5c <__swhatbuf_r>:
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	460c      	mov	r4, r1
 8009f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f64:	2900      	cmp	r1, #0
 8009f66:	b096      	sub	sp, #88	@ 0x58
 8009f68:	4615      	mov	r5, r2
 8009f6a:	461e      	mov	r6, r3
 8009f6c:	da0d      	bge.n	8009f8a <__swhatbuf_r+0x2e>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f74:	f04f 0100 	mov.w	r1, #0
 8009f78:	bf14      	ite	ne
 8009f7a:	2340      	movne	r3, #64	@ 0x40
 8009f7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f80:	2000      	movs	r0, #0
 8009f82:	6031      	str	r1, [r6, #0]
 8009f84:	602b      	str	r3, [r5, #0]
 8009f86:	b016      	add	sp, #88	@ 0x58
 8009f88:	bd70      	pop	{r4, r5, r6, pc}
 8009f8a:	466a      	mov	r2, sp
 8009f8c:	f000 f848 	bl	800a020 <_fstat_r>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	dbec      	blt.n	8009f6e <__swhatbuf_r+0x12>
 8009f94:	9901      	ldr	r1, [sp, #4]
 8009f96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f9e:	4259      	negs	r1, r3
 8009fa0:	4159      	adcs	r1, r3
 8009fa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fa6:	e7eb      	b.n	8009f80 <__swhatbuf_r+0x24>

08009fa8 <__smakebuf_r>:
 8009fa8:	898b      	ldrh	r3, [r1, #12]
 8009faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fac:	079d      	lsls	r5, r3, #30
 8009fae:	4606      	mov	r6, r0
 8009fb0:	460c      	mov	r4, r1
 8009fb2:	d507      	bpl.n	8009fc4 <__smakebuf_r+0x1c>
 8009fb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	6123      	str	r3, [r4, #16]
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	6163      	str	r3, [r4, #20]
 8009fc0:	b003      	add	sp, #12
 8009fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc4:	ab01      	add	r3, sp, #4
 8009fc6:	466a      	mov	r2, sp
 8009fc8:	f7ff ffc8 	bl	8009f5c <__swhatbuf_r>
 8009fcc:	9f00      	ldr	r7, [sp, #0]
 8009fce:	4605      	mov	r5, r0
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7fe fed4 	bl	8008d80 <_malloc_r>
 8009fd8:	b948      	cbnz	r0, 8009fee <__smakebuf_r+0x46>
 8009fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fde:	059a      	lsls	r2, r3, #22
 8009fe0:	d4ee      	bmi.n	8009fc0 <__smakebuf_r+0x18>
 8009fe2:	f023 0303 	bic.w	r3, r3, #3
 8009fe6:	f043 0302 	orr.w	r3, r3, #2
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	e7e2      	b.n	8009fb4 <__smakebuf_r+0xc>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	6020      	str	r0, [r4, #0]
 8009ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	9b01      	ldr	r3, [sp, #4]
 8009ffa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ffe:	b15b      	cbz	r3, 800a018 <__smakebuf_r+0x70>
 800a000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a004:	4630      	mov	r0, r6
 800a006:	f000 f81d 	bl	800a044 <_isatty_r>
 800a00a:	b128      	cbz	r0, 800a018 <__smakebuf_r+0x70>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	f043 0301 	orr.w	r3, r3, #1
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	431d      	orrs	r5, r3
 800a01c:	81a5      	strh	r5, [r4, #12]
 800a01e:	e7cf      	b.n	8009fc0 <__smakebuf_r+0x18>

0800a020 <_fstat_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	@ (800a040 <_fstat_r+0x20>)
 800a024:	2300      	movs	r3, #0
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	4611      	mov	r1, r2
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	f7f7 fdd3 	bl	8001bd8 <_fstat>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d102      	bne.n	800a03c <_fstat_r+0x1c>
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	b103      	cbz	r3, 800a03c <_fstat_r+0x1c>
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	20004f70 	.word	0x20004f70

0800a044 <_isatty_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d06      	ldr	r5, [pc, #24]	@ (800a060 <_isatty_r+0x1c>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f7 fdd2 	bl	8001bf8 <_isatty>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_isatty_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_isatty_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	20004f70 	.word	0x20004f70

0800a064 <_init>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr

0800a070 <_fini>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	bf00      	nop
 800a074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a076:	bc08      	pop	{r3}
 800a078:	469e      	mov	lr, r3
 800a07a:	4770      	bx	lr
